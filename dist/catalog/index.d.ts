/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * A globally unique identifier for this catalog instance. This UUID should be changed when this document is revised.
 */
export declare type CatalogUniversallyUniqueIdentifier = string;
/**
 * A name given to the document, which may be used by a tool for display and navigation.
 */
export declare type DocumentTitle = string;
/**
 * The date and time the document was published. The date_time value must be formatted according to RFC 3339 with full time and time zone included.
 */
export declare type PublicationTimestamp = string;
/**
 * The date and time the document was last modified. The date_time value must be formatted according to RFC 3339 with full time and time zone included.
 */
export declare type LastModifiedTimestamp = string;
/**
 * A string used to distinguish the current version of the document from other previous (and future) versions.
 */
export declare type DocumentVersion = string;
/**
 * The OSCAL model version the document was authored against.
 */
export declare type OSCALVersion = string;
/**
 * A name given to the document revision, which may be used by a tool for display and navigation.
 */
export declare type DocumentTitle1 = string;
/**
 * A unique identifier that can be used to reference this property elsewhere in an OSCAL document. A UUID should be consistantly used for a given location across revisions of the document.
 */
export declare type PropertyUniversallyUniqueIdentifier = string;
/**
 * A textual label that uniquely identifies a specific attribute, characteristic, or quality of the property's containing object.
 */
export declare type PropertyName = string;
/**
 * A namespace qualifying the property's name. This allows different organizations to associate distinct semantics with the same name.
 */
export declare type PropertyNamespace = string;
/**
 * A textual label that provides a sub_type or characterization of the property's name. This can be used to further distinguish or discriminate between the semantics of multiple properties of the same object with the same name and ns.
 */
export declare type PropertyClass = string;
/**
 * A textual label that uniquely identifies a specific attribute, characteristic, or quality of the annotated property's containing object.
 */
export declare type AnnotatedPropertyName = string;
/**
 * A unique identifier that can be used to reference this annotated property elsewhere in an OSCAL document. A UUID should be consistantly used for a given location across revisions of the document.
 */
export declare type AnnotatedPropertyUniversallyUniqueIdentifier = string;
/**
 * A namespace qualifying the annotated property's name. This allows different organizations to associate distinct semantics with the same name.
 */
export declare type AnnotatedPropertyNamespace = string;
/**
 * Indicates the value of the attribute, characteristic, or quality.
 */
export declare type AnnotatedPropertyValue = string;
/**
 * Additional commentary on the containing object.
 */
export declare type Remarks = string;
/**
 * A resolvable URL reference to a resource.
 */
export declare type HypertextReference = string;
/**
 * Describes the type of relationship provided by the link. This can be an indicator of the link's purpose.
 */
export declare type Relation = string;
/**
 * Specifies a media type as defined by the Internet Assigned Numbers Authority (IANA) Media Types Registry.
 */
export declare type MediaType = string;
/**
 * A textual label to associate with the link, which may be used for presentation in a tool.
 */
export declare type LinkText = string;
/**
 * Qualifies the kind of document identifier.
 */
export declare type DocumentIdentificationScheme = string;
/**
 * A unique identifier for a specific role instance. This identifier's uniqueness is document scoped and is intended to be consistent for the same role across minor revisions of the document.
 */
export declare type RoleIdentifier = string;
/**
 * A name given to the role, which may be used by a tool for display and navigation.
 */
export declare type RoleTitle = string;
/**
 * A short common name, abbreviation, or acronym for the role.
 */
export declare type RoleShortName = string;
/**
 * A summary of the role's purpose and associated responsibilities.
 */
export declare type RoleDescription = string;
/**
 * A unique identifier that can be used to reference this defined location elsewhere in an OSCAL document. A UUID should be consistantly used for a given location across revisions of the document.
 */
export declare type LocationUniversallyUniqueIdentifier = string;
/**
 * A name given to the location, which may be used by a tool for display and navigation.
 */
export declare type LocationTitle = string;
/**
 * A single line of an address.
 */
export declare type AddressLine = string;
/**
 * City, town or geographical region for the mailing address.
 */
export declare type City = string;
/**
 * State, province or analogous geographical region for mailing address
 */
export declare type State = string;
/**
 * Postal or ZIP code for mailing address
 */
export declare type PostalCode = string;
/**
 * The ISO 3166_1 alpha_2 country code for the mailing address.
 */
export declare type CountryCode = string;
/**
 * An email address as defined by RFC 5322 Section 3.4.1.
 */
export declare type EmailAddress = string;
/**
 * Indicates the type of phone number.
 */
export declare type TypeFlag = string;
/**
 * The uniform resource locator (URL) for a web site or Internet presence associated with the location.
 */
export declare type LocationURL = string;
/**
 * A unique identifier that can be used to reference this defined location elsewhere in an OSCAL document. A UUID should be consistantly used for a given party across revisions of the document.
 */
export declare type PartyUniversallyUniqueIdentifier = string;
/**
 * A category describing the kind of party the object describes.
 */
export declare type PartyType = "person" | "organization";
/**
 * The full name of the party. This is typically the legal name associated with the party.
 */
export declare type PartyName = string;
/**
 * A short common name, abbreviation, or acronym for the party.
 */
export declare type PartyShortName = string;
/**
 * Indicates the type of external identifier.
 */
export declare type ExternalIdentifierSchema = string;
/**
 * References a location defined in metadata.
 */
export declare type LocationReference = string;
/**
 * Identifies that the party object is a member of the organization associated with the provided UUID.
 */
export declare type OrganizationalAffiliation = string;
/**
 * References a party defined in metadata.
 */
export declare type PartyReference = string;
/**
 * A unique identifier for a specific parameter instance. This identifier's uniqueness is document scoped and is intended to be consistent for the same parameter across minor revisions of the document.
 */
export declare type ParameterIdentifier = string;
/**
 * A textual label that provides a characterization of the parameter.
 */
export declare type ParameterClass = string;
/**
 * Another parameter invoking this one
 */
export declare type DependsOn = string;
/**
 * A short, placeholder name for the parameter, which can be used as a subsitute for a value if no value is assigned.
 */
export declare type ParameterLabel = string;
/**
 * Describes the purpose and use of a parameter
 */
export declare type ParameterUsageDescription = string;
/**
 * A textual summary of the constraint to be applied.
 */
export declare type ConstraintDescription = string;
/**
 * A formal (executable) expression of a constraint
 */
export declare type ConstraintTest1 = string;
/**
 * Prose permits multiple paragraphs, lists, tables etc.
 */
export declare type GuidelineText = string;
/**
 * A parameter value or set of values.
 */
export declare type ParameterValue = string;
/**
 * Describes the number of selections that must occur.
 */
export declare type ParameterCardinality = string;
/**
 * A value selection among several such options
 */
export declare type Choice = string;
/**
 * A unique identifier for a specific control instance that can be used to reference the control in other OSCAL documents. This identifier's uniqueness is document scoped and is intended to be consistent for the same control across minor revisions of the document.
 */
export declare type ControlIdentifier = string;
/**
 * A textual label that provides a sub_type or characterization of the control.
 */
export declare type ControlClass = string;
/**
 * A name given to the control, which may be used by a tool for display and navigation.
 */
export declare type ControlTitle = string;
/**
 * A unique identifier for a specific part instance. This identifier's uniqueness is document scoped and is intended to be consistent for the same part across minor revisions of the document.
 */
export declare type PartIdentifier = string;
/**
 * A textual label that uniquely identifies the part's semantic type.
 */
export declare type PartName = string;
/**
 * A namespace qualifying the part's name. This allows different organizations to associate distinct semantics with the same name.
 */
export declare type PartNamespace = string;
/**
 * A textual label that provides a sub_type or characterization of the part's name. This can be used to further distinguish or discriminate between the semantics of multiple parts of the same control with the same name and ns.
 */
export declare type PartClass = string;
/**
 * A name given to the part, which may be used by a tool for display and navigation.
 */
export declare type PartTitle = string;
/**
 * Permits multiple paragraphs, lists, tables etc.
 */
export declare type PartText = string;
/**
 * A unique identifier for a specific group instance that can be used to reference the group within this and in other OSCAL documents. This identifier's uniqueness is document scoped and is intended to be consistent for the same group across minor revisions of the document.
 */
export declare type GroupIdentifier = string;
/**
 * A textual label that provides a sub_type or characterization of the group.
 */
export declare type GroupClass = string;
/**
 * A name given to the group, which may be used by a tool for display and navigation.
 */
export declare type GroupTitle = string;
/**
 * A globally unique identifier that can be used to reference this defined resource elsewhere in an OSCAL document. A UUID should be consistantly used for a given resource across revisions of the document.
 */
export declare type ResourceUniversallyUniqueIdentifier = string;
/**
 * A name given to the resource, which may be used by a tool for display and navigation.
 */
export declare type ResourceTitle = string;
/**
 * A short summary of the resource used to indicate the purpose of the resource.
 */
export declare type ResourceDescription = string;
/**
 * A line of citation text.
 */
export declare type CitationText = string;
/**
 * A resolvable URI reference to a resource.
 */
export declare type HypertextReference1 = string;
/**
 * Specifies a media type as defined by the Internet Assigned Numbers Authority (IANA) Media Types Registry.
 */
export declare type MediaType1 = string;
/**
 * Method by which a hash is derived
 */
export declare type HashAlgorithm = string;
/**
 * Name of the file before it was encoded as Base64 to be embedded in a resource. This is the name that will be assigned to the file when the file is decoded.
 */
export declare type FileName = string;
/**
 * Specifies a media type as defined by the Internet Assigned Numbers Authority (IANA) Media Types Registry.
 */
export declare type MediaType2 = string;
export interface OscalCatalogSchema {
    catalog: Catalog;
}
/**
 * A collection of controls.
 */
export interface Catalog {
    uuid: CatalogUniversallyUniqueIdentifier;
    metadata: PublicationMetadata;
    params?: Parameter[];
    controls?: Control[];
    groups?: ControlGroup[];
    back_matter?: BackMatter;
}
/**
 * Provides information about the publication and availability of the containing document.
 */
export interface PublicationMetadata {
    title: DocumentTitle;
    published?: PublicationTimestamp;
    last_modified: LastModifiedTimestamp;
    version: DocumentVersion;
    oscal_version: OSCALVersion;
    revisions?: RevisionHistoryEntry[];
    document_ids?: DocumentIdentifier[];
    props?: Property[];
    annotations?: AnnotatedProperty[];
    links?: Link[];
    roles?: Role[];
    locations?: Location[];
    parties?: PartyOrganizationOrPerson[];
    responsible_parties?: {
        [k: string]: ResponsibleParty & {
            [k: string]: unknown;
        };
    };
    remarks?: Remarks;
}
/**
 * An entry in a sequential list of revisions to the containing document in reverse chronological order (i.e., most recent previous revision first).
 */
export interface RevisionHistoryEntry {
    title?: DocumentTitle1;
    published?: PublicationTimestamp;
    last_modified?: LastModifiedTimestamp;
    version?: DocumentVersion;
    oscal_version?: OSCALVersion;
    props?: Property[];
    annotations?: AnnotatedProperty[];
    links?: Link[];
    remarks?: Remarks;
}
/**
 * An attribute, characteristic, or quality of the containing object expressed as a namespace qualified name/value pair. The value of a property is a simple scalar value, which may be expressed as a list of values in some OSCAL formats.
 */
export interface Property {
    uuid?: PropertyUniversallyUniqueIdentifier;
    name: PropertyName;
    ns?: PropertyNamespace;
    class?: PropertyClass;
    value: string;
}
/**
 * An attribute, characteristic, or quality of the containing object expressed as a namespace qualified name/value pair with optional explanatory remarks. The value of an annotated property is a simple scalar value.
 */
export interface AnnotatedProperty {
    name: AnnotatedPropertyName;
    uuid?: AnnotatedPropertyUniversallyUniqueIdentifier;
    ns?: AnnotatedPropertyNamespace;
    value: AnnotatedPropertyValue;
    remarks?: Remarks;
}
/**
 * A reference to a local or remote resource
 */
export interface Link {
    href: HypertextReference;
    rel?: Relation;
    media_type?: MediaType;
    text?: LinkText;
}
/**
 * A document identifier qualified by an identifier type.
 */
export interface DocumentIdentifier {
    scheme: DocumentIdentificationScheme;
    identifier: string;
}
/**
 * Defines a function assumed or expected to be assumed by a party in a specific situation.
 */
export interface Role {
    id: RoleIdentifier;
    title: RoleTitle;
    short_name?: RoleShortName;
    description?: RoleDescription;
    props?: Property[];
    annotations?: AnnotatedProperty[];
    links?: Link[];
    remarks?: Remarks;
}
/**
 * A location, with associated metadata that can be referenced.
 */
export interface Location {
    uuid: LocationUniversallyUniqueIdentifier;
    title?: LocationTitle;
    address: Address;
    email_addresses?: EmailAddress[];
    telephone_numbers?: TelephoneNumber[];
    urls?: LocationURL[];
    props?: Property[];
    annotations?: AnnotatedProperty[];
    links?: Link[];
    remarks?: Remarks;
}
/**
 * A postal address for the location.
 */
export interface Address {
    type?: string;
    addr_lines?: AddressLine[];
    city?: City;
    state?: State;
    postal_code?: PostalCode;
    country?: CountryCode;
}
/**
 * Contact number by telephone.
 */
export interface TelephoneNumber {
    type?: TypeFlag;
    number: string;
}
/**
 * A responsible entity which is either a person or an organization.
 */
export interface PartyOrganizationOrPerson {
    uuid: PartyUniversallyUniqueIdentifier;
    type: PartyType;
    name?: PartyName;
    short_name?: PartyShortName;
    external_ids?: PartyExternalIdentifier[];
    props?: Property[];
    annotations?: AnnotatedProperty[];
    links?: Link[];
    email_addresses?: EmailAddress[];
    telephone_numbers?: TelephoneNumber[];
    addresses?: Address[];
    location_uuids?: LocationReference[];
    member_of_organizations?: OrganizationalAffiliation[];
    remarks?: Remarks;
}
/**
 * An identifier for a person or organization using a designated scheme. e.g. an Open Researcher and Contributor ID (ORCID)
 */
export interface PartyExternalIdentifier {
    scheme: ExternalIdentifierSchema;
    id: string;
}
/**
 * A reference to a set of organizations or persons that have responsibility for performing a referenced role in the context of the containing object.
 */
export interface ResponsibleParty {
    party_uuids: PartyReference[];
    props?: Property[];
    annotations?: AnnotatedProperty[];
    links?: Link[];
    remarks?: Remarks;
}
/**
 * Parameters provide a mechanism for the dynamic assignment of value(s) in a control.
 */
export interface Parameter {
    id: ParameterIdentifier;
    class?: ParameterClass;
    depends_on?: DependsOn;
    props?: Property[];
    annotations?: AnnotatedProperty[];
    links?: Link[];
    label?: ParameterLabel;
    usage?: ParameterUsageDescription;
    constraints?: Constraint[];
    guidelines?: Guideline[];
    values?: ParameterValue[];
    select?: Selection;
}
/**
 * A formal or informal expression of a constraint or test
 */
export interface Constraint {
    description?: ConstraintDescription;
    tests?: ConstraintTest[];
}
/**
 * A test expression which is expected to be evaluated by a tool.
 */
export interface ConstraintTest {
    expression: ConstraintTest1;
    remarks?: Remarks;
}
/**
 * A prose statement that provides a recommendation for the use of a parameter.
 */
export interface Guideline {
    prose: GuidelineText;
}
/**
 * Presenting a choice among alternatives
 */
export interface Selection {
    how_many?: ParameterCardinality;
    choice?: Choice[];
}
/**
 * A structured information object representing a security or privacy control. Each security or privacy control within the Catalog is defined by a distinct control instance.
 */
export interface Control {
    id: ControlIdentifier;
    class?: ControlClass;
    title: ControlTitle;
    params?: Parameter[];
    props?: Property[];
    annotations?: AnnotatedProperty[];
    links?: Link[];
    parts?: Part[];
    controls?: Control[];
}
/**
 * A partition of a control's definition or a child of another part.
 */
export interface Part {
    id?: PartIdentifier;
    name: PartName;
    ns?: PartNamespace;
    class?: PartClass;
    title?: PartTitle;
    props?: Property[];
    annotations?: AnnotatedProperty[];
    prose?: PartText;
    parts?: Part[];
    links?: Link[];
}
/**
 * A group of controls, or of groups of controls.
 */
export interface ControlGroup {
    id?: GroupIdentifier;
    class?: GroupClass;
    title: GroupTitle;
    params?: Parameter[];
    props?: Property[];
    annotations?: AnnotatedProperty[];
    links?: Link[];
    parts?: Part[];
    groups?: ControlGroup[];
    controls?: Control[];
}
/**
 * A collection of resources, which may be included directly or by reference.
 */
export interface BackMatter {
    resources?: Resource[];
}
/**
 * A resource associated with content in the containing document. A resource may be directly included in the document base64 encoded or may point to one or more equavalent internet resources.
 */
export interface Resource {
    uuid: ResourceUniversallyUniqueIdentifier;
    title?: ResourceTitle;
    description?: ResourceDescription;
    props?: Property[];
    annotations?: AnnotatedProperty[];
    document_ids?: DocumentIdentifier[];
    citation?: Citation;
    rlinks?: ResourceLink[];
    base64?: Base64;
    remarks?: Remarks;
}
/**
 * A citation consisting of end note text and optional structured bibliographic data.
 */
export interface Citation {
    text: CitationText;
    props?: Property[];
    annotations?: AnnotatedProperty[];
    biblio?: BibliographicDefinition;
}
/**
 * A container for structured bibliographic information. The model of this information is undefined by OSCAL.
 */
export interface BibliographicDefinition {
}
/**
 * A pointer to an external resource with an optional hash for verification and change detection.
 */
export interface ResourceLink {
    href: HypertextReference1;
    media_type?: MediaType1;
    hashes?: Hash[];
}
/**
 * A representation of a cryptographic digest generated over a resource using a specified hash algorithm.
 */
export interface Hash {
    algorithm: HashAlgorithm;
    value: string;
}
/**
 * The Base64 alphabet in RFC 2045 _ aligned with XSD.
 */
export interface Base64 {
    filename?: FileName;
    media_type?: MediaType2;
    value: string;
}
