/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Uniquely identifies this assessment plan. This UUID must be changed each time the content of the plan changes.
 */
export type AssessmentPlanUniversallyUniqueIdentifier = string;
/**
 * A name given to the document, which may be used by a tool for display and navigation.
 */
export type DocumentTitle = string;
/**
 * The date and time the document was published. The date_time value must be formatted according to RFC 3339 with full time and time zone included.
 */
export type PublicationTimestamp = string;
/**
 * The date and time the document was last modified. The date_time value must be formatted according to RFC 3339 with full time and time zone included.
 */
export type LastModifiedTimestamp = string;
/**
 * A string used to distinguish the current version of the document from other previous (and future) versions.
 */
export type DocumentVersion = string;
/**
 * The OSCAL model version the document was authored against.
 */
export type OSCALVersion = string;
/**
 * A name given to the document revision, which may be used by a tool for display and navigation.
 */
export type DocumentTitle1 = string;
/**
 * A unique identifier that can be used to reference this property elsewhere in an OSCAL document. A UUID should be consistantly used for a given location across revisions of the document.
 */
export type PropertyUniversallyUniqueIdentifier = string;
/**
 * A textual label that uniquely identifies a specific attribute, characteristic, or quality of the property's containing object.
 */
export type PropertyName = string;
/**
 * A namespace qualifying the property's name. This allows different organizations to associate distinct semantics with the same name.
 */
export type PropertyNamespace = string;
/**
 * A textual label that provides a sub_type or characterization of the property's name. This can be used to further distinguish or discriminate between the semantics of multiple properties of the same object with the same name and ns.
 */
export type PropertyClass = string;
/**
 * A textual label that uniquely identifies a specific attribute, characteristic, or quality of the annotated property's containing object.
 */
export type AnnotatedPropertyName = string;
/**
 * A unique identifier that can be used to reference this annotated property elsewhere in an OSCAL document. A UUID should be consistantly used for a given location across revisions of the document.
 */
export type AnnotatedPropertyUniversallyUniqueIdentifier = string;
/**
 * A namespace qualifying the annotated property's name. This allows different organizations to associate distinct semantics with the same name.
 */
export type AnnotatedPropertyNamespace = string;
/**
 * Indicates the value of the attribute, characteristic, or quality.
 */
export type AnnotatedPropertyValue = string;
/**
 * Additional commentary on the containing object.
 */
export type Remarks = string;
/**
 * A resolvable URL reference to a resource.
 */
export type HypertextReference = string;
/**
 * Describes the type of relationship provided by the link. This can be an indicator of the link's purpose.
 */
export type Relation = string;
/**
 * Specifies a media type as defined by the Internet Assigned Numbers Authority (IANA) Media Types Registry.
 */
export type MediaType = string;
/**
 * A textual label to associate with the link, which may be used for presentation in a tool.
 */
export type LinkText = string;
/**
 * Qualifies the kind of document identifier.
 */
export type DocumentIdentificationScheme = string;
/**
 * A unique identifier for a specific role instance. This identifier's uniqueness is document scoped and is intended to be consistent for the same role across minor revisions of the document.
 */
export type RoleIdentifier = string;
/**
 * A name given to the role, which may be used by a tool for display and navigation.
 */
export type RoleTitle = string;
/**
 * A short common name, abbreviation, or acronym for the role.
 */
export type RoleShortName = string;
/**
 * A summary of the role's purpose and associated responsibilities.
 */
export type RoleDescription = string;
/**
 * A unique identifier that can be used to reference this defined location elsewhere in an OSCAL document. A UUID should be consistantly used for a given location across revisions of the document.
 */
export type LocationUniversallyUniqueIdentifier = string;
/**
 * A name given to the location, which may be used by a tool for display and navigation.
 */
export type LocationTitle = string;
/**
 * A single line of an address.
 */
export type AddressLine = string;
/**
 * City, town or geographical region for the mailing address.
 */
export type City = string;
/**
 * State, province or analogous geographical region for mailing address
 */
export type State = string;
/**
 * Postal or ZIP code for mailing address
 */
export type PostalCode = string;
/**
 * The ISO 3166_1 alpha_2 country code for the mailing address.
 */
export type CountryCode = string;
/**
 * An email address as defined by RFC 5322 Section 3.4.1.
 */
export type EmailAddress = string;
/**
 * Indicates the type of phone number.
 */
export type TypeFlag = string;
/**
 * The uniform resource locator (URL) for a web site or Internet presence associated with the location.
 */
export type LocationURL = string;
/**
 * A unique identifier that can be used to reference this defined location elsewhere in an OSCAL document. A UUID should be consistantly used for a given party across revisions of the document.
 */
export type PartyUniversallyUniqueIdentifier = string;
/**
 * A category describing the kind of party the object describes.
 */
export type PartyType = "person" | "organization";
/**
 * The full name of the party. This is typically the legal name associated with the party.
 */
export type PartyName = string;
/**
 * A short common name, abbreviation, or acronym for the party.
 */
export type PartyShortName = string;
/**
 * Indicates the type of external identifier.
 */
export type ExternalIdentifierSchema = string;
/**
 * References a location defined in metadata.
 */
export type LocationReference = string;
/**
 * Identifies that the party object is a member of the organization associated with the provided UUID.
 */
export type OrganizationalAffiliation = string;
/**
 * References a party defined in metadata.
 */
export type PartyReference = string;
/**
 * >A resolvable URL reference to the system security plan for the system being assessed.
 */
export type SystemSecurityPlanReference = string;
/**
 * A category describing the purpose of the component.
 */
export type ComponentType = string;
/**
 * A human readable name for the system component.
 */
export type ComponentTitle = string;
/**
 * A description of the component, including information about its function.
 */
export type ComponentDescription = string;
/**
 * A summary of the technological or business purpose of the component.
 */
export type Purpose = string;
/**
 * The operational status.
 */
export type State1 = "under_development" | "operational" | "disposition" | "other";
/**
 * A globally unique identifier that can be used to reference this service protocol entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.
 */
export type ServiceProtocolInformationUniversallyUniqueIdentifier = string;
/**
 * The common name of the protocol, which should be the appropriate "service name" from the IANA Service Name and Transport Protocol Port Number Registry.
 */
export type ProtocolName = string;
/**
 * A human readable name for the protocol (e.g., Transport Layer Security).
 */
export type TitleField = string;
/**
 * Indicates the starting port number in a port range
 */
export type Start = number;
/**
 * Indicates the ending port number in a port range
 */
export type End = number;
/**
 * Indicates the transport type.
 */
export type Transport = "TCP" | "UDP";
/**
 * A globally unique identifier that can be used to reference this inventory item entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.
 */
export type InventoryItemUniversallyUniqueIdentifier = string;
/**
 * A summary of the inventory item stating its purpose within the system.
 */
export type InventoryItemDescription = string;
/**
 * A reference to a component that is implemented as part of an inventory item.
 */
export type ComponentUniversallyUniqueIdentifierReference = string;
/**
 * A name given to the user, which may be used by a tool for display and navigation.
 */
export type UserTitle = string;
/**
 * A short common name, abbreviation, or acronym for the user.
 */
export type UserShortName = string;
/**
 * A summary of the user's purpose within the system.
 */
export type UserDescription = string;
/**
 * A reference to the roles served by the user.
 */
export type RoleIdentifierReference = string;
/**
 * A human readable name for the privilege.
 */
export type TitleField1 = string;
/**
 * A summary of the privilege's purpose within the system.
 */
export type PrivilegeDescription = string;
/**
 * Describes a function performed for a given authorized privilege by this user class.
 */
export type FunctionsPerformed = string;
/**
 * A reference to a control identifier.
 */
export type ControlIdentifierReference = string;
/**
 * A human_readable description of this control objective.
 */
export type ObjectiveDescription = string;
/**
 * A unique identifier for a specific part instance. This identifier's uniqueness is document scoped and is intended to be consistent for the same part across minor revisions of the document.
 */
export type PartIdentifier = string;
/**
 * A textual label that uniquely identifies the part's semantic type.
 */
export type PartName = string;
/**
 * A namespace qualifying the part's name. This allows different organizations to associate distinct semantics with the same name.
 */
export type PartNamespace = string;
/**
 * A textual label that provides a sub_type or characterization of the part's name. This can be used to further distinguish or discriminate between the semantics of multiple parts of the same control with the same name and ns.
 */
export type PartClass = string;
/**
 * A name given to the part, which may be used by a tool for display and navigation.
 */
export type PartTitle = string;
/**
 * Permits multiple paragraphs, lists, tables etc.
 */
export type PartText = string;
/**
 * Uniquely identifies this assessment activity. This UUID may be referenced elsewhere in an OSCAL document when refering to this information. A UUID should be consistantly used for a given included activity across revisions of the document.
 */
export type AssessmentActivityUniversallyUniqueIdentifier = string;
/**
 * The title for this included activity.
 */
export type IncludedActivityTitle = string;
/**
 * A human_readable description of this included activity.
 */
export type IncludedActivityDescription = string;
/**
 * Uniquely identifies this defined action. This UUID may be referenced elsewhere in an OSCAL document when refering to this information. A UUID should be consistantly used for a given test step across revisions of the document.
 */
export type ActionUniversallyUniqueIdentifier = string;
/**
 * The title for this action.
 */
export type ActionTitle = string;
/**
 * A human_readable description of this action.
 */
export type ActionDescription = string;
/**
 * A human_readable description of control objectives.
 */
export type ControlObjectiveDescription = string;
/**
 * A human_readable description of in_scope controls specified for assessment.
 */
export type AssessedControlsDescription = string;
/**
 * A key word to indicate all.
 */
export type All = string;
/**
 * A reference to a control identifier.
 */
export type ControlIdentifierReference1 = string;
/**
 * Used to constrain the selection to only specificly identified statements.
 */
export type IncludeSpecificStatements = string;
/**
 * A human_readable description of this collection of control objectives.
 */
export type ControlOjectivesDescription = string;
/**
 * A key word to indicate all.
 */
export type All1 = string;
/**
 * A unique identifier for a specific part instance. This identifier's uniqueness is document scoped and is intended to be consistent for the same part across minor revisions of the document.
 */
export type PartIdentifier1 = string;
/**
 * A textual label that uniquely identifies the part's semantic type.
 */
export type PartName1 = string;
/**
 * A namespace qualifying the part's name. This allows different organizations to associate distinct semantics with the same name.
 */
export type PartNamespace1 = string;
/**
 * A textual label that provides a sub_type or characterization of the part's name. This can be used to further distinguish or discriminate between the semantics of multiple parts of the same control with the same name and ns.
 */
export type PartClass1 = string;
/**
 * A name given to the part, which may be used by a tool for display and navigation.
 */
export type PartTitle1 = string;
/**
 * Permits multiple paragraphs, lists, tables etc.
 */
export type PartText1 = string;
/**
 * Indicates the type of assessment subject, such as a component, inventory, item, location, or party represented by this selection statement.
 */
export type SubjectType = string;
/**
 * A human_readable description of the collection of subjects being included in this assessment.
 */
export type IncludeSubjectsDescription = string;
/**
 * A key word to indicate all.
 */
export type All2 = string;
/**
 * A pointer to a component, inventory_item, location, party, user, or resource using it's UUID.
 */
export type UUIDReference = string;
/**
 * Uniquely identifies this assessment Platform.
 */
export type AssessmentPlatformUniversallyUniqueIdentifier = string;
/**
 * The title or name for the assessment platform.
 */
export type AssessmentPlatformTitle = string;
/**
 * A reference to a component that is implemented as part of an inventory item.
 */
export type ComponentUniversallyUniqueIdentifierReference1 = string;
/**
 * Uniquely identifies an assessment event. This UUID may be referenced elsewhere in an OSCAL document when refering to this information. A UUID should be consistantly used for this schedule across revisions of the document.
 */
export type EventUniversallyUniqueIdentifier = string;
/**
 * The title for this event.
 */
export type EventTitle = string;
/**
 * A human_readable description of this event.
 */
export type EventDescription = string;
/**
 * The event must occur on the specified date.
 */
export type OnDateCondition1 = string;
/**
 * The event must occur on or after the specified date.
 */
export type StartDateCondition = string;
/**
 * The event must occur on or before the specified date.
 */
export type EndDateCondition = string;
/**
 * The event must occur after the specified period has elapsed.
 */
export type Period = number;
/**
 * The unit of time for the period.
 */
export type TimeUnit = "seconds" | "minutes" | "hours" | "days" | "months" | "years";
/**
 * Uniquely identifies an activity to be performed as part of the action. This UUID may be referenced elsewhere in an OSCAL document when refering to this information. A UUID should be consistantly used for this schedule across revisions of the document.
 */
export type AssociatedActivityUniversallyUniqueIdentifier = string;
/**
 * References an activity defined in the list of activities.
 */
export type ActivityUniversallyUniqueIdentifierReference = string;
/**
 * A human_readable description of intent of this assessment subject placeholder.
 */
export type AssessmentSubjectPlaceholderDescription = string;
/**
 * Uniquely identifies an assessment activity to be performed as part of the event. This UUID may be referenced elsewhere in an OSCAL document when refering to this information. A UUID should be consistantly used for this schedule across revisions of the document.
 */
export type ActivityInstanceUniversallyUniqueIdentifier = string;
/**
 * Uniquely identifies this assessment task.
 */
export type TaskUniversallyUniqueIdentifier = string;
/**
 * The title for this task.
 */
export type TaskTitle = string;
/**
 * A human_readable description of this task.
 */
export type TaskDescription = string;
/**
 * The task must occur on or after the specified date.
 */
export type TaskStartDate = string;
/**
 * The task must occur on or before the specified date.
 */
export type TaskEndDate = string;
/**
 * References a unique action by UUID.
 */
export type ActionUniversallyUniqueIdentifierReference = string;
/**
 * A globally unique identifier that can be used to reference this defined resource elsewhere in an OSCAL document. A UUID should be consistantly used for a given resource across revisions of the document.
 */
export type ResourceUniversallyUniqueIdentifier = string;
/**
 * A name given to the resource, which may be used by a tool for display and navigation.
 */
export type ResourceTitle = string;
/**
 * A short summary of the resource used to indicate the purpose of the resource.
 */
export type ResourceDescription = string;
/**
 * A line of citation text.
 */
export type CitationText = string;
/**
 * A resolvable URI reference to a resource.
 */
export type HypertextReference1 = string;
/**
 * Specifies a media type as defined by the Internet Assigned Numbers Authority (IANA) Media Types Registry.
 */
export type MediaType1 = string;
/**
 * Method by which a hash is derived
 */
export type HashAlgorithm = string;
/**
 * Name of the file before it was encoded as Base64 to be embedded in a resource. This is the name that will be assigned to the file when the file is decoded.
 */
export type FileName = string;
/**
 * Specifies a media type as defined by the Internet Assigned Numbers Authority (IANA) Media Types Registry.
 */
export type MediaType2 = string;

export interface OscalAssessmentPlanSchema {
  assessment_plan: SecurityAssessmentPlanSAP;
}
/**
 * An assessment plan, such as those provided by a FedRAMP assessor.
 */
export interface SecurityAssessmentPlanSAP {
  uuid: AssessmentPlanUniversallyUniqueIdentifier;
  metadata: PublicationMetadata;
  import_ssp: ImportSystemSecurityPlan;
  local_definitions?: LocalDefinitions;
  terms_and_conditions?: AssessmentPlanTermsAndConditions;
  reviewed_controls: ReviewedControlsAndControlObjectives;
  assessment_subjects?: SubjectOfAssessment[];
  assessment_assets?: AssessmentAssets;
  assessment_actions?: Action1[];
  tasks?: Task[];
  back_matter?: BackMatter;
}
/**
 * Provides information about the publication and availability of the containing document.
 */
export interface PublicationMetadata {
  title: DocumentTitle;
  published?: PublicationTimestamp;
  last_modified: LastModifiedTimestamp;
  version: DocumentVersion;
  oscal_version: OSCALVersion;
  revisions?: RevisionHistoryEntry[];
  document_ids?: DocumentIdentifier[];
  props?: Property[];
  annotations?: AnnotatedProperty[];
  links?: Link[];
  roles?: Role[];
  locations?: Location[];
  parties?: PartyOrganizationOrPerson[];
  responsible_parties?: {
    [k: string]: ResponsibleParty & {
      [k: string]: unknown;
    };
  };
  remarks?: Remarks;
}
/**
 * An entry in a sequential list of revisions to the containing document in reverse chronological order (i.e., most recent previous revision first).
 */
export interface RevisionHistoryEntry {
  title?: DocumentTitle1;
  published?: PublicationTimestamp;
  last_modified?: LastModifiedTimestamp;
  version?: DocumentVersion;
  oscal_version?: OSCALVersion;
  props?: Property[];
  annotations?: AnnotatedProperty[];
  links?: Link[];
  remarks?: Remarks;
}
/**
 * An attribute, characteristic, or quality of the containing object expressed as a namespace qualified name/value pair. The value of a property is a simple scalar value, which may be expressed as a list of values in some OSCAL formats.
 */
export interface Property {
  uuid?: PropertyUniversallyUniqueIdentifier;
  name: PropertyName;
  ns?: PropertyNamespace;
  class?: PropertyClass;
  value: string;
}
/**
 * An attribute, characteristic, or quality of the containing object expressed as a namespace qualified name/value pair with optional explanatory remarks. The value of an annotated property is a simple scalar value.
 */
export interface AnnotatedProperty {
  name: AnnotatedPropertyName;
  uuid?: AnnotatedPropertyUniversallyUniqueIdentifier;
  ns?: AnnotatedPropertyNamespace;
  value: AnnotatedPropertyValue;
  remarks?: Remarks;
}
/**
 * A reference to a local or remote resource
 */
export interface Link {
  href: HypertextReference;
  rel?: Relation;
  media_type?: MediaType;
  text?: LinkText;
}
/**
 * A document identifier qualified by an identifier type.
 */
export interface DocumentIdentifier {
  scheme: DocumentIdentificationScheme;
  identifier: string;
}
/**
 * Defines a function assumed or expected to be assumed by a party in a specific situation.
 */
export interface Role {
  id: RoleIdentifier;
  title: RoleTitle;
  short_name?: RoleShortName;
  description?: RoleDescription;
  props?: Property[];
  annotations?: AnnotatedProperty[];
  links?: Link[];
  remarks?: Remarks;
}
/**
 * A location, with associated metadata that can be referenced.
 */
export interface Location {
  uuid: LocationUniversallyUniqueIdentifier;
  title?: LocationTitle;
  address: Address;
  email_addresses?: EmailAddress[];
  telephone_numbers?: TelephoneNumber[];
  urls?: LocationURL[];
  props?: Property[];
  annotations?: AnnotatedProperty[];
  links?: Link[];
  remarks?: Remarks;
}
/**
 * A postal address for the location.
 */
export interface Address {
  type?: string;
  addr_lines?: AddressLine[];
  city?: City;
  state?: State;
  postal_code?: PostalCode;
  country?: CountryCode;
}
/**
 * Contact number by telephone.
 */
export interface TelephoneNumber {
  type?: TypeFlag;
  number: string;
}
/**
 * A responsible entity which is either a person or an organization.
 */
export interface PartyOrganizationOrPerson {
  uuid: PartyUniversallyUniqueIdentifier;
  type: PartyType;
  name?: PartyName;
  short_name?: PartyShortName;
  external_ids?: PartyExternalIdentifier[];
  props?: Property[];
  annotations?: AnnotatedProperty[];
  links?: Link[];
  email_addresses?: EmailAddress[];
  telephone_numbers?: TelephoneNumber[];
  addresses?: Address[];
  location_uuids?: LocationReference[];
  member_of_organizations?: OrganizationalAffiliation[];
  remarks?: Remarks;
}
/**
 * An identifier for a person or organization using a designated scheme. e.g. an Open Researcher and Contributor ID (ORCID)
 */
export interface PartyExternalIdentifier {
  scheme: ExternalIdentifierSchema;
  id: string;
}
/**
 * A reference to a set of organizations or persons that have responsibility for performing a referenced role in the context of the containing object.
 */
export interface ResponsibleParty {
  party_uuids: PartyReference[];
  props?: Property[];
  annotations?: AnnotatedProperty[];
  links?: Link[];
  remarks?: Remarks;
}
/**
 * Used by the assessment plan and POA&M to import information about the system.
 */
export interface ImportSystemSecurityPlan {
  href: SystemSecurityPlanReference;
  remarks?: Remarks;
}
/**
 * Used to define data objects that are used in the assessment plan, that do not appear in the referenced SSP.
 */
export interface LocalDefinitions {
  components?: {
    [k: string]: Component & {
      [k: string]: unknown;
    };
  };
  inventory_items?: InventoryItem[];
  users?: {
    [k: string]: SystemUser & {
      [k: string]: unknown;
    };
  };
  add_objectives_and_methods?: Assessment_SpecificControlObjective[];
  activities?: Activity[];
  remarks?: Remarks;
}
/**
 * A defined component that can be part of an implemented system.
 */
export interface Component {
  type: ComponentType;
  title: ComponentTitle;
  description: ComponentDescription;
  purpose?: Purpose;
  props?: Property[];
  annotations?: AnnotatedProperty[];
  links?: Link[];
  status: Status;
  responsible_roles?: {
    [k: string]: ResponsibleRole & {
      [k: string]: unknown;
    };
  };
  protocols?: ServiceProtocolInformation[];
  remarks?: Remarks;
}
/**
 * Describes the operational status of the system component.
 */
export interface Status {
  state: State1;
  remarks?: Remarks;
}
/**
 * A reference to one or more roles with responsibility for performing a function relative to the containing object.
 */
export interface ResponsibleRole {
  props?: Property[];
  annotations?: AnnotatedProperty[];
  links?: Link[];
  party_uuids?: PartyReference[];
  remarks?: Remarks;
}
/**
 * Information about the protocol used to provide a service.
 */
export interface ServiceProtocolInformation {
  uuid?: ServiceProtocolInformationUniversallyUniqueIdentifier;
  name: ProtocolName;
  title?: TitleField;
  port_ranges?: PortRange[];
}
/**
 * Where applicable this is the IPv4 port range on which the service operates.
 */
export interface PortRange {
  start?: Start;
  end?: End;
  transport?: Transport;
}
/**
 * A single managed inventory item within the system.
 */
export interface InventoryItem {
  uuid: InventoryItemUniversallyUniqueIdentifier;
  description: InventoryItemDescription;
  props?: Property[];
  annotations?: AnnotatedProperty[];
  links?: Link[];
  responsible_parties?: {
    [k: string]: ResponsibleParty & {
      [k: string]: unknown;
    };
  };
  implemented_components?: ImplementedComponent[];
  remarks?: Remarks;
}
/**
 * The set of components that are implemented in a given system inventory item.
 */
export interface ImplementedComponent {
  component_uuid: ComponentUniversallyUniqueIdentifierReference;
  props?: Property[];
  annotations?: AnnotatedProperty[];
  links?: Link[];
  responsible_parties?: {
    [k: string]: ResponsibleParty & {
      [k: string]: unknown;
    };
  };
  remarks?: Remarks;
}
/**
 * A type of user that interacts with the system based on an associated role.
 */
export interface SystemUser {
  title?: UserTitle;
  short_name?: UserShortName;
  description?: UserDescription;
  props?: Property[];
  annotations?: AnnotatedProperty[];
  links?: Link[];
  role_ids?: RoleIdentifierReference[];
  authorized_privileges?: Privilege[];
  remarks?: Remarks;
}
/**
 * Identifies a specific system privilege held by the user, along with an associated description and/or rationale for the privilege.
 */
export interface Privilege {
  title: TitleField1;
  description?: PrivilegeDescription;
  functions_performed: FunctionsPerformed[];
}
/**
 * A local definition of a control objective for this assessment. Uses catalog syntax for control objective and assessment actions.
 */
export interface Assessment_SpecificControlObjective {
  control_id: ControlIdentifierReference;
  description?: ObjectiveDescription;
  props?: Property[];
  annotations?: AnnotatedProperty[];
  links?: Link[];
  parts: Part[];
  remarks?: Remarks;
}
/**
 * A partition of a control's definition or a child of another part.
 */
export interface Part {
  id?: PartIdentifier;
  name: PartName;
  ns?: PartNamespace;
  class?: PartClass;
  title?: PartTitle;
  props?: Property[];
  annotations?: AnnotatedProperty[];
  prose?: PartText;
  parts?: Part[];
  links?: Link[];
}
/**
 * Identifies an assessment or related process that can be performed. In the assessment plan, this is an intended activity which may be associated with an assessment task. In the assessment results, this an activity that was actually performed as part of an assessement.
 */
export interface Activity {
  uuid: AssessmentActivityUniversallyUniqueIdentifier;
  title?: IncludedActivityTitle;
  description: IncludedActivityDescription;
  props?: Property[];
  annotations?: AnnotatedProperty[];
  links?: Link[];
  actions?: Action[];
  related_controls?: ReviewedControlsAndControlObjectives;
  responsible_roles?: {
    [k: string]: ResponsibleRole & {
      [k: string]: unknown;
    };
  };
  remarks?: Remarks;
}
/**
 * Identifies an individual actions, such as test steps or examination procedures.
 */
export interface Action {
  uuid: ActionUniversallyUniqueIdentifier;
  title?: ActionTitle;
  description: ActionDescription;
  props?: Property[];
  annotations?: AnnotatedProperty[];
  links?: Link[];
  reviewed_controls?: ReviewedControlsAndControlObjectives;
  responsible_roles?: {
    [k: string]: ResponsibleRole & {
      [k: string]: unknown;
    };
  };
  remarks?: Remarks;
}
/**
 * Identifies the controls being assessed and their control objectives.
 */
export interface ReviewedControlsAndControlObjectives {
  description?: ControlObjectiveDescription;
  props?: Property[];
  annotations?: AnnotatedProperty[];
  links?: Link[];
  control_selections: AssessedControls[];
  control_objective_selections?: ReferenedControlObjectives[];
  remarks?: Remarks;
}
/**
 * Identifies the controls being assessed. In the assessment plan, these are the planned controls. In the assessment results, these are the actual controls, and reflects any changes from the plan.
 */
export interface AssessedControls {
  description?: AssessedControlsDescription;
  props?: Property[];
  annotations?: AnnotatedProperty[];
  links?: Link[];
  include_all?: All;
  include_controls?: SelectControl[];
  exclude_controls?: SelectControl[];
  remarks?: Remarks;
}
/**
 * Used to select a control for inclusion/exclusion based on the control's identifier. A set of statement identifiers can be optionally used to target the inclusion/exclusion to only specific control statements providing more granularity over the specific statements that are within the asessment scope.
 */
export interface SelectControl {
  control_id: ControlIdentifierReference1;
  statement_ids?: IncludeSpecificStatements[];
}
/**
 * Identifies the control objectives of the assessment. In the assessment plan, these are the planned objectives. In the assessment results, these are the assessed objectives, and reflects any changes from the plan.
 */
export interface ReferenedControlObjectives {
  description?: ControlOjectivesDescription;
  props?: Property[];
  annotations?: AnnotatedProperty[];
  links?: Link[];
  include_all?: All1;
  include_objectives?: SelectObjective[];
  exclude_objectives?: SelectObjective[];
  remarks?: Remarks;
}
/**
 * Used to select a control objective for inclusion/exclusion based on the control objective's identifier.
 */
export interface SelectObjective {
  ""?: string;
}
/**
 * Used to define various terms and conditions under which an assessment, described by the plan, can be performed. Each child part defines a different type of term or condition.
 */
export interface AssessmentPlanTermsAndConditions {
  parts?: AssessmentPart | AssessmentPart[];
}
/**
 * A partition of an assessment plan or results or a child of another part.
 */
export interface AssessmentPart {
  uuid?: PartIdentifier1;
  name: PartName1;
  ns?: PartNamespace1;
  class?: PartClass1;
  title?: PartTitle1;
  props?: Property[];
  annotations?: AnnotatedProperty[];
  prose: PartText1;
  parts?: AssessmentPart[];
  links?: Link[];
}
/**
 * Identifies system elements being assessed, such as components, inventory items, and locations. In the assessment plan, this identifies a planned assessment subject. In the assessment results this is an actual assessment subject, and reflects any changes from the plan. exactly what will be the focus of this assessment. Any subjects not identified in this way are out_of_scope.
 */
export interface SubjectOfAssessment {
  type: SubjectType;
  description?: IncludeSubjectsDescription;
  props?: Property[];
  annotations?: AnnotatedProperty[];
  links?: Link[];
  include_all?: All2;
  include_subjects?: SelectAssessmentSubject[];
  exclude_subjects?: SelectAssessmentSubject[];
  remarks?: Remarks;
}
/**
 * Identifies a set of assessment subjects to include/exclude by UUID.
 */
export interface SelectAssessmentSubject {
  uuid_ref: UUIDReference;
  props?: Property[];
  annotations?: AnnotatedProperty[];
  links?: Link[];
  remarks?: Remarks;
}
/**
 * Identifies the assets used to perform this assessment, such as the assessment team, scanning tools, and assumptions.
 */
export interface AssessmentAssets {
  components?: {
    [k: string]: Component & {
      [k: string]: unknown;
    };
  };
  assessment_platforms: AssessmentPlatform[];
}
/**
 * Used to represent the toolset used to perform aspects of the assessment.
 */
export interface AssessmentPlatform {
  uuid: AssessmentPlatformUniversallyUniqueIdentifier;
  title?: AssessmentPlatformTitle;
  props?: Property[];
  annotations?: AnnotatedProperty[];
  links?: Link[];
  uses_components?: UsesComponent[];
  remarks?: Remarks;
}
/**
 * The set of components that are used by the assessment platform.
 */
export interface UsesComponent {
  component_uuid: ComponentUniversallyUniqueIdentifierReference1;
  props?: Property[];
  annotations?: AnnotatedProperty[];
  links?: Link[];
  responsible_parties?: {
    [k: string]: ResponsibleParty & {
      [k: string]: unknown;
    };
  };
  remarks?: Remarks;
}
/**
 * Identifies an assessment_related event that must occur as part of executing an assessment plan, the result of which may be recorded within the assessment log in assessment results.
 */
export interface Action1 {
  uuid: EventUniversallyUniqueIdentifier;
  title?: EventTitle;
  description: EventDescription;
  props?: Property[];
  annotations?: AnnotatedProperty[];
  links?: Link[];
  timing?: EventTiming;
  assessment_subjects?: SubjectOfAssessment[];
  responsible_roles?: {
    [k: string]: ResponsibleRole & {
      [k: string]: unknown;
    };
  };
  associated_activities?: AssociatedActivity[];
  remarks?: Remarks;
}
/**
 * The timing under which the event is intended to occur.
 */
export interface EventTiming {
  on_date?: OnDateCondition;
  within_date_range?: OnDateRangeCondition;
  at_frequency?: FrequencyCondition;
}
/**
 * The event is intended to occur on the specified date.
 */
export interface OnDateCondition {
  date: OnDateCondition1;
}
/**
 * The event is intended to occur within the specified date range.
 */
export interface OnDateRangeCondition {
  start: StartDateCondition;
  end: EndDateCondition;
}
/**
 * The event is intended to occur at the specified frequency.
 */
export interface FrequencyCondition {
  period: Period;
  unit: TimeUnit;
}
/**
 * Identifies an individual activity to be performed as part of an action.
 */
export interface AssociatedActivity {
  uuid: AssociatedActivityUniversallyUniqueIdentifier;
  activity_uuid: ActivityUniversallyUniqueIdentifierReference;
  props?: Property[];
  annotations?: AnnotatedProperty[];
  links?: Link[];
  responsible_roles?: {
    [k: string]: ResponsibleRole & {
      [k: string]: unknown;
    };
  };
  assessment_subjects?: SubjectOfAssessment[];
  assessment_subject_placeholder?: AssessmentSubjectPlaceholder;
  remarks?: Remarks;
}
/**
 * Used when the assessment subjects will be determined as part of one or more other assessment activities. These assessment subjects will be recorded in the assessment results.
 */
export interface AssessmentSubjectPlaceholder {
  description?: AssessmentSubjectPlaceholderDescription;
  sources: AssessmentSubjectSource[];
  props?: Property[];
  annotations?: AnnotatedProperty[];
  links?: Link[];
  remarks?: Remarks;
}
/**
 * Assessment subjects will be identified while conducting the referenced activity_instance.
 */
export interface AssessmentSubjectSource {
  activity_instance_uuid: ActivityInstanceUniversallyUniqueIdentifier;
}
/**
 * Represents a scheduled event or milestone, which may be associated with a series of assessment actions.
 */
export interface Task {
  uuid: TaskUniversallyUniqueIdentifier;
  title: TaskTitle;
  description?: TaskDescription;
  props?: Property[];
  annotations?: AnnotatedProperty[];
  links?: Link[];
  start: TaskStartDate;
  end: TaskEndDate;
  related_actions?: ActionReference[];
  responsible_roles?: {
    [k: string]: ResponsibleRole & {
      [k: string]: unknown;
    };
  };
  remarks?: Remarks;
}
/**
 * Identifies an individual action for which the containing object is a consequence of.
 */
export interface ActionReference {
  action_uuid: ActionUniversallyUniqueIdentifierReference;
  props?: Property[];
  annotations?: AnnotatedProperty[];
  links?: Link[];
  responsible_parties?: {
    [k: string]: ResponsibleParty & {
      [k: string]: unknown;
    };
  };
  remarks?: Remarks;
}
/**
 * A collection of resources, which may be included directly or by reference.
 */
export interface BackMatter {
  resources?: Resource[];
}
/**
 * A resource associated with content in the containing document. A resource may be directly included in the document base64 encoded or may point to one or more equavalent internet resources.
 */
export interface Resource {
  uuid: ResourceUniversallyUniqueIdentifier;
  title?: ResourceTitle;
  description?: ResourceDescription;
  props?: Property[];
  annotations?: AnnotatedProperty[];
  document_ids?: DocumentIdentifier[];
  citation?: Citation;
  rlinks?: ResourceLink[];
  base64?: Base64;
  remarks?: Remarks;
}
/**
 * A citation consisting of end note text and optional structured bibliographic data.
 */
export interface Citation {
  text: CitationText;
  props?: Property[];
  annotations?: AnnotatedProperty[];
  biblio?: BibliographicDefinition;
}
/**
 * A container for structured bibliographic information. The model of this information is undefined by OSCAL.
 */
export interface BibliographicDefinition {}
/**
 * A pointer to an external resource with an optional hash for verification and change detection.
 */
export interface ResourceLink {
  href: HypertextReference1;
  media_type?: MediaType1;
  hashes?: Hash[];
}
/**
 * A representation of a cryptographic digest generated over a resource using a specified hash algorithm.
 */
export interface Hash {
  algorithm: HashAlgorithm;
  value: string;
}
/**
 * The Base64 alphabet in RFC 2045 _ aligned with XSD.
 */
export interface Base64 {
  filename?: FileName;
  media_type?: MediaType2;
  value: string;
}
