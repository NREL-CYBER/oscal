"use strict"; module.exports = validate20; module.exports.default = validate20; const schema22 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "http://csrc.nist.gov/ns/oscal/1.0.0/oscal_complete_schema.json", "$comment": "OSCAL Unified Model of Models: JSON Schema", "type": "object", "definitions": { "catalog": { "title": "Catalog", "description": "A collection of controls.", "$id": "#/definitions/catalog", "type": "object", "properties": { "uuid": { "title": "Catalog Universally Unique Identifier", "description": "A globally unique identifier for this catalog instance. This UUID should be changed when this document is revised.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "metadata": { "$ref": "#/definitions/metadata" }, "params": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/parameter" } }, "controls": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/control" } }, "groups": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/group" } }, "back_matter": { "$ref": "#/definitions/back_matter" } }, "required": ["uuid", "metadata"], "additionalProperties": false }, "group": { "title": "Control Group", "description": "A group of controls, or of groups of controls.", "$id": "#/definitions/group", "type": "object", "properties": { "id": { "title": "Group Identifier", "description": "A unique identifier for a specific group instance that can be used to reference the group within this and in other OSCAL documents. This identifier's uniqueness is document scoped and is intended to be consistent for the same group across minor revisions of the document.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "class": { "title": "Group Class", "description": "A textual label that provides a sub_type or characterization of the group.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "title": { "title": "Group Title", "description": "A name given to the group, which may be used by a tool for display and navigation.", "type": "string" }, "params": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/parameter" } }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "parts": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/part" } }, "groups": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/group" } }, "controls": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/control" } } }, "required": ["title"], "additionalProperties": false }, "control": { "title": "Control", "description": "A structured information object representing a security or privacy control. Each security or privacy control within the Catalog is defined by a distinct control instance.", "$id": "#/definitions/control", "type": "object", "properties": { "id": { "title": "Control Identifier", "description": "A unique identifier for a specific control instance that can be used to reference the control in other OSCAL documents. This identifier's uniqueness is document scoped and is intended to be consistent for the same control across minor revisions of the document.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "class": { "title": "Control Class", "description": "A textual label that provides a sub_type or characterization of the control.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "title": { "title": "Control Title", "description": "A name given to the control, which may be used by a tool for display and navigation.", "type": "string" }, "params": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/parameter" } }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "parts": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/part" } }, "controls": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/control" } } }, "required": ["id", "title"], "additionalProperties": false }, "part": { "title": "Part", "description": "A partition of a control's definition or a child of another part.", "$id": "#/definitions/part", "type": "object", "properties": { "id": { "title": "Part Identifier", "description": "A unique identifier for a specific part instance. This identifier's uniqueness is document scoped and is intended to be consistent for the same part across minor revisions of the document.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "name": { "title": "Part Name", "description": "A textual label that uniquely identifies the part's semantic type.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "ns": { "title": "Part Namespace", "description": "A namespace qualifying the part's name. This allows different organizations to associate distinct semantics with the same name.", "type": "string", "format": "uri" }, "class": { "title": "Part Class", "description": "A textual label that provides a sub_type or characterization of the part's name. This can be used to further distinguish or discriminate between the semantics of multiple parts of the same control with the same name and ns.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "title": { "title": "Part Title", "description": "A name given to the part, which may be used by a tool for display and navigation.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "prose": { "title": "Part Text", "description": "Permits multiple paragraphs, lists, tables etc.", "type": "string" }, "parts": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/part" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } } }, "required": ["name"], "additionalProperties": false }, "parameter": { "title": "Parameter", "description": "Parameters provide a mechanism for the dynamic assignment of value(s) in a control.", "$id": "#/definitions/parameter", "type": "object", "properties": { "id": { "title": "Parameter Identifier", "description": "A unique identifier for a specific parameter instance. This identifier's uniqueness is document scoped and is intended to be consistent for the same parameter across minor revisions of the document.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "class": { "title": "Parameter Class", "description": "A textual label that provides a characterization of the parameter.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "depends_on": { "title": "Depends on", "description": "Another parameter invoking this one", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "label": { "title": "Parameter Label", "description": "A short, placeholder name for the parameter, which can be used as a substitute for a value if no value is assigned.", "type": "string" }, "usage": { "title": "Parameter Usage Description", "description": "Describes the purpose and use of a parameter", "type": "string" }, "constraints": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/parameter_constraint" } }, "guidelines": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/parameter_guideline" } }, "values": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/parameter_value" } }, "select": { "$ref": "#/definitions/parameter_selection" }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["id"], "additionalProperties": false }, "parameter_constraint": { "title": "Constraint", "description": "A formal or informal expression of a constraint or test", "$id": "#/definitions/parameter_constraint", "type": "object", "properties": { "description": { "title": "Constraint Description", "description": "A textual summary of the constraint to be applied.", "type": "string" }, "tests": { "type": "array", "minItems": 1, "items": { "title": "Constraint Test", "description": "A test expression which is expected to be evaluated by a tool.", "type": "object", "properties": { "expression": { "title": "Constraint test", "description": "A formal (executable) expression of a constraint", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["expression"], "additionalProperties": false } } }, "additionalProperties": false }, "parameter_guideline": { "title": "Guideline", "description": "A prose statement that provides a recommendation for the use of a parameter.", "$id": "#/definitions/parameter_guideline", "type": "object", "properties": { "prose": { "title": "Guideline Text", "description": "Prose permits multiple paragraphs, lists, tables etc.", "type": "string" } }, "required": ["prose"], "additionalProperties": false }, "parameter_value": { "title": "Parameter Value", "description": "A parameter value or set of values.", "$id": "#/definitions/parameter_value", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "parameter_selection": { "title": "Selection", "description": "Presenting a choice among alternatives", "$id": "#/definitions/parameter_selection", "type": "object", "properties": { "how_many": { "title": "Parameter Cardinality", "description": "Describes the number of selections that must occur. Without this setting, only one value should be assumed to be permitted.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$", "enum": ["one", "one_or_more"] }, "choice": { "type": "array", "minItems": 1, "items": { "title": "Choice", "description": "A value selection among several such options", "type": "string" } } }, "additionalProperties": false }, "metadata": { "title": "Publication metadata", "description": "Provides information about the publication and availability of the containing document.", "$id": "#/definitions/metadata", "type": "object", "properties": { "title": { "title": "Document Title", "description": "A name given to the document, which may be used by a tool for display and navigation.", "type": "string" }, "published": { "$ref": "#/definitions/published" }, "last_modified": { "$ref": "#/definitions/last_modified" }, "version": { "$ref": "#/definitions/version" }, "oscal_version": { "$ref": "#/definitions/oscal_version" }, "revisions": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/revision" } }, "document_ids": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/document_id" } }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "roles": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/role" } }, "locations": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/location" } }, "parties": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/party" } }, "responsible_parties": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_party" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["title", "last_modified", "version", "oscal_version"], "additionalProperties": false }, "revision": { "title": "Revision History Entry", "description": "An entry in a sequential list of revisions to the containing document in reverse chronological order (i.e., most recent previous revision first).", "$id": "#/definitions/revision", "type": "object", "properties": { "title": { "title": "Document Title", "description": "A name given to the document revision, which may be used by a tool for display and navigation.", "type": "string" }, "published": { "$ref": "#/definitions/published" }, "last_modified": { "$ref": "#/definitions/last_modified" }, "version": { "$ref": "#/definitions/version" }, "oscal_version": { "$ref": "#/definitions/oscal_version" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "additionalProperties": false }, "location": { "title": "Location", "description": "A location, with associated metadata that can be referenced.", "$id": "#/definitions/location", "type": "object", "properties": { "uuid": { "title": "Location Universally Unique Identifier", "description": "A unique identifier that can be used to reference this defined location elsewhere in an OSCAL document. A UUID should be consistently used for a given location across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "title": { "title": "Location Title", "description": "A name given to the location, which may be used by a tool for display and navigation.", "type": "string" }, "address": { "$ref": "#/definitions/address" }, "email_addresses": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/email_address" } }, "telephone_numbers": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/telephone_number" } }, "urls": { "type": "array", "minItems": 1, "items": { "title": "Location URL", "description": "The uniform resource locator (URL) for a web site or Internet presence associated with the location.", "type": "string", "format": "uri" } }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "address"], "additionalProperties": false }, "location_uuid": { "title": "Location Reference", "description": "References a location defined in metadata.", "$id": "#/definitions/location_uuid", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "party": { "title": "Party (organization or person)", "description": "A responsible entity which is either a person or an organization.", "$id": "#/definitions/party", "type": "object", "properties": { "uuid": { "title": "Party Universally Unique Identifier", "description": "A unique identifier that can be used to reference this defined location elsewhere in an OSCAL document. A UUID should be consistently used for a given party across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "type": { "title": "Party Type", "description": "A category describing the kind of party the object describes.", "type": "string", "pattern": "^\\S(.*\\S)?$", "enum": ["person", "organization"] }, "name": { "title": "Party Name", "description": "The full name of the party. This is typically the legal name associated with the party.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "short_name": { "title": "Party Short Name", "description": "A short common name, abbreviation, or acronym for the party.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "external_ids": { "type": "array", "minItems": 1, "items": { "title": "Party External Identifier", "description": "An identifier for a person or organization using a designated scheme. e.g. an Open Researcher and Contributor ID (ORCID)", "type": "object", "properties": { "scheme": { "title": "External Identifier Schema", "description": "Indicates the type of external identifier.", "type": "string", "format": "uri" }, "id": { "type": "string" } }, "required": ["id", "scheme"], "additionalProperties": false } }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "email_addresses": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/email_address" } }, "telephone_numbers": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/telephone_number" } }, "addresses": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/address" } }, "location_uuids": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/location_uuid" } }, "member_of_organizations": { "type": "array", "minItems": 1, "items": { "title": "Organizational Affiliation", "description": "Identifies that the party object is a member of the organization associated with the provided UUID.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "type"], "additionalProperties": false }, "party_with_name": { "title": "Party (organization or person)", "description": "A responsible entity which is either a person or an organization.", "$id": "#/definitions/party_with_name", "type": "object", "properties": { "uuid": { "title": "Party Universally Unique Identifier", "description": "A unique identifier that can be used to reference this defined location elsewhere in an OSCAL document. A UUID should be consistently used for a given party across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "type": { "title": "Party Type", "description": "A category describing the kind of party the object describes.", "type": "string", "pattern": "^\\S(.*\\S)?$", "enum": ["person", "organization"] }, "name": { "title": "Party Name", "description": "The full name of the party. This is typically the legal name associated with the party.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "short_name": { "title": "Party Short Name", "description": "A short common name, abbreviation, or acronym for the party.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "external_ids": { "type": "array", "minItems": 1, "items": { "title": "Party External Identifier", "description": "An identifier for a person or organization using a designated scheme. e.g. an Open Researcher and Contributor ID (ORCID)", "type": "object", "properties": { "scheme": { "title": "External Identifier Schema", "description": "Indicates the type of external identifier.", "type": "string", "format": "uri" }, "id": { "type": "string" } }, "required": ["id", "scheme"], "additionalProperties": false } }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "email_addresses": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/email_address" } }, "telephone_numbers": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/telephone_number" } }, "addresses": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/address" } }, "location_uuids": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/location_uuid" } }, "member_of_organizations": { "type": "array", "minItems": 1, "items": { "title": "Organizational Affiliation", "description": "Identifies that the party object is a member of the organization associated with the provided UUID.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "type", "name"], "additionalProperties": false }, "party_uuid": { "title": "Party Reference", "description": "References a party defined in metadata.", "$id": "#/definitions/party_uuid", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "role": { "title": "Role", "description": "Defines a function assumed or expected to be assumed by a party in a specific situation.", "$id": "#/definitions/role", "type": "object", "properties": { "id": { "title": "Role Identifier", "description": "A unique identifier for a specific role instance. This identifier's uniqueness is document scoped and is intended to be consistent for the same role across minor revisions of the document.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "title": { "title": "Role Title", "description": "A name given to the role, which may be used by a tool for display and navigation.", "type": "string" }, "short_name": { "title": "Role Short Name", "description": "A short common name, abbreviation, or acronym for the role.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "description": { "title": "Role Description", "description": "A summary of the role's purpose and associated responsibilities.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["id", "title"], "additionalProperties": false }, "role_id": { "title": "Role Identifier Reference", "description": "A reference to the roles served by the user.", "$id": "#/definitions/role_id", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "resource": { "$id": "#/definitions/resource", "title": "Resource", "description": "A resource associated with content in the containing document. A resource may be directly included in the document base64 encoded or may point to one or more equivalent internet resources.", "type": "object", "properties": { "uuid": { "title": "Resource Universally Unique Identifier", "description": "A globally unique identifier that can be used to reference this defined resource elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "title": { "title": "Resource Title", "description": "A name given to the resource, which may be used by a tool for display and navigation.", "type": "string" }, "description": { "title": "Resource Description", "description": "A short summary of the resource used to indicate the purpose of the resource.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "document_ids": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/document_id" } }, "citation": { "title": "Citation", "description": "A citation consisting of end note text and optional structured bibliographic data.", "type": "object", "properties": { "text": { "title": "Citation Text", "description": "A line of citation text.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } } }, "required": ["text"], "additionalProperties": false }, "rlinks": { "type": "array", "minItems": 1, "items": { "title": "Resource link", "description": "A pointer to an external resource with an optional hash for verification and change detection.", "type": "object", "properties": { "href": { "title": "Hypertext Reference", "description": "A resolvable URI reference to a resource.", "type": "string", "format": "uri-reference" }, "media_type": { "title": "Media Type", "description": "Specifies a media type as defined by the Internet Assigned Numbers Authority (IANA) Media Types Registry.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "hashes": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/hash" } } }, "required": ["href"], "additionalProperties": false } }, "base64": { "title": "Base64", "description": "The Base64 alphabet in RFC 2045 _ aligned with XSD.", "type": "object", "properties": { "filename": { "title": "File Name", "description": "Name of the file before it was encoded as Base64 to be embedded in a resource. This is the name that will be assigned to the file when the file is decoded.", "type": "string", "format": "uri-reference" }, "media_type": { "title": "Media Type", "description": "Specifies a media type as defined by the Internet Assigned Numbers Authority (IANA) Media Types Registry.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "value": { "type": "string" } }, "required": ["value"], "additionalProperties": false }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid"], "additionalProperties": false }, "back_matter": { "title": "Back matter", "description": "A collection of resources, which may be included directly or by reference.", "$id": "#/definitions/back_matter", "type": "object", "properties": { "resources": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/resource" } } }, "additionalProperties": false }, "property": { "title": "Property", "description": "An attribute, characteristic, or quality of the containing object expressed as a namespace qualified name/value pair. The value of a property is a simple scalar value, which may be expressed as a list of values.", "$id": "#/definitions/property", "type": "object", "properties": { "name": { "title": "Property Name", "description": "A textual label that uniquely identifies a specific attribute, characteristic, or quality of the property's containing object.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "uuid": { "title": "Property Universally Unique Identifier", "description": "A unique identifier that can be used to reference this property elsewhere in an OSCAL document. A UUID should be consistently used for a given location across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "ns": { "title": "Property Namespace", "description": "A namespace qualifying the property's name. This allows different organizations to associate distinct semantics with the same name.", "type": "string", "format": "uri" }, "value": { "title": "Property Value", "description": "Indicates the value of the attribute, characteristic, or quality.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "class": { "title": "Property Class", "description": "A textual label that provides a sub_type or characterization of the property's name. This can be used to further distinguish or discriminate between the semantics of multiple properties of the same object with the same name and ns.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["name", "value"], "additionalProperties": false }, "link": { "title": "Link", "description": "A reference to a local or remote resource", "$id": "#/definitions/link", "type": "object", "properties": { "href": { "title": "Hypertext Reference", "description": "A resolvable URL reference to a resource.", "type": "string", "format": "uri-reference" }, "rel": { "title": "Relation", "description": "Describes the type of relationship provided by the link. This can be an indicator of the link's purpose.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "media_type": { "title": "Media Type", "description": "Specifies a media type as defined by the Internet Assigned Numbers Authority (IANA) Media Types Registry.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "text": { "title": "Link Text", "description": "A textual label to associate with the link, which may be used for presentation in a tool.", "type": "string" } }, "required": ["href"], "additionalProperties": false }, "responsible_party": { "title": "Responsible Party", "description": "A reference to a set of organizations or persons that have responsibility for performing a referenced role in the context of the containing object.", "$id": "#/definitions/responsible_party", "type": "object", "properties": { "role_id": { "title": "Responsible Role", "description": "The role that the party is responsible for.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "party_uuids": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/party_uuid" } }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["role_id", "party_uuids"], "additionalProperties": false }, "responsible_role": { "title": "Responsible Role", "description": "A reference to one or more roles with responsibility for performing a function relative to the containing object.", "$id": "#/definitions/responsible_role", "type": "object", "properties": { "role_id": { "title": "Responsible Role ID", "description": "The role that is responsible for the business function.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "party_uuids": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/party_uuid" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["role_id"], "additionalProperties": false }, "hash": { "title": "Hash", "description": "A representation of a cryptographic digest generated over a resource using a specified hash algorithm.", "$id": "#/definitions/hash", "type": "object", "properties": { "algorithm": { "title": "Hash algorithm", "description": "Method by which a hash is derived", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "value": { "type": "string" } }, "required": ["value", "algorithm"], "additionalProperties": false }, "remarks": { "title": "Remarks", "description": "Additional commentary on the containing object.", "$id": "#/definitions/remarks", "type": "string" }, "published": { "title": "Publication Timestamp", "description": "The date and time the document was published. The date-time value must be formatted according to RFC 3339 with full time and time zone included.", "$id": "#/definitions/published", "type": "string", "format": "date-time", "pattern": "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, "last_modified": { "title": "Last Modified Timestamp", "description": "The date and time the document was last modified. The date-time value must be formatted according to RFC 3339 with full time and time zone included.", "$id": "#/definitions/last_modified", "type": "string", "format": "date-time", "pattern": "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, "version": { "title": "Document Version", "description": "A string used to distinguish the current version of the document from other previous (and future) versions.", "$id": "#/definitions/version", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "oscal_version": { "title": "OSCAL version", "description": "The OSCAL model version the document was authored against.", "$id": "#/definitions/oscal_version", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "email_address": { "title": "Email Address", "description": "An email address as defined by RFC 5322 Section 3.4.1.", "$id": "#/definitions/email_address", "type": "string", "format": "email", "pattern": "^.+@.+" }, "telephone_number": { "title": "Telephone Number", "description": "Contact number by telephone.", "$id": "#/definitions/telephone_number", "type": "object", "properties": { "type": { "$id": "phone_type", "title": "type flag", "description": "Indicates the type of phone number.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "number": { "type": "string" } }, "required": ["number"], "additionalProperties": false }, "address": { "title": "Address", "description": "A postal address for the location.", "$id": "#/definitions/address", "type": "object", "properties": { "type": { "$id": "address_type", "title": "Address Type", "description": "Indicates the type of address.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "addr_lines": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/addr_line" } }, "city": { "title": "City", "description": "City, town or geographical region for the mailing address.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "state": { "title": "State", "description": "State, province or analogous geographical region for mailing address", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "postal_code": { "title": "Postal Code", "description": "Postal or ZIP code for mailing address", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "country": { "title": "Country Code", "description": "The ISO 3166_1 alpha_2 country code for the mailing address.", "type": "string", "pattern": "^\\S(.*\\S)?$" } }, "additionalProperties": false }, "addr_line": { "title": "Address line", "description": "A single line of an address.", "$id": "#/definitions/addr_line", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "document_id": { "title": "Document Identifier", "description": "A document identifier qualified by an identifier scheme. A document identifier provides a globally unique identifier for a group of documents that are to be treated as different versions of the same document. If this element does not appear, or if the value of this element is empty, the value of \"document_id\" is equal to the value of the \"uuid\" flag of the top_level root element.", "$id": "#/definitions/document_id", "type": "object", "properties": { "scheme": { "title": "Document Identification Scheme", "description": "Qualifies the kind of document identifier using a URI. If the scheme is not provided the value of the element will be interpreted as a string of characters.", "type": "string", "format": "uri" }, "identifier": { "type": "string" } }, "required": ["identifier"], "additionalProperties": false }, "profile": { "title": "Profile", "description": "Each OSCAL profile is defined by a Profile element", "$id": "#/definitions/profile", "type": "object", "properties": { "uuid": { "title": "Catalog Universally Unique Identifier", "description": "A globally unique identifier for this profile instance. This UUID should be changed when this document is revised.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "metadata": { "$ref": "#/definitions/metadata" }, "imports": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/import" } }, "merge": { "$ref": "#/definitions/merge" }, "modify": { "$ref": "#/definitions/modify" }, "back_matter": { "$ref": "#/definitions/back_matter" } }, "required": ["uuid", "metadata", "imports"], "additionalProperties": false }, "import": { "title": "Import resource", "description": "The import designates a catalog, profile, or other resource to be included (referenced and potentially modified) by this profile. The import also identifies which controls to select using the include_all, include_controls, and exclude_controls directives.", "$id": "#/definitions/import", "type": "object", "properties": { "href": { "title": "Catalog or Profile Reference", "description": "A resolvable URL reference to the base catalog or profile that this profile is tailoring.", "type": "string", "format": "uri-reference" }, "include_all": { "$ref": "#/definitions/include_all" }, "include_controls": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/select_control_by_id" } }, "exclude_controls": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/select_control_by_id" } } }, "required": ["href"], "additionalProperties": false }, "merge": { "title": "Merge controls", "description": "A Merge element merges controls in resolution.", "$id": "#/definitions/merge", "type": "object", "properties": { "combine": { "$ref": "#/definitions/combine" }, "as_is": { "$ref": "#/definitions/as_is" }, "custom": { "$ref": "#/definitions/custom" } }, "additionalProperties": false }, "combine": { "title": "Combination rule", "description": "A Combine element defines whether and how to combine multiple (competing) versions of the same control", "$id": "#/definitions/combine", "type": "object", "properties": { "method": { "title": "Combination method", "description": "How clashing controls should be handled", "type": "string", "pattern": "^\\S(.*\\S)?$", "enum": ["use_first", "merge", "keep"] } }, "additionalProperties": false }, "as_is": { "title": "As is", "description": "An As_is element indicates that the controls should be structured in resolution as they are structured in their source catalogs. It does not contain any elements or attributes.", "$id": "#/definitions/as_is", "type": "boolean" }, "custom": { "title": "Custom grouping", "description": "A Custom element frames a structure for embedding represented controls in resolution.", "$id": "#/definitions/custom", "type": "object", "properties": { "groups": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/profile_group" } }, "insert_controls": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/insert_controls" } } }, "additionalProperties": false }, "profile_group": { "title": "Control group", "description": "A group of (selected) controls or of groups of controls", "$id": "#/definitions/profile_group", "type": "object", "properties": { "id": { "title": "Group Identifier", "description": "A unique identifier for a specific group instance that can be used to reference the group within this and in other OSCAL documents. This identifier's uniqueness is document scoped and is intended to be consistent for the same group across minor revisions of the document.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "class": { "title": "Group Class", "description": "A textual label that provides a sub_type or characterization of the group.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "title": { "title": "Group Title", "description": "A name given to the group, which may be used by a tool for display and navigation.", "type": "string" }, "params": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/parameter" } }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "parts": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/part" } }, "groups": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/profile_group" } }, "insert_controls": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/insert_controls" } } }, "required": ["title"], "additionalProperties": false }, "modify": { "title": "Modify controls", "description": "Set parameters or amend controls in resolution", "$id": "#/definitions/modify", "type": "object", "properties": { "set_parameters": { "type": "array", "minItems": 1, "items": { "title": "Parameter Setting", "description": "A parameter setting, to be propagated to points of insertion", "type": "object", "properties": { "param_id": { "title": "Parameter ID", "description": "Indicates the value of the 'id' flag on a target parameter; i.e. which parameter to set", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "class": { "title": "Parameter Class", "description": "A textual label that provides a characterization of the parameter.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "depends_on": { "title": "Depends on", "description": "Another parameter invoking this one", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "label": { "title": "Parameter Label", "description": "A short, placeholder name for the parameter, which can be used as a substitute for a value if no value is assigned.", "type": "string" }, "usage": { "title": "Parameter Usage Description", "description": "Describes the purpose and use of a parameter", "type": "string" }, "constraints": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/parameter_constraint" } }, "guidelines": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/parameter_guideline" } }, "values": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/parameter_value" } }, "select": { "$ref": "#/definitions/parameter_selection" } }, "required": ["param_id"], "additionalProperties": false } }, "alters": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/alter" } } }, "additionalProperties": false }, "insert_controls": { "title": "Select controls", "description": "Specifies which controls to use in the containing context.", "$id": "#/definitions/insert_controls", "type": "object", "properties": { "order": { "title": "Order", "description": "A designation of how a selection of controls in a profile is to be ordered.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$", "enum": ["keep", "ascending", "descending"] }, "include_all": { "$ref": "#/definitions/include_all" }, "include_controls": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/call" } }, "exclude_controls": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/call" } } }, "additionalProperties": false }, "include_all": { "title": "Insert All", "description": "Insert all controls from the imported catalog or profile resources identified in the import directive.", "$id": "#/definitions/include_all", "type": "object", "additionalProperties": false }, "call": { "title": "Call", "description": "Call a control by its ID", "$id": "#/definitions/call", "type": "object", "properties": { "with_child_controls": { "title": "Include contained controls with control", "description": "When a control is included, whether its child (dependent) controls are also included.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$", "enum": ["yes", "no"] }, "with_ids": { "type": "array", "minItems": 1, "items": { "title": "Match Controls by Identifier", "description": "", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" } }, "matching": { "type": "array", "minItems": 1, "items": { "title": "Match Controls by Pattern", "description": "Select controls by (regular expression) match on ID", "type": "object", "properties": { "pattern": { "title": "Pattern", "description": "A glob expression matching the IDs of one or more controls to be selected.", "type": "string", "pattern": "^\\S(.*\\S)?$" } }, "additionalProperties": false } } }, "additionalProperties": false }, "alter": { "title": "Alteration", "description": "An Alter element specifies changes to be made to an included control when a profile is resolved.", "$id": "#/definitions/alter", "type": "object", "properties": { "control_id": { "title": "Control Identifier Reference", "description": "A reference to a control with a corresponding id value.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "removes": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/remove" } }, "adds": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/add" } } }, "additionalProperties": false }, "remove": { "title": "Removal", "description": "Specifies objects to be removed from a control based on specific aspects of the object that must all match.", "$id": "#/definitions/remove", "type": "object", "properties": { "by_name": { "title": "Reference by (assigned) name", "description": "Identify items to remove by matching their assigned name", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "by_class": { "title": "Reference by class", "description": "Identify items to remove by matching their class.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "by_id": { "title": "Reference by ID", "description": "Identify items to remove indicated by their id.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "by_item_name": { "title": "Item Name Reference", "description": "Identify items to remove by the name of the item's information element name, e.g. title or prop", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "by_ns": { "title": "Item Namespace Reference", "description": "Identify items to remove by the item's ns, which is the namespace associated with a part, or prop.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" } }, "additionalProperties": false }, "add": { "title": "Addition", "description": "Specifies contents to be added into controls, in resolution", "$id": "#/definitions/add", "type": "object", "properties": { "position": { "title": "Position", "description": "Where to add the new content with respect to the targeted element (beside it or inside it)", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$", "enum": ["before", "after", "starting", "ending"] }, "by_id": { "title": "Reference by ID", "description": "Target location of the addition.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "title": { "title": "Title Change", "description": "A name given to the control, which may be used by a tool for display and navigation.", "type": "string" }, "params": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/parameter" } }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "parts": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/part" } } }, "additionalProperties": false }, "component_definition": { "title": "Component Definition", "description": "A collection of component descriptions, which may optionally be grouped by capability.", "$id": "#/definitions/component_definition", "type": "object", "properties": { "uuid": { "title": "Component Definition Universally Unique Identifier", "description": "A globally unique identifier for this component definition instance. This UUID should be changed when this document is revised.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "metadata": { "$ref": "#/definitions/metadata" }, "import_component_definitions": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/import_component_definition" } }, "components": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/defined_component" } }, "capabilities": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/capability" } }, "back_matter": { "$ref": "#/definitions/back_matter" } }, "required": ["uuid", "metadata"], "additionalProperties": false }, "import_component_definition": { "title": "Import Component Definition", "description": "Loads a component definition from another resource.", "$id": "#/definitions/import_component_definition", "type": "object", "properties": { "href": { "title": "Hyperlink Reference", "description": "A link to a resource that defines a set of components and/or capabilities to import into this collection.", "type": "string", "format": "uri-reference" } }, "required": ["href"], "additionalProperties": false }, "defined_component": { "title": "Component", "description": "A defined component that can be part of an implemented system.", "$id": "#/definitions/defined_component", "type": "object", "properties": { "uuid": { "title": "Component Identifier", "description": "The unique identifier for the component.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "type": { "$id": "defined_component_type", "title": "Component Type", "description": "A category describing the purpose of the component.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "title": { "title": "Component Title", "description": "A human readable name for the component.", "type": "string" }, "description": { "title": "Component Description", "description": "A description of the component, including information about its function.", "type": "string" }, "purpose": { "title": "Purpose", "description": "A summary of the technological or business purpose of the component.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "responsible_roles": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_role" } }, "protocols": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/protocol" } }, "control_implementations": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/component_definition_control_implementation" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "type", "title", "description"], "additionalProperties": false }, "capability": { "title": "Capability", "description": "A grouping of other components and/or capabilities.", "$id": "#/definitions/capability", "type": "object", "properties": { "uuid": { "title": "Capability Identifier", "description": "A unique identifier for a capability.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "name": { "title": "Capability Name", "description": "The capability's human_readable name.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "description": { "title": "Capability Description", "description": "A summary of the capability.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "incorporates_components": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/incorporates_component" } }, "control_implementations": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/control_implementation" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "name", "description"], "additionalProperties": false }, "incorporates_component": { "title": "Incorporates Component", "description": "TBD", "$id": "#/definitions/incorporates_component", "type": "object", "properties": { "component_uuid": { "title": "Component Reference", "description": "A reference to a component by its identifier", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "description": { "title": "Component Description", "description": "A description of the component, including information about its function.", "type": "string" } }, "required": ["component_uuid", "description"], "additionalProperties": false }, "component_definition_control_implementation": { "title": "Control Implementation Set", "description": "Defines how the component or capability supports a set of controls.", "$id": "#/definitions/component_definition_control_implementation", "type": "object", "properties": { "uuid": { "title": "Control Implementation Set Identifier", "description": "A unique identifier for the set of implemented controls.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "source": { "title": "Source Resource Reference", "description": "A reference to an OSCAL catalog or profile providing the referenced control or subcontrol definition.", "type": "string", "format": "uri-reference" }, "description": { "title": "Control Implementation Description", "description": "A description of how the specified set of controls are implemented for the containing component or capability.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "set_parameters": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/set_parameter" } }, "implemented_requirements": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/implemented_requirement" } } }, "required": ["uuid", "source", "description", "implemented_requirements"], "additionalProperties": false }, "component_definition_implemented_requirement": { "title": "Control Implementation", "description": "Describes how the containing component or capability implements an individual control.", "$id": "#/definitions/component_definition_implemented_requirement", "type": "object", "properties": { "uuid": { "title": "Control Implementation Identifier", "description": "A unique identifier for a specific control implementation.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "control_id": { "title": "Control Identifier Reference", "description": "A reference to a control with a corresponding id value.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "description": { "title": "Control Implementation Description", "description": "A description of how the specified control is implemented for the containing component or capability.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "set_parameters": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/set_parameter" } }, "responsible_roles": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_role" } }, "statements": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/statement" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "control_id", "description"], "additionalProperties": false }, "system_component": { "title": "Component", "description": "A defined component that can be part of an implemented system.", "$id": "#/definitions/system_component", "type": "object", "properties": { "uuid": { "title": "Component Identifier", "description": "The unique identifier for the component.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "type": { "$id": "system_component_type", "title": "Component Type", "description": "A category describing the purpose of the component.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "title": { "title": "Component Title", "description": "A human readable name for the system component.", "type": "string" }, "description": { "title": "Component Description", "description": "A description of the component, including information about its function.", "type": "string" }, "purpose": { "title": "Purpose", "description": "A summary of the technological or business purpose of the component.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "status": { "title": "Status", "description": "Describes the operational status of the system component.", "type": "object", "properties": { "state": { "title": "State", "description": "The operational status.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$", "enum": ["under_development", "operational", "disposition", "other"] }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["state"], "additionalProperties": false }, "responsible_roles": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_role" } }, "protocols": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/protocol" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "type", "title", "description", "status"], "additionalProperties": false }, "protocol": { "title": "Service Protocol Information", "description": "Information about the protocol used to provide a service.", "$id": "#/definitions/protocol", "type": "object", "properties": { "uuid": { "title": "Service Protocol Information Universally Unique Identifier", "description": "A globally unique identifier that can be used to reference this service protocol entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "name": { "title": "Protocol Name", "description": "The common name of the protocol, which should be the appropriate \"service name\" from the IANA Service Name and Transport Protocol Port Number Registry.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "title": { "title": "Protocol Title", "description": "A human readable name for the protocol (e.g., Transport Layer Security).", "type": "string" }, "port_ranges": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/port_range" } } }, "required": ["name"], "additionalProperties": false }, "port_range": { "title": "Port Range", "description": "Where applicable this is the IPv4 port range on which the service operates.", "$id": "#/definitions/port_range", "type": "object", "properties": { "start": { "title": "Start", "description": "Indicates the starting port number in a port range", "type": "integer", "multipleOf": 1, "minimum": 0 }, "end": { "title": "End", "description": "Indicates the ending port number in a port range", "type": "integer", "multipleOf": 1, "minimum": 0 }, "transport": { "title": "Transport", "description": "Indicates the transport type.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$", "enum": ["TCP", "UDP"] } }, "additionalProperties": false }, "implementation_status": { "title": "Implementation Status", "description": "Indicates the degree to which the a given control is implemented.", "$id": "#/definitions/implementation_status", "type": "object", "properties": { "state": { "title": "Implementation State", "description": "Identifies the implementation status of the control or control objective.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["state"], "additionalProperties": false }, "system_user": { "title": "System User", "description": "A type of user that interacts with the system based on an associated role.", "$id": "#/definitions/system_user", "type": "object", "properties": { "uuid": { "title": "User Universally Unique Identifier", "description": "The unique identifier for the user class.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "title": { "title": "User Title", "description": "A name given to the user, which may be used by a tool for display and navigation.", "type": "string" }, "short_name": { "title": "User Short Name", "description": "A short common name, abbreviation, or acronym for the user.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "description": { "title": "User Description", "description": "A summary of the user's purpose within the system.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "role_ids": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/role_id" } }, "authorized_privileges": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/authorized_privilege" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid"], "additionalProperties": false }, "authorized_privilege": { "title": "Privilege", "description": "Identifies a specific system privilege held by the user, along with an associated description and/or rationale for the privilege.", "$id": "#/definitions/authorized_privilege", "type": "object", "properties": { "title": { "title": "Privilege Title", "description": "A human readable name for the privilege.", "type": "string" }, "description": { "title": "Privilege Description", "description": "A summary of the privilege's purpose within the system.", "type": "string" }, "functions_performed": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/function_performed" } } }, "required": ["title", "functions_performed"], "additionalProperties": false }, "function_performed": { "title": "Functions Performed", "description": "Describes a function performed for a given authorized privilege by this user class.", "$id": "#/definitions/function_performed", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "inventory_item": { "title": "Inventory Item", "description": "A single managed inventory item within the system.", "$id": "#/definitions/inventory_item", "type": "object", "properties": { "uuid": { "title": "Inventory Item Universally Unique Identifier", "description": "A globally unique identifier that can be used to reference this inventory item entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "description": { "title": "Inventory Item Description", "description": "A summary of the inventory item stating its purpose within the system.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "responsible_parties": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_party" } }, "implemented_components": { "type": "array", "minItems": 1, "items": { "title": "Implemented Component", "description": "The set of components that are implemented in a given system inventory item.", "type": "object", "properties": { "component_uuid": { "title": "Component Universally Unique Identifier Reference", "description": "A reference to a component that is implemented as part of an inventory item.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "responsible_parties": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_party" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["component_uuid"], "additionalProperties": false } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "description"], "additionalProperties": false }, "set_parameter": { "title": "Set Parameter Value", "description": "Identifies the parameter that will be set by the enclosed value.", "$id": "#/definitions/set_parameter", "type": "object", "properties": { "param_id": { "title": "Parameter ID", "description": "A reference to a parameter within a control, who's catalog has been imported into the current implementation context.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "values": { "type": "array", "minItems": 1, "items": { "title": "Parameter Value", "description": "A parameter value or set of values.", "type": "string", "pattern": "^\\S(.*\\S)?$" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["param_id", "values"], "additionalProperties": false }, "system_id": { "title": "System Identification", "description": "A unique identifier for the system described by this system security plan.", "$id": "#/definitions/system_id", "type": "object", "properties": { "identifier_type": { "title": "Identification System Type", "description": "Identifies the identification system from which the provided identifier was assigned.", "type": "string", "format": "uri" }, "id": { "type": "string" } }, "required": ["id"], "additionalProperties": false }, "system_security_plan": { "title": "System Security Plan (SSP)", "description": "A system security plan, such as those described in NIST SP 800_18", "$id": "#/definitions/system_security_plan", "type": "object", "properties": { "uuid": { "title": "System Security Plan Universally Unique Identifier", "description": "A globally unique identifier for this catalog instance. This UUID should be changed when this document is revised.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "metadata": { "$ref": "#/definitions/metadata" }, "import_profile": { "$ref": "#/definitions/import_profile" }, "system_characteristics": { "$ref": "#/definitions/system_characteristics" }, "system_implementation": { "$ref": "#/definitions/system_implementation" }, "control_implementation": { "$ref": "#/definitions/control_implementation" }, "back_matter": { "$ref": "#/definitions/back_matter" } }, "required": ["uuid", "metadata", "import_profile", "system_characteristics", "system_implementation", "control_implementation"], "additionalProperties": false }, "import_profile": { "title": "Import Profile", "description": "Used to import the OSCAL profile representing the system's control baseline.", "$id": "#/definitions/import_profile", "type": "object", "properties": { "href": { "title": "Profile Reference", "description": "A resolvable URL reference to the profile to use as the system's control baseline.", "type": "string", "format": "uri-reference" }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["href"], "additionalProperties": false }, "system_characteristics": { "title": "System Characteristics", "description": "Contains the characteristics of the system, such as its name, purpose, and security impact level.", "$id": "#/definitions/system_characteristics", "type": "object", "properties": { "system_ids": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/system_id" } }, "system_name": { "title": "System Name _ Full", "description": "The full name of the system.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "system_name_short": { "title": "System Name _ Short", "description": "A short name for the system, such as an acronym, that is suitable for display in a data table or summary list.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "description": { "title": "System Description", "description": "A summary of the system.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "date_authorized": { "$ref": "#/definitions/date_authorized" }, "security_sensitivity_level": { "title": "Security Sensitivity Level", "description": "The overall information system sensitivity categorization, such as defined by FIPS_199.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "system_information": { "$ref": "#/definitions/system_information" }, "security_impact_level": { "$ref": "#/definitions/security_impact_level" }, "status": { "$ref": "#/definitions/status" }, "authorization_boundary": { "$ref": "#/definitions/authorization_boundary" }, "network_architecture": { "$ref": "#/definitions/network_architecture" }, "data_flow": { "$ref": "#/definitions/data_flow" }, "responsible_parties": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_party" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["system_ids", "system_name", "description", "security_sensitivity_level", "system_information", "security_impact_level", "status", "authorization_boundary"], "additionalProperties": false }, "system_information": { "title": "System Information", "description": "Contains details about all information types that are stored, processed, or transmitted by the system, such as privacy information, and those defined in NIST SP 800_60.", "$id": "#/definitions/system_information", "type": "object", "properties": { "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "information_types": { "type": "array", "minItems": 1, "items": { "title": "Information Type", "description": "Contains details about one information type that is stored, processed, or transmitted by the system, such as privacy information, and those defined in NIST SP 800_60.", "type": "object", "properties": { "uuid": { "title": "Information Type Universally Unique Identifier", "description": "A globally unique identifier that can be used to reference this information type entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "title": { "title": "title field", "description": "A human readable name for the information type. This title should be meaningful within the context of the system.", "type": "string" }, "description": { "title": "Information Type Description", "description": "A summary of how this information type is used within the system.", "type": "string" }, "categorizations": { "type": "array", "minItems": 1, "items": { "title": "Information Type Categorization", "description": "A set of information type identifiers qualified by the given identification system used, such as NIST SP 800_60.", "type": "object", "properties": { "system": { "title": "Information Type Identification System", "description": "Specifies the information type identification system used.", "type": "string", "format": "uri" }, "information_type_ids": { "type": "array", "minItems": 1, "items": { "title": "Information Type Systematized Identifier", "description": "An identifier qualified by the given identification system used, such as NIST SP 800_60.", "type": "string", "pattern": "^\\S(.*\\S)?$" } } }, "required": ["system"], "additionalProperties": false } }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "confidentiality_impact": { "title": "Confidentiality Impact Level", "description": "The expected level of impact resulting from the unauthorized disclosure of the described information.", "type": "object", "properties": { "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "base": { "$ref": "#/definitions/base" }, "selected": { "$ref": "#/definitions/selected" }, "adjustment_justification": { "$ref": "#/definitions/adjustment_justification" } }, "required": ["base"], "additionalProperties": false }, "integrity_impact": { "title": "Integrity Impact Level", "description": "The expected level of impact resulting from the unauthorized modification of the described information.", "type": "object", "properties": { "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "base": { "$ref": "#/definitions/base" }, "selected": { "$ref": "#/definitions/selected" }, "adjustment_justification": { "$ref": "#/definitions/adjustment_justification" } }, "required": ["base"], "additionalProperties": false }, "availability_impact": { "title": "Availability Impact Level", "description": "The expected level of impact resulting from the disruption of access to or use of the described information or the information system.", "type": "object", "properties": { "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "base": { "$ref": "#/definitions/base" }, "selected": { "$ref": "#/definitions/selected" }, "adjustment_justification": { "$ref": "#/definitions/adjustment_justification" } }, "required": ["base"], "additionalProperties": false } }, "required": ["title", "description", "confidentiality_impact", "integrity_impact", "availability_impact"], "additionalProperties": false } } }, "required": ["information_types"], "additionalProperties": false }, "base": { "title": "Base Level (Confidentiality, Integrity, or Availability)", "description": "The prescribed base (Confidentiality, Integrity, or Availability) security impact level.", "$id": "#/definitions/base", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "selected": { "title": "Selected Level (Confidentiality, Integrity, or Availability)", "description": "The selected (Confidentiality, Integrity, or Availability) security impact level.", "$id": "#/definitions/selected", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "adjustment_justification": { "title": "Adjustment Justification", "description": "If the selected security level is different from the base security level, this contains the justification for the change.", "$id": "#/definitions/adjustment_justification", "type": "string" }, "security_impact_level": { "title": "Security Impact Level", "description": "The overall level of expected impact resulting from unauthorized disclosure, modification, or loss of access to information.", "$id": "#/definitions/security_impact_level", "type": "object", "properties": { "security_objective_confidentiality": { "title": "Security Objective: Confidentiality", "description": "A target_level of confidentiality for the system, based on the sensitivity of information within the system.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "security_objective_integrity": { "title": "Security Objective: Integrity", "description": "A target_level of integrity for the system, based on the sensitivity of information within the system.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "security_objective_availability": { "title": "Security Objective: Availability", "description": "A target_level of availability for the system, based on the sensitivity of information within the system.", "type": "string", "pattern": "^\\S(.*\\S)?$" } }, "required": ["security_objective_confidentiality", "security_objective_integrity", "security_objective_availability"], "additionalProperties": false }, "status": { "title": "Status", "description": "Describes the operational status of the system.", "$id": "#/definitions/status", "type": "object", "properties": { "state": { "title": "State", "description": "The current operating status.", "type": "string", "pattern": "^\\S(.*\\S)?$", "enum": ["operational", "under_development", "under_major_modification", "disposition", "other"] }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["state"], "additionalProperties": false }, "date_authorized": { "title": "System Authorization Date", "description": "The date the system received its authorization.", "$id": "#/definitions/date_authorized", "type": "string", "format": "date", "pattern": "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))(Z|[+-][0-9]{2}:[0-9]{2})?$" }, "authorization_boundary": { "title": "Authorization Boundary", "description": "A description of this system's authorization boundary, optionally supplemented by diagrams that illustrate the authorization boundary.", "$id": "#/definitions/authorization_boundary", "type": "object", "properties": { "description": { "title": "Authorization Boundary Description", "description": "A summary of the system's authorization boundary.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "diagrams": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/diagram" } }, "remarks": { "title": "remarks field", "description": "Commentary about the system's authorization boundary that enhances the diagram.", "type": "string" } }, "required": ["description"], "additionalProperties": false }, "diagram": { "title": "Diagram", "description": "A graphic that provides a visual representation the system, or some aspect of it.", "$id": "#/definitions/diagram", "type": "object", "properties": { "uuid": { "title": "Diagram ID", "description": "The identifier for this diagram.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "description": { "title": "Diagram Description", "description": "A summary of the diagram.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "caption": { "title": "Caption", "description": "A brief caption to annotate the diagram.", "type": "string" }, "remarks": { "title": "remarks field", "description": "Commentary about the diagram that enhances it.", "type": "string" } }, "required": ["uuid"], "additionalProperties": false }, "network_architecture": { "title": "Network Architecture", "description": "A description of the system's network architecture, optionally supplemented by diagrams that illustrate the network architecture.", "$id": "#/definitions/network_architecture", "type": "object", "properties": { "description": { "title": "Network Architecture Description", "description": "A summary of the system's network architecture.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "diagrams": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/diagram" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["description"], "additionalProperties": false }, "data_flow": { "title": "Data Flow", "description": "A description of the logical flow of information within the system and across its boundaries, optionally supplemented by diagrams that illustrate these flows.", "$id": "#/definitions/data_flow", "type": "object", "properties": { "description": { "title": "Data Flow Description", "description": "A summary of the system's data flow.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "diagrams": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/diagram" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["description"], "additionalProperties": false }, "system_implementation": { "title": "System Implementation", "description": "Provides information as to how the system is implemented.", "$id": "#/definitions/system_implementation", "type": "object", "properties": { "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "leveraged_authorizations": { "type": "array", "minItems": 1, "items": { "title": "Leveraged Authorization", "description": "A description of another authorized system from which this system inherits capabilities that satisfy security requirements. Another term for this concept is a common control provider.", "type": "object", "properties": { "uuid": { "title": "Leveraged Authorization Universally Unique Identifier", "description": "A globally unique identifier that can be used to reference this leveraged authorization entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "title": { "title": "title field", "description": "A human readable name for the leveraged authorization in the context of the system.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "party_uuid": { "title": "party_uuid field", "description": "A reference to the party that manages the leveraged system.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "date_authorized": { "$ref": "#/definitions/date_authorized" }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "title", "party_uuid", "date_authorized"], "additionalProperties": false } }, "users": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/system_user" } }, "components": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/system_component" } }, "inventory_items": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/inventory_item" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["users", "components"], "additionalProperties": false }, "control_implementation": { "title": "Control Implementation", "description": "Describes how the system satisfies a set of controls.", "$id": "#/definitions/control_implementation", "type": "object", "properties": { "description": { "title": "Control Implementation Description", "description": "A statement describing important things to know about how this set of control satisfaction documentation is approached.", "type": "string" }, "set_parameters": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/set_parameter" } }, "implemented_requirements": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/implemented_requirement" } } }, "required": ["description", "implemented_requirements"], "additionalProperties": false }, "implemented_requirement": { "title": "Control_based Requirement", "description": "Describes how the system satisfies an individual control.", "$id": "#/definitions/implemented_requirement", "type": "object", "properties": { "uuid": { "title": "Control Requirement Universally Unique Identifier", "description": "A globally unique identifier that can be used to reference this control requirement entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "control_id": { "title": "Control Identifier Reference", "description": "A reference to a control with a corresponding id value.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "set_parameters": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/set_parameter" } }, "responsible_roles": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_role" } }, "statements": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/statement" } }, "by_components": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/by_component" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "control_id"], "additionalProperties": false }, "statement": { "title": "Specific Control Statement", "description": "Identifies which statements within a control are addressed.", "$id": "#/definitions/statement", "type": "object", "properties": { "statement_id": { "title": "Control Statement Reference", "description": "A reference to a control statement by its identifier", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "uuid": { "title": "Control Statement Reference Universally Unique Identifier", "description": "A globally unique identifier that can be used to reference this control statement entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "responsible_roles": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_role" } }, "by_components": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/by_component" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["statement_id", "uuid"], "additionalProperties": false }, "by_component": { "title": "Component Control Implementation", "description": "Defines how the referenced component implements a set of controls.", "$id": "#/definitions/by_component", "type": "object", "properties": { "component_uuid": { "title": "Component Universally Unique Identifier Reference", "description": "A reference to the component that is implementing a given control or control statement.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "uuid": { "title": "By_Component Universally Unique Identifier", "description": "A globally unique identifier that can be used to reference this by_component entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "description": { "title": "Control Implementation Description", "description": "An implementation statement that describes how a control or a control statement is implemented within the referenced system component.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "set_parameters": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/set_parameter" } }, "implementation_status": { "$ref": "#/definitions/implementation_status" }, "export": { "title": "Export", "description": "Identifies content intended for external consumption, such as with leveraged organizations.", "type": "object", "properties": { "description": { "title": "Control Implementation Export Description", "description": "An implementation statement that describes the aspects of the control or control statement implementation that can be available to another system leveraging this system.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "provided": { "type": "array", "minItems": 1, "items": { "title": "Provided Control Implementation", "description": "Describes a capability which may be inherited by a leveraging system.", "type": "object", "properties": { "uuid": { "title": "Provided Universally Unique Identifier", "description": "A globally unique identifier that can be used to reference this provided entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "description": { "title": "Provided Control Implementation Description", "description": "An implementation statement that describes the aspects of the control or control statement implementation that can be provided to another system leveraging this system.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "responsible_roles": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_role" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "description"], "additionalProperties": false } }, "responsibilities": { "type": "array", "minItems": 1, "items": { "title": "Control Implementation Responsibility", "description": "Describes a control implementation responsibility imposed on a leveraging system.", "type": "object", "properties": { "uuid": { "title": "Responsibility Universally Unique Identifier", "description": "A globally unique identifier that can be used to reference this responsibility entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "provided_uuid": { "title": "Provided UUID", "description": "Identifies a 'provided' assembly associated with this assembly.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "description": { "title": "Control Implementation Responsibility Description", "description": "An implementation statement that describes the aspects of the control or control statement implementation that a leveraging system must implement to satisfy the control provided by a leveraged system.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "responsible_roles": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_role" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "description"], "additionalProperties": false } }, "remarks": { "$ref": "#/definitions/remarks" } }, "additionalProperties": false }, "inherited": { "type": "array", "minItems": 1, "items": { "title": "Inherited Control Implementation", "description": "Describes a control implementation inherited by a leveraging system.", "type": "object", "properties": { "uuid": { "title": "Inherited Universally Unique Identifier", "description": "A globally unique identifier that can be used to reference this inherited entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "provided_uuid": { "title": "Provided UUID", "description": "Identifies a 'provided' assembly associated with this assembly.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "description": { "title": "Inherited Control Implementation Description", "description": "An implementation statement that describes the aspects of a control or control statement implementation that a leveraging system is inheriting from a leveraged system.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "responsible_roles": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_role" } } }, "required": ["uuid", "description"], "additionalProperties": false } }, "satisfied": { "type": "array", "minItems": 1, "items": { "title": "Satisfied Control Implementation Responsibility", "description": "Describes how this system satisfies a responsibility imposed by a leveraged system.", "type": "object", "properties": { "uuid": { "title": "Satisfied Universally Unique Identifier", "description": "A globally unique identifier that can be used to reference this satisfied entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "responsibility_uuid": { "title": "Provided UUID", "description": "Identifies a 'provided' assembly associated with this assembly.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "description": { "title": "Satisfied Control Implementation Responsibility Description", "description": "An implementation statement that describes the aspects of a control or control statement implementation that a leveraging system is implementing based on a requirement from a leveraged system.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "responsible_roles": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_role" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "description"], "additionalProperties": false } }, "responsible_roles": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_role" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["component_uuid", "uuid", "description"], "additionalProperties": false }, "assessment_plan": { "title": "Security Assessment Plan (SAP)", "description": "An assessment plan, such as those provided by a FedRAMP assessor.", "$id": "#/definitions/assessment_plan", "type": "object", "properties": { "uuid": { "title": "Assessment Plan Universally Unique Identifier", "description": "Uniquely identifies this assessment plan. This UUID must be changed each time the content of the plan changes.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "metadata": { "$ref": "#/definitions/metadata" }, "import_ssp": { "$ref": "#/definitions/import_ssp" }, "local_definitions": { "title": "Local Definitions", "description": "Used to define data objects that are used in the assessment plan, that do not appear in the referenced SSP.", "type": "object", "properties": { "components": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/system_component" } }, "inventory_items": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/inventory_item" } }, "users": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/system_user" } }, "objectives_and_methods": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/local_objective" } }, "activities": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/activity" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "additionalProperties": false }, "terms_and_conditions": { "title": "Assessment Plan Terms and Conditions", "description": "Used to define various terms and conditions under which an assessment, described by the plan, can be performed. Each child part defines a different type of term or condition.", "type": "object", "properties": { "parts": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/assessment_part" } } }, "additionalProperties": false }, "reviewed_controls": { "$ref": "#/definitions/reviewed_controls" }, "assessment_subjects": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/assessment_subject" } }, "assessment_assets": { "$ref": "#/definitions/assessment_assets" }, "tasks": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/task" } }, "back_matter": { "$ref": "#/definitions/back_matter" } }, "required": ["uuid", "metadata", "import_ssp", "reviewed_controls"], "additionalProperties": false }, "import_ssp": { "title": "Import System Security Plan", "description": "Used by the assessment plan and POA&M to import information about the system.", "$id": "#/definitions/import_ssp", "type": "object", "properties": { "href": { "title": "System Security Plan Reference", "description": ">A resolvable URL reference to the system security plan for the system being assessed.", "type": "string", "format": "uri-reference" }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["href"], "additionalProperties": false }, "local_objective": { "title": "Assessment_Specific Control Objective", "description": "A local definition of a control objective for this assessment. Uses catalog syntax for control objective and assessment actions.", "$id": "#/definitions/local_objective", "type": "object", "properties": { "control_id": { "title": "Control Identifier Reference", "description": "A reference to a control with a corresponding id value.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "description": { "title": "Objective Description", "description": "A human_readable description of this control objective.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "parts": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/part" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["control_id", "parts"], "additionalProperties": false }, "assessment_method": { "title": "Assessment Method", "description": "A local definition of a control objective. Uses catalog syntax for control objective and assessment activities.", "$id": "#/definitions/assessment_method", "type": "object", "properties": { "uuid": { "title": "Assessment Method Universally Unique Identifier", "description": "Uniquely identifies this defined assessment method. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. A UUID should be consistently used for a given assessment method across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "description": { "title": "Assessment Method Description", "description": "A human_readable description of this assessment method.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "part": { "$ref": "#/definitions/assessment_part" }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "part"], "additionalProperties": false }, "activity": { "title": "Activity", "description": "Identifies an assessment or related process that can be performed. In the assessment plan, this is an intended activity which may be associated with an assessment task. In the assessment results, this an activity that was actually performed as part of an assessment.", "$id": "#/definitions/activity", "type": "object", "properties": { "uuid": { "title": "Assessment Activity Universally Unique Identifier", "description": "Uniquely identifies this assessment activity. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. A UUID should be consistently used for a given included activity across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "title": { "title": "Included Activity Title", "description": "The title for this included activity.", "type": "string" }, "description": { "title": "Included Activity Description", "description": "A human_readable description of this included activity.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "steps": { "type": "array", "minItems": 1, "items": { "title": "Step", "description": "Identifies an individual step in a series of steps related to an activity, such as an assessment test or examination procedure.", "type": "object", "properties": { "uuid": { "title": "Step Universally Unique Identifier", "description": "Uniquely identifies a step. This UUID may be referenced elsewhere in an OSCAL document when referring to this step. A UUID should be consistently used for a given test step across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "title": { "title": "Step Title", "description": "The title for this step.", "type": "string" }, "description": { "title": "Step Description", "description": "A human_readable description of this step.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "reviewed_controls": { "$ref": "#/definitions/reviewed_controls" }, "responsible_roles": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_role" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "description"], "additionalProperties": false } }, "related_controls": { "$ref": "#/definitions/reviewed_controls" }, "responsible_roles": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_role" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "description"], "additionalProperties": false }, "task": { "title": "Task", "description": "Represents a scheduled event or milestone, which may be associated with a series of assessment actions.", "$id": "#/definitions/task", "type": "object", "properties": { "uuid": { "title": "Task Universally Unique Identifier", "description": "Uniquely identifies this assessment task.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "type": { "$id": "task_type", "title": "Task Type", "description": "The type of task.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "title": { "title": "Task Title", "description": "The title for this task.", "type": "string" }, "description": { "title": "Task Description", "description": "A human_readable description of this task.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "timing": { "title": "Event Timing", "description": "The timing under which the task is intended to occur.", "type": "object", "properties": { "on_date": { "title": "On Date Condition", "description": "The task is intended to occur on the specified date.", "type": "object", "properties": { "date": { "title": "On Date Condition", "description": "The task must occur on the specified date.", "type": "string", "format": "date-time", "pattern": "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" } }, "required": ["date"], "additionalProperties": false }, "within_date_range": { "title": "On Date Range Condition", "description": "The task is intended to occur within the specified date range.", "type": "object", "properties": { "start": { "title": "Start Date Condition", "description": "The task must occur on or after the specified date.", "type": "string", "format": "date-time", "pattern": "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, "end": { "title": "End Date Condition", "description": "The task must occur on or before the specified date.", "type": "string", "format": "date-time", "pattern": "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" } }, "required": ["start", "end"], "additionalProperties": false }, "at_frequency": { "title": "Frequency Condition", "description": "The task is intended to occur at the specified frequency.", "type": "object", "properties": { "period": { "title": "Period", "description": "The task must occur after the specified period has elapsed.", "type": "integer", "multipleOf": 1, "minimum": 1 }, "unit": { "title": "Time Unit", "description": "The unit of time for the period.", "type": "string", "pattern": "^\\S(.*\\S)?$", "enum": ["seconds", "minutes", "hours", "days", "months", "years"] } }, "required": ["period", "unit"], "additionalProperties": false } }, "additionalProperties": false }, "dependencies": { "type": "array", "minItems": 1, "items": { "title": "Task Dependency", "description": "Used to indicate that a task is dependent on another task.", "type": "object", "properties": { "task_uuid": { "title": "Task Universally Unique Identifier Reference", "description": "References a unique task by UUID.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["task_uuid"], "additionalProperties": false } }, "tasks": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/task" } }, "associated_activities": { "type": "array", "minItems": 1, "items": { "title": "Associated Activity", "description": "Identifies an individual activity to be performed as part of a task.", "type": "object", "properties": { "activity_uuid": { "title": "Activity Universally Unique Identifier Reference", "description": "References an activity defined in the list of activities.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "responsible_roles": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_role" } }, "subjects": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/assessment_subject" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["activity_uuid", "subjects"], "additionalProperties": false } }, "subjects": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/assessment_subject" } }, "responsible_roles": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_role" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "type", "title"], "additionalProperties": false }, "reviewed_controls": { "title": "Reviewed Controls and Control Objectives", "description": "Identifies the controls being assessed and their control objectives.", "$id": "#/definitions/reviewed_controls", "type": "object", "properties": { "description": { "title": "Control Objective Description", "description": "A human_readable description of control objectives.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "control_selections": { "type": "array", "minItems": 1, "items": { "title": "Assessed Controls", "description": "Identifies the controls being assessed. In the assessment plan, these are the planned controls. In the assessment results, these are the actual controls, and reflects any changes from the plan.", "type": "object", "properties": { "description": { "title": "Assessed Controls Description", "description": "A human_readable description of in_scope controls specified for assessment.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "include_all": { "title": "All", "description": "A key word to indicate all.", "type": "object", "additionalProperties": false }, "include_controls": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/select_control_by_id" } }, "exclude_controls": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/select_control_by_id" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "additionalProperties": false } }, "control_objective_selections": { "type": "array", "minItems": 1, "items": { "title": "Referenced Control Objectives", "description": "Identifies the control objectives of the assessment. In the assessment plan, these are the planned objectives. In the assessment results, these are the assessed objectives, and reflects any changes from the plan.", "type": "object", "properties": { "description": { "title": "Control Objectives Description", "description": "A human_readable description of this collection of control objectives.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "include_all": { "title": "All", "description": "A key word to indicate all.", "type": "object", "additionalProperties": false }, "include_objectives": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/select_objective_by_id" } }, "exclude_objectives": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/select_objective_by_id" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "additionalProperties": false } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["control_selections"], "additionalProperties": false }, "select_control_by_id": { "title": "Select Control", "description": "Used to select a control for inclusion/exclusion based on one or more control identifiers. A set of statement identifiers can be used to target the inclusion/exclusion to only specific control statements providing more granularity over the specific statements that are within the asessment scope.", "$id": "#/definitions/select_control_by_id", "type": "object", "properties": { "control_id": { "title": "Control Identifier Reference", "description": "A reference to a control with a corresponding id value.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "statement_ids": { "type": "array", "minItems": 1, "items": { "title": "Include Specific Statements", "description": "Used to constrain the selection to only specificity identified statements.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" } } }, "required": ["control_id"], "additionalProperties": false }, "select_objective_by_id": { "title": "Select Objective", "description": "Used to select a control objective for inclusion/exclusion based on the control objective's identifier.", "$id": "#/definitions/select_objective_by_id", "type": "object", "properties": { "objective_id": { "title": "Objective ID", "description": "Points to an assessment objective.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" } }, "required": ["objective_id"], "additionalProperties": false }, "assessment_subject_placeholder": { "title": "Assessment Subject Placeholder", "description": "Used when the assessment subjects will be determined as part of one or more other assessment activities. These assessment subjects will be recorded in the assessment results in the assessment log.", "$id": "#/definitions/assessment_subject_placeholder", "type": "object", "properties": { "uuid": { "title": "Assessment Subject Placeholder Universally Unique Identifier", "description": "Uniquely identifies a set of assessment subjects that will be identified by a task or an activity that is part of a task.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "description": { "title": "Assessment Subject Placeholder Description", "description": "A human_readable description of intent of this assessment subject placeholder.", "type": "string" }, "sources": { "type": "array", "minItems": 1, "items": { "title": "Assessment Subject Source", "description": "Assessment subjects will be identified while conducting the referenced activity_instance.", "type": "object", "properties": { "task_uuid": { "title": "Task Universally Unique Identifier", "description": "Uniquely identifies an assessment activity to be performed as part of the event. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. A UUID should be consistently used for this schedule across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" } }, "required": ["task_uuid"], "additionalProperties": false } }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "sources"], "additionalProperties": false }, "assessment_subject": { "title": "Subject of Assessment", "description": "Identifies system elements being assessed, such as components, inventory items, and locations. In the assessment plan, this identifies a planned assessment subject. In the assessment results this is an actual assessment subject, and reflects any changes from the plan. exactly what will be the focus of this assessment. Any subjects not identified in this way are out_of_scope.", "$id": "#/definitions/assessment_subject", "type": "object", "properties": { "type": { "$id": "subject_type", "title": "Subject Type", "description": "Indicates the type of assessment subject, such as a component, inventory, item, location, or party represented by this selection statement.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "description": { "title": "Include Subjects Description", "description": "A human_readable description of the collection of subjects being included in this assessment.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "include_all": { "title": "All", "description": "A key word to indicate all.", "type": "object", "additionalProperties": false }, "include_subjects": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/select_subject_by_id" } }, "exclude_subjects": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/select_subject_by_id" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["type"], "additionalProperties": false }, "select_subject_by_id": { "title": "Select Assessment Subject", "description": "Identifies a set of assessment subjects to include/exclude by UUID.", "$id": "#/definitions/select_subject_by_id", "type": "object", "properties": { "subject_uuid": { "title": "Subject Universally Unique Identifier Reference", "description": "A pointer to a component, inventory_item, location, party, user, or resource using it's UUID.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "type": { "$id": "subject_uuid_ref_type", "title": "Subject Universally Unique Identifier Reference Type", "description": "Used to indicate the type of object pointed to by the uuid_ref within a subject.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["subject_uuid", "type"], "additionalProperties": false }, "subject_reference": { "title": "Identifies the Subject", "description": "A pointer to a resource based on its universally unique identifier (UUID). Use type to indicate whether the identified resource is a component, inventory item, location, user, or something else.", "$id": "#/definitions/subject_reference", "type": "object", "properties": { "subject_uuid": { "title": "Subject Universally Unique Identifier Reference", "description": "A pointer to a component, inventory_item, location, party, user, or resource using it's UUID.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "type": { "$id": "subject_uuid_reference_type", "title": "Subject Universally Unique Identifier Reference Type", "description": "Used to indicate the type of object pointed to by the uuid_ref within a subject.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "title": { "title": "Subject Reference Title", "description": "The title or name for the referenced subject.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["subject_uuid", "type"], "additionalProperties": false }, "assessment_assets": { "title": "Assessment Assets", "description": "Identifies the assets used to perform this assessment, such as the assessment team, scanning tools, and assumptions.", "$id": "#/definitions/assessment_assets", "type": "object", "properties": { "components": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/system_component" } }, "assessment_platforms": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/assessment_platform" } } }, "required": ["assessment_platforms"], "additionalProperties": false }, "assessment_platform": { "$id": "#/definitions/assessment_platform", "title": "Assessment Platform", "description": "Used to represent the toolset used to perform aspects of the assessment.", "type": "object", "properties": { "uuid": { "title": "Assessment Platform Universally Unique Identifier", "description": "Uniquely identifies this assessment Platform.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "title": { "title": "Assessment Platform Title", "description": "The title or name for the assessment platform.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "uses_components": { "type": "array", "minItems": 1, "items": { "title": "Uses Component", "description": "The set of components that are used by the assessment platform.", "type": "object", "properties": { "component_uuid": { "title": "Component Universally Unique Identifier Reference", "description": "A reference to a component that is implemented as part of an inventory item.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "responsible_parties": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_party" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["component_uuid"], "additionalProperties": false } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid"], "additionalProperties": false }, "finding_target": { "title": "Objective Status", "description": "Captures an assessor's conclusions regarding the degree to which an objective is satisfied.", "$id": "#/definitions/finding_target", "type": "object", "properties": { "type": { "title": "Finding Target Type", "description": "Identifies the type of the target.", "type": "string", "pattern": "^\\S(.*\\S)?$", "enum": ["statement_id", "objective_id"] }, "target_id": { "title": "Finding Target Identifier Reference", "description": "Identifies the specific target qualified by the type.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "title": { "title": "Objective Status Title", "description": "The title for this objective status.", "type": "string" }, "description": { "title": "Objective Status Description", "description": "A human_readable description of the assessor's conclusions regarding the degree to which an objective is satisfied.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "status": { "title": "Objective Status", "description": "A determination of if the objective is satisfied or not within a given system.", "type": "object", "properties": { "state": { "title": "Objective Status State", "description": "An indication as to whether the objective is satisfied or not.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$", "enum": ["satisfied", "not_satisfied"] }, "reason": { "title": "Objective Status Reason", "description": "The reason the objective was given it's status.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["state"], "additionalProperties": false }, "implementation_status": { "$ref": "#/definitions/implementation_status" }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["type", "target_id", "status"], "additionalProperties": false }, "observation": { "title": "Observation", "description": "Describes an individual observation.", "$id": "#/definitions/observation", "type": "object", "properties": { "uuid": { "title": "Observation Universally Unique Identifier", "description": "Uniquely identifies this observation. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given observation across revisions.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "title": { "title": "Observation Title", "description": "The title for this observation.", "type": "string" }, "description": { "title": "Observation Description", "description": "A human_readable description of this assessment observation.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "methods": { "type": "array", "minItems": 1, "items": { "title": "Observation Method", "description": "Identifies how the observation was made.", "type": "string", "pattern": "^\\S(.*\\S)?$" } }, "types": { "type": "array", "minItems": 1, "items": { "title": "Observation Type", "description": "Identifies the nature of the observation. More than one may be used to further qualify and enable filtering.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" } }, "origins": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/origin" } }, "subjects": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/subject_reference" } }, "relevant_evidence": { "type": "array", "minItems": 1, "items": { "title": "Relevant Evidence", "description": "Links this observation to relevant evidence.", "type": "object", "properties": { "href": { "title": "Relevant Evidence Reference", "description": ">A resolvable URL reference to relevant evidence.", "type": "string", "format": "uri-reference" }, "description": { "title": "Relevant Evidence Description", "description": "A human_readable description of this evidence.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["description"], "additionalProperties": false } }, "collected": { "title": "collected field", "description": "Date/time stamp identifying when the finding information was collected.", "type": "string", "format": "date-time", "pattern": "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, "expires": { "title": "expires field", "description": "Date/time identifying when the finding information is out_of_date and no longer valid. Typically used with continuous assessment scenarios.", "type": "string", "format": "date-time", "pattern": "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "description", "methods", "collected"], "additionalProperties": false }, "origin": { "title": "Origin", "description": "Identifies the source of the finding, such as a tool, interviewed person, or activity.", "$id": "#/definitions/origin", "type": "object", "properties": { "actors": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/origin_actor" } }, "related_tasks": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/related_task" } } }, "required": ["actors"], "additionalProperties": false }, "origin_actor": { "title": "Originating Actor", "description": "The actor that produces an observation, a finding, or a risk. One or more actor type can be used to specify a person that is using a tool.", "$id": "#/definitions/origin_actor", "type": "object", "properties": { "type": { "title": "Actor Type", "description": "The kind of actor.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$", "enum": ["tool", "assessment_platform", "party"] }, "actor_uuid": { "title": "Actor Universally Unique Identifier Reference", "description": "A pointer to the tool or person based on the associated type.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "role_id": { "title": "Actor Role", "description": "For a party, this can optionally be used to specify the role the actor was performing.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } } }, "required": ["type", "actor_uuid"], "additionalProperties": false }, "related_task": { "title": "Task Reference", "description": "Identifies an individual task for which the containing object is a consequence of.", "$id": "#/definitions/related_task", "type": "object", "properties": { "task_uuid": { "title": "Task Universally Unique Identifier Reference", "description": "References a unique task by UUID.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "responsible_parties": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_party" } }, "subjects": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/assessment_subject" } }, "identified_subject": { "title": "Identified Subject", "description": "Used to detail assessment subjects that were identfied by this task.", "type": "object", "properties": { "subject_placeholder_uuid": { "title": "Assessment Subject Placeholder Universally Unique Identifier Reference", "description": "References a unique assessment subject placeholder defined by this task.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "subjects": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/assessment_subject" } } }, "required": ["subject_placeholder_uuid", "subjects"], "additionalProperties": false }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["task_uuid"], "additionalProperties": false }, "threat_id": { "title": "Threat ID", "description": "A pointer, by ID, to an externally_defined threat.", "$id": "#/definitions/threat_id", "type": "object", "properties": { "system": { "title": "Threat Type Identification System", "description": "Specifies the source of the threat information.", "type": "string", "format": "uri" }, "href": { "title": "Threat Information Resource Reference", "description": "An optional location for the threat data, from which this ID originates.", "type": "string", "format": "uri-reference" }, "id": { "type": "string" } }, "required": ["id", "system"], "additionalProperties": false }, "risk": { "title": "Identified Risk", "description": "An identified risk.", "$id": "#/definitions/risk", "type": "object", "properties": { "uuid": { "title": "Risk Universally Unique Identifier", "description": "Uniquely identifies this risk. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given risk across revisions.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "title": { "title": "Risk Title", "description": "The title for this risk.", "type": "string" }, "description": { "title": "Risk Description", "description": "A human_readable summary of the identified risk, to include a statement of how the risk impacts the system.", "type": "string" }, "statement": { "title": "Risk Statement", "description": "An summary of impact for how the risk affects the system.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "status": { "title": "Status", "description": "Describes the status of the associated risk.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "origins": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/origin" } }, "threat_ids": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/threat_id" } }, "characterizations": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/characterization" } }, "mitigating_factors": { "type": "array", "minItems": 1, "items": { "title": "Mitigating Factor", "description": "Describes an existing mitigating factor that may affect the overall determination of the risk, with an optional link to an implementation statement in the SSP.", "type": "object", "properties": { "uuid": { "title": "Mitigating Factor Universally Unique Identifier", "description": "Uniquely identifies this mitigating factor. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given mitigating factor across revisions.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "implementation_uuid": { "title": "Implementation UUID", "description": "Points to an implementation statement in the SSP.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "description": { "title": "Mitigating Factor Description", "description": "A human_readable description of this mitigating factor.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "subjects": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/subject_reference" } } }, "required": ["uuid", "description"], "additionalProperties": false } }, "deadline": { "title": "Risk Resolution Deadline", "description": "The date/time by which the risk must be resolved.", "type": "string", "format": "date-time", "pattern": "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, "remediations": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/response" } }, "risk_log": { "title": "Risk Log", "description": "A log of all risk_related tasks taken.", "type": "object", "properties": { "entries": { "type": "array", "minItems": 1, "items": { "title": "Risk Log Entry", "description": "Identifies an individual risk response that occurred as part of managing an identified risk.", "type": "object", "properties": { "uuid": { "title": "Risk Log Entry Universally Unique Identifier", "description": "Uniquely identifies a risk log entry. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. A UUID should be consistently used for this schedule across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "title": { "title": "Title", "description": "The title for this risk log entry.", "type": "string" }, "description": { "title": "Risk Task Description", "description": "A human_readable description of what was done regarding the risk.", "type": "string" }, "start": { "title": "Start", "description": "Identifies the start date and time of the event.", "type": "string", "format": "date-time", "pattern": "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, "end": { "title": "End", "description": "Identifies the end date and time of the event. If the event is a point in time, the start and end will be the same date and time.", "type": "string", "format": "date-time", "pattern": "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "logged_by": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/logged_by" } }, "status_change": { "$ref": "#/definitions/risk_status" }, "related_responses": { "type": "array", "minItems": 1, "items": { "title": "Risk Response Reference", "description": "Identifies an individual risk response that this log entry is for.", "type": "object", "properties": { "response_uuid": { "title": "Response Universally Unique Identifier Reference", "description": "References a unique risk response by UUID.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "related_tasks": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/related_task" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["response_uuid"], "additionalProperties": false } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "start"], "additionalProperties": false } } }, "required": ["entries"], "additionalProperties": false }, "related_observations": { "type": "array", "minItems": 1, "items": { "title": "Related Observation", "description": "Relates the finding to a set of referenced observations that were used to determine the finding.", "type": "object", "properties": { "observation_uuid": { "title": "Observation Universally Unique Identifier Reference", "description": "References an observation defined in the list of observations.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" } }, "required": ["observation_uuid"], "additionalProperties": false } } }, "required": ["uuid", "title", "description", "statement", "status"], "additionalProperties": false }, "logged_by": { "title": "Logged By", "description": "Used to indicate who created a log entry in what role.", "$id": "#/definitions/logged_by", "type": "object", "properties": { "party_uuid": { "title": "Party UUID Reference", "description": "A pointer to the party who is making the log entry.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "role_id": { "title": "Actor Role", "description": "A point to the role_id of the role in which the party is making the log entry.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" } }, "required": ["party_uuid"], "additionalProperties": false }, "risk_status": { "title": "Risk Status", "description": "Describes the status of the associated risk.", "$id": "#/definitions/risk_status", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "characterization": { "title": "Characterization", "description": "A collection of descriptive data about the containing object from a specific origin.", "$id": "#/definitions/characterization", "type": "object", "properties": { "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "origin": { "$ref": "#/definitions/origin" }, "facets": { "type": "array", "minItems": 1, "items": { "title": "Facet", "description": "An individual characteristic that is part of a larger set produced by the same actor.", "type": "object", "properties": { "name": { "title": "Facet Name", "description": "The name of the risk metric within the specified system.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "system": { "title": "Naming System", "description": "Specifies the naming system under which this risk metric is organized, which allows for the same names to be used in different systems controlled by different parties. This avoids the potential of a name clash.", "type": "string", "format": "uri" }, "value": { "title": "Facet Value", "description": "Indicates the value of the facet.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["name", "system", "value"], "additionalProperties": false } } }, "required": ["origin", "facets"], "additionalProperties": false }, "response": { "title": "Risk Response", "description": "Describes either recommended or an actual plan for addressing the risk.", "$id": "#/definitions/response", "type": "object", "properties": { "uuid": { "title": "Remediation Universally Unique Identifier", "description": "Uniquely identifies this remediation. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given remediation across revisions.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "lifecycle": { "title": "Remediation Intent", "description": "Identifies whether this is a recommendation, such as from an assessor or tool, or an actual plan accepted by the system owner.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "title": { "title": "Response Title", "description": "The title for this response activity.", "type": "string" }, "description": { "title": "Response Description", "description": "A human_readable description of this response plan.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "origins": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/origin" } }, "required_assets": { "type": "array", "minItems": 1, "items": { "title": "Required Asset", "description": "Identifies an asset required to achieve remediation.", "type": "object", "properties": { "uuid": { "title": "Required Universally Unique Identifier", "description": "Uniquely identifies this required asset. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given required asset across revisions.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "subjects": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/subject_reference" } }, "title": { "title": "Title for Required Asset", "description": "The title for this required asset.", "type": "string" }, "description": { "title": "Description of Required Asset", "description": "A human_readable description of this required asset.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "description"], "additionalProperties": false } }, "tasks": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/task" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "lifecycle", "title", "description"], "additionalProperties": false }, "assessment_part": { "title": "Assessment Part", "description": "A partition of an assessment plan or results or a child of another part.", "$id": "#/definitions/assessment_part", "type": "object", "properties": { "uuid": { "title": "Part Identifier", "description": "A unique identifier for a specific part instance. This identifier's uniqueness is document scoped and is intended to be consistent for the same part across minor revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "name": { "title": "Part Name", "description": "A textual label that uniquely identifies the part's semantic type.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "ns": { "title": "Part Namespace", "description": "A namespace qualifying the part's name. This allows different organizations to associate distinct semantics with the same name.", "type": "string", "format": "uri" }, "class": { "title": "Part Class", "description": "A textual label that provides a sub_type or characterization of the part's name. This can be used to further distinguish or discriminate between the semantics of multiple parts of the same control with the same name and ns.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "title": { "title": "Part Title", "description": "A name given to the part, which may be used by a tool for display and navigation.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "prose": { "title": "Part Text", "description": "Permits multiple paragraphs, lists, tables etc.", "type": "string" }, "parts": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/assessment_part" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } } }, "required": ["name"], "additionalProperties": false }, "organization_mission_statement": { "$id": "#/definitions/organization_mission_statement", "title": "Organization Mission Statement", "type": "object", "properties": { "uuid": { "type": "string" }, "mission": { "title": "Organization Mission", "description": "A mission statement defines what line of business an organization is in, and why it exists or what purpose it serves. ", "type": "string" }, "business_functions": { "title": "Business functions", "description": "Functions carried out by an organization", "type": "array", "items": { "title": "Business Function", "description": "A Function that a business or enterprise performs", "type": "object", "properties": { "uuid": { "type": "string" }, "title": { "title": "Business Function Title", "description": "Human readable shortname for a business function", "type": "string" }, "type": { "title": "Business Function Priority", "type": "string", "enum": ["core", "support"] }, "description": { "title": "Business Function Description", "description": "Details of a business function", "type": "string" }, "links": { "type": "array", "items": { "$ref": "#/definitions/link" } } }, "required": ["title", "type", "description"] } } }, "required": ["mission"] }, "assessment_results": { "title": "Security Assessment Results (SAR)", "description": "Security assessment results, such as those provided by a FedRAMP assessor in the FedRAMP Security Assessment Report.", "$id": "#/definitions/assessment_results", "type": "object", "properties": { "uuid": { "title": "Assessment Results Universally Unique Identifier", "description": "Uniquely identifies this assessment results file. This UUID must be changed each time the content of the results changes.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "metadata": { "$ref": "#/definitions/metadata" }, "import_ap": { "$ref": "#/definitions/import_ap" }, "local_definitions": { "title": "Local Definitions", "description": "Used to define data objects that are used in the assessment plan, that do not appear in the referenced SSP.", "type": "object", "properties": { "objectives_and_methods": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/local_objective" } }, "activities": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/activity" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "additionalProperties": false }, "results": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/result" } }, "back_matter": { "$ref": "#/definitions/back_matter" } }, "required": ["uuid", "metadata", "import_ap", "results"], "additionalProperties": false }, "result": { "title": "Assessment Result", "description": "Used by the assessment results and POA&M. In the assessment results, this identifies all of the assessment observations and findings, initial and residual risks, deviations, and disposition. In the POA&M, this identifies initial and residual risks, deviations, and disposition.", "$id": "#/definitions/result", "type": "object", "properties": { "uuid": { "title": "Results Universally Unique Identifier", "description": "Uniquely identifies this set of results. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given set of results across revisions.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "title": { "title": "Results Title", "description": "The title for this set of results.", "type": "string" }, "description": { "title": "Results Description", "description": "A human_readable description of this set of test results.", "type": "string" }, "start": { "title": "start field", "description": "Date/time stamp identifying the start of the evidence collection reflected in these results.", "type": "string", "format": "date-time", "pattern": "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, "end": { "title": "end field", "description": "Date/time stamp identifying the end of the evidence collection reflected in these results. In a continuous motoring scenario, this may contain the same value as start if appropriate.", "type": "string", "format": "date-time", "pattern": "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, "prop": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "local_definitions": { "title": "Local Definitions", "description": "Used to define data objects that are used in the assessment plan, that do not appear in the referenced SSP.", "type": "object", "properties": { "components": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/system_component" } }, "inventory_items": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/inventory_item" } }, "users": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/system_user" } }, "assessment_assets": { "$ref": "#/definitions/assessment_assets" }, "tasks": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/task" } } }, "additionalProperties": false }, "reviewed_controls": { "$ref": "#/definitions/reviewed_controls" }, "attestations": { "type": "array", "minItems": 1, "items": { "title": "Attestation Statements", "description": "A set of textual statements, typically written by the assessor.", "type": "object", "properties": { "responsible_parties": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_party" } }, "parts": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/assessment_part" } } }, "required": ["parts"], "additionalProperties": false } }, "assessment_log": { "title": "Assessment Log", "description": "A log of all assessment_related actions taken.", "type": "object", "properties": { "entries": { "type": "array", "minItems": 1, "items": { "title": "Assessment Log Entry", "description": "Identifies the result of an action and/or task that occurred as part of executing an assessment plan or an assessment event that occurred in producing the assessment results.", "type": "object", "properties": { "uuid": { "title": "Assessment Log Entry Universally Unique Identifier", "description": "Uniquely identifies an assessment event. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. A UUID should be consistently used for this schedule across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "title": { "title": "Action Title", "description": "The title for this event.", "type": "string" }, "description": { "title": "Action Description", "description": "A human_readable description of this event.", "type": "string" }, "start": { "title": "Start", "description": "Identifies the start date and time of an event.", "type": "string", "format": "date-time", "pattern": "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, "end": { "title": "End", "description": "Identifies the end date and time of an event. If the event is a point in time, the start and end will be the same date and time.", "type": "string", "format": "date-time", "pattern": "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "logged_by": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/logged_by" } }, "related_tasks": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/related_task" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "start"], "additionalProperties": false } } }, "required": ["entries"], "additionalProperties": false }, "observations": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/observation" } }, "risks": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/risk" } }, "findings": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/finding" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "title", "description", "start", "reviewed_controls"], "additionalProperties": false }, "finding": { "title": "Finding", "description": "Describes an individual finding.", "$id": "#/definitions/finding", "type": "object", "properties": { "uuid": { "title": "Finding Universally Unique Identifier", "description": "Uniquely identifies this finding. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given finding across revisions.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "title": { "title": "Finding Title", "description": "The title for this finding.", "type": "string" }, "description": { "title": "Finding Description", "description": "A human_readable description of this finding.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "origins": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/origin" } }, "target": { "$ref": "#/definitions/finding_target" }, "implementation_statement_uuid": { "title": "Implementation Statement UUID", "description": "Identifies the implementation statement in the SSP to which this finding is related.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "related_observations": { "type": "array", "minItems": 1, "items": { "title": "Related Observation", "description": "Relates the finding to a set of referenced observations that were used to determine the finding.", "type": "object", "properties": { "observation_uuid": { "title": "Observation Universally Unique Identifier Reference", "description": "References an observation defined in the list of observations.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" } }, "required": ["observation_uuid"], "additionalProperties": false } }, "related_risks": { "type": "array", "minItems": 1, "items": { "title": "Associated Risk", "description": "Relates the finding to a set of referenced risks that were used to determine the finding.", "type": "object", "properties": { "risk_uuid": { "title": "Risk Universally Unique Identifier Reference", "description": "References an risk defined in the list of risks.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" } }, "required": ["risk_uuid"], "additionalProperties": false } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "title", "description", "target"], "additionalProperties": false }, "import_ap": { "title": "Import Assessment Plan", "description": "Used by assessment_results to import information about the original plan for assessing the system.", "$id": "#/definitions/import_ap", "type": "object", "properties": { "href": { "title": "Assessment Plan Reference", "description": ">A resolvable URL reference to the assessment plan governing the assessment activities.", "type": "string", "format": "uri-reference" }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["href"], "additionalProperties": false }, "plan_of_action_and_milestones": { "title": "Plan of Action and Milestones (POA&M)", "description": "A plan of action and milestones which identifies initial and residual risks, deviations, and disposition, such as those required by FedRAMP.", "$id": "#/definitions/plan_of_action_and_milestones", "type": "object", "properties": { "uuid": { "title": "POA&M Universally Unique Identifier", "description": "Uniquely identifies this POA&M. This UUID must be changed each time the content of the POA&M changes.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "metadata": { "$ref": "#/definitions/metadata" }, "import_ssp": { "$ref": "#/definitions/import_ssp" }, "system_id": { "$ref": "#/definitions/system_id" }, "local_definitions": { "$ref": "#/definitions/poam_local_definitions" }, "observations": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/observation" } }, "risks": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/risk" } }, "poam_items": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/poam_item" } }, "back_matter": { "$ref": "#/definitions/back_matter" } }, "required": ["uuid", "metadata", "poam_items"], "additionalProperties": false }, "poam_local_definitions": { "title": "Local Definitions", "description": "Allows components, and inventory_items to be defined within the POA&M for circumstances where no OSCAL_based SSP exists, or is not delivered with the POA&M.", "$id": "#/definitions/poam_local_definitions", "type": "object", "properties": { "components": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/system_component" } }, "inventory_items": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/inventory_item" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "additionalProperties": false }, "poam_item": { "title": "POA&M Item", "description": "Describes an individual POA&M item.", "$id": "#/definitions/poam_item", "type": "object", "properties": { "uuid": { "title": "POA&M Item Universally Unique Identifier", "description": "Uniquely identifies the POA&M entry. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. A UUID should be consistently used for a given POA&M item across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "title": { "title": "POA&M Item Title", "description": "The title or name for this POA&M item .", "type": "string" }, "description": { "title": "POA&M Item Description", "description": "A human_readable description of POA&M item.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "origins": { "type": "array", "minItems": 1, "items": { "title": "Origin", "description": "Identifies the source of the finding, such as a tool or person.", "type": "object", "properties": { "actors": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/origin_actor" } } }, "required": ["actors"], "additionalProperties": false } }, "related_observations": { "type": "array", "minItems": 1, "items": { "title": "Related Observation", "description": "Relates the poam_item to a set of referenced observations that were used to determine the finding.", "type": "object", "properties": { "observation_uuid": { "title": "Observation Universally Unique Identifier Reference", "description": "References an observation defined in the list of observations.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" } }, "required": ["observation_uuid"], "additionalProperties": false } }, "related_risks": { "type": "array", "minItems": 1, "items": { "title": "Associated Risk", "description": "Relates the finding to a set of referenced risks that were used to determine the finding.", "type": "object", "properties": { "risk_uuid": { "title": "Risk Universally Unique Identifier Reference", "description": "References an risk defined in the list of risks.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" } }, "required": ["risk_uuid"], "additionalProperties": false } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["title", "description"], "additionalProperties": false } }, "oneOf": [{ "properties": { "catalog": { "$ref": "#/definitions/catalog" } }, "required": ["catalog"], "additionalProperties": false, "maxProperties": 1 }, { "properties": { "profile": { "$ref": "#/definitions/profile" } }, "required": ["profile"], "additionalProperties": false, "maxProperties": 1 }, { "properties": { "component_definition": { "$ref": "#/definitions/component_definition" } }, "required": ["component_definition"], "additionalProperties": false, "maxProperties": 1 }, { "properties": { "system_security_plan": { "$ref": "#/definitions/system_security_plan" } }, "required": ["system_security_plan"], "additionalProperties": false, "maxProperties": 1 }, { "properties": { "assessment_plan": { "$ref": "#/definitions/assessment_plan" } }, "required": ["assessment_plan"], "additionalProperties": false, "maxProperties": 1 }, { "properties": { "assessment_results": { "$ref": "#/definitions/assessment_results" } }, "required": ["assessment_results"], "additionalProperties": false, "maxProperties": 1 }, { "properties": { "plan_of_action_and_milestones": { "$ref": "#/definitions/plan_of_action_and_milestones" } }, "required": ["plan_of_action_and_milestones"], "additionalProperties": false, "maxProperties": 1 }] }; const schema23 = { "title": "Catalog", "description": "A collection of controls.", "$id": "#/definitions/catalog", "type": "object", "properties": { "uuid": { "title": "Catalog Universally Unique Identifier", "description": "A globally unique identifier for this catalog instance. This UUID should be changed when this document is revised.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "metadata": { "$ref": "#/definitions/metadata" }, "params": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/parameter" } }, "controls": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/control" } }, "groups": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/group" } }, "back_matter": { "$ref": "#/definitions/back_matter" } }, "required": ["uuid", "metadata"], "additionalProperties": false }; const pattern0 = new RegExp("^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$", "u"); const schema24 = { "title": "Publication metadata", "description": "Provides information about the publication and availability of the containing document.", "$id": "#/definitions/metadata", "type": "object", "properties": { "title": { "title": "Document Title", "description": "A name given to the document, which may be used by a tool for display and navigation.", "type": "string" }, "published": { "$ref": "#/definitions/published" }, "last_modified": { "$ref": "#/definitions/last_modified" }, "version": { "$ref": "#/definitions/version" }, "oscal_version": { "$ref": "#/definitions/oscal_version" }, "revisions": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/revision" } }, "document_ids": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/document_id" } }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "roles": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/role" } }, "locations": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/location" } }, "parties": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/party" } }, "responsible_parties": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_party" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["title", "last_modified", "version", "oscal_version"], "additionalProperties": false }; const schema25 = { "title": "Publication Timestamp", "description": "The date and time the document was published. The date-time value must be formatted according to RFC 3339 with full time and time zone included.", "$id": "#/definitions/published", "type": "string", "format": "date-time", "pattern": "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }; const schema26 = { "title": "Last Modified Timestamp", "description": "The date and time the document was last modified. The date-time value must be formatted according to RFC 3339 with full time and time zone included.", "$id": "#/definitions/last_modified", "type": "string", "format": "date-time", "pattern": "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }; const schema27 = { "title": "Document Version", "description": "A string used to distinguish the current version of the document from other previous (and future) versions.", "$id": "#/definitions/version", "type": "string", "pattern": "^\\S(.*\\S)?$" }; const schema28 = { "title": "OSCAL version", "description": "The OSCAL model version the document was authored against.", "$id": "#/definitions/oscal_version", "type": "string", "pattern": "^\\S(.*\\S)?$" }; const schema38 = { "title": "Document Identifier", "description": "A document identifier qualified by an identifier scheme. A document identifier provides a globally unique identifier for a group of documents that are to be treated as different versions of the same document. If this element does not appear, or if the value of this element is empty, the value of \"document_id\" is equal to the value of the \"uuid\" flag of the top_level root element.", "$id": "#/definitions/document_id", "type": "object", "properties": { "scheme": { "title": "Document Identification Scheme", "description": "Qualifies the kind of document identifier using a URI. If the scheme is not provided the value of the element will be interpreted as a string of characters.", "type": "string", "format": "uri" }, "identifier": { "type": "string" } }, "required": ["identifier"], "additionalProperties": false }; const schema36 = { "title": "Link", "description": "A reference to a local or remote resource", "$id": "#/definitions/link", "type": "object", "properties": { "href": { "title": "Hypertext Reference", "description": "A resolvable URL reference to a resource.", "type": "string", "format": "uri-reference" }, "rel": { "title": "Relation", "description": "Describes the type of relationship provided by the link. This can be an indicator of the link's purpose.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "media_type": { "title": "Media Type", "description": "Specifies a media type as defined by the Internet Assigned Numbers Authority (IANA) Media Types Registry.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "text": { "title": "Link Text", "description": "A textual label to associate with the link, which may be used for presentation in a tool.", "type": "string" } }, "required": ["href"], "additionalProperties": false }; const schema35 = { "title": "Remarks", "description": "Additional commentary on the containing object.", "$id": "#/definitions/remarks", "type": "string" }; const func8 = Object.prototype.hasOwnProperty; const formats0 = { "_items": ["require(\"ajv-formats/dist/formats\").", { "str": "fullFormats" }, ""] }["date-time"]; const formats8 = { "_items": ["require(\"ajv-formats/dist/formats\").", { "str": "fullFormats" }, ""] }.uri; const formats10 = /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i; const pattern1 = new RegExp("^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$", "u"); const pattern3 = new RegExp("^\\S(.*\\S)?$", "u"); const pattern9 = new RegExp("^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$", "u"); const schema29 = { "title": "Revision History Entry", "description": "An entry in a sequential list of revisions to the containing document in reverse chronological order (i.e., most recent previous revision first).", "$id": "#/definitions/revision", "type": "object", "properties": { "title": { "title": "Document Title", "description": "A name given to the document revision, which may be used by a tool for display and navigation.", "type": "string" }, "published": { "$ref": "#/definitions/published" }, "last_modified": { "$ref": "#/definitions/last_modified" }, "version": { "$ref": "#/definitions/version" }, "oscal_version": { "$ref": "#/definitions/oscal_version" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "additionalProperties": false }; const schema34 = { "title": "Property", "description": "An attribute, characteristic, or quality of the containing object expressed as a namespace qualified name/value pair. The value of a property is a simple scalar value, which may be expressed as a list of values.", "$id": "#/definitions/property", "type": "object", "properties": { "name": { "title": "Property Name", "description": "A textual label that uniquely identifies a specific attribute, characteristic, or quality of the property's containing object.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "uuid": { "title": "Property Universally Unique Identifier", "description": "A unique identifier that can be used to reference this property elsewhere in an OSCAL document. A UUID should be consistently used for a given location across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "ns": { "title": "Property Namespace", "description": "A namespace qualifying the property's name. This allows different organizations to associate distinct semantics with the same name.", "type": "string", "format": "uri" }, "value": { "title": "Property Value", "description": "Indicates the value of the attribute, characteristic, or quality.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "class": { "title": "Property Class", "description": "A textual label that provides a sub_type or characterization of the property's name. This can be used to further distinguish or discriminate between the semantics of multiple properties of the same object with the same name and ns.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["name", "value"], "additionalProperties": false }; function validate24(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/property" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if (((data.name === undefined) && (missing0 = "name")) || ((data.value === undefined) && (missing0 = "value"))) { validate24.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!((((((key0 === "name") || (key0 === "uuid")) || (key0 === "ns")) || (key0 === "value")) || (key0 === "class")) || (key0 === "remarks"))) { validate24.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.name !== undefined) { let data0 = data.name; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern9.test(data0)) { validate24.errors = [{ instancePath: instancePath + "/name", schemaPath: "#/properties/name/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate24.errors = [{ instancePath: instancePath + "/name", schemaPath: "#/properties/name/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.uuid !== undefined) { let data1 = data.uuid; const _errs4 = errors; if (errors === _errs4) { if (typeof data1 === "string") { if (!pattern0.test(data1)) { validate24.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate24.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.ns !== undefined) { let data2 = data.ns; const _errs6 = errors; if (errors === _errs6) { if (errors === _errs6) { if (typeof data2 === "string") { if (!(formats8(data2))) { validate24.errors = [{ instancePath: instancePath + "/ns", schemaPath: "#/properties/ns/format", keyword: "format", params: { format: "uri" }, message: "must match format \"" + "uri" + "\"" }]; return false; } } else { validate24.errors = [{ instancePath: instancePath + "/ns", schemaPath: "#/properties/ns/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.value !== undefined) { let data3 = data.value; const _errs8 = errors; if (errors === _errs8) { if (typeof data3 === "string") { if (!pattern3.test(data3)) { validate24.errors = [{ instancePath: instancePath + "/value", schemaPath: "#/properties/value/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate24.errors = [{ instancePath: instancePath + "/value", schemaPath: "#/properties/value/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs8 === errors; } else { var valid0 = true; } if (valid0) { if (data.class !== undefined) { let data4 = data.class; const _errs10 = errors; if (errors === _errs10) { if (typeof data4 === "string") { if (!pattern9.test(data4)) { validate24.errors = [{ instancePath: instancePath + "/class", schemaPath: "#/properties/class/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate24.errors = [{ instancePath: instancePath + "/class", schemaPath: "#/properties/class/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs10 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs12 = errors; if (typeof data.remarks !== "string") { validate24.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs12 === errors; } else { var valid0 = true; } } } } } } } } } else { validate24.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate24.errors = vErrors; return errors === 0; } function validate23(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/revision" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { const _errs1 = errors; for (const key0 in data) { if (!((((((((key0 === "title") || (key0 === "published")) || (key0 === "last_modified")) || (key0 === "version")) || (key0 === "oscal_version")) || (key0 === "props")) || (key0 === "links")) || (key0 === "remarks"))) { validate23.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.title !== undefined) { const _errs2 = errors; if (typeof data.title !== "string") { validate23.errors = [{ instancePath: instancePath + "/title", schemaPath: "#/properties/title/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.published !== undefined) { let data1 = data.published; const _errs4 = errors; const _errs5 = errors; if (errors === _errs5) { if (errors === _errs5) { if (typeof data1 === "string") { if (!pattern1.test(data1)) { validate23.errors = [{ instancePath: instancePath + "/published", schemaPath: "#/definitions/published/pattern", keyword: "pattern", params: { pattern: "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, message: "must match pattern \"" + "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" + "\"" }]; return false; } else { if (!(formats0.validate(data1))) { validate23.errors = [{ instancePath: instancePath + "/published", schemaPath: "#/definitions/published/format", keyword: "format", params: { format: "date-time" }, message: "must match format \"" + "date-time" + "\"" }]; return false; } } } else { validate23.errors = [{ instancePath: instancePath + "/published", schemaPath: "#/definitions/published/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.last_modified !== undefined) { let data2 = data.last_modified; const _errs7 = errors; const _errs8 = errors; if (errors === _errs8) { if (errors === _errs8) { if (typeof data2 === "string") { if (!pattern1.test(data2)) { validate23.errors = [{ instancePath: instancePath + "/last_modified", schemaPath: "#/definitions/last_modified/pattern", keyword: "pattern", params: { pattern: "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, message: "must match pattern \"" + "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" + "\"" }]; return false; } else { if (!(formats0.validate(data2))) { validate23.errors = [{ instancePath: instancePath + "/last_modified", schemaPath: "#/definitions/last_modified/format", keyword: "format", params: { format: "date-time" }, message: "must match format \"" + "date-time" + "\"" }]; return false; } } } else { validate23.errors = [{ instancePath: instancePath + "/last_modified", schemaPath: "#/definitions/last_modified/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid0 = _errs7 === errors; } else { var valid0 = true; } if (valid0) { if (data.version !== undefined) { let data3 = data.version; const _errs10 = errors; const _errs11 = errors; if (errors === _errs11) { if (typeof data3 === "string") { if (!pattern3.test(data3)) { validate23.errors = [{ instancePath: instancePath + "/version", schemaPath: "#/definitions/version/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate23.errors = [{ instancePath: instancePath + "/version", schemaPath: "#/definitions/version/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs10 === errors; } else { var valid0 = true; } if (valid0) { if (data.oscal_version !== undefined) { let data4 = data.oscal_version; const _errs13 = errors; const _errs14 = errors; if (errors === _errs14) { if (typeof data4 === "string") { if (!pattern3.test(data4)) { validate23.errors = [{ instancePath: instancePath + "/oscal_version", schemaPath: "#/definitions/oscal_version/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate23.errors = [{ instancePath: instancePath + "/oscal_version", schemaPath: "#/definitions/oscal_version/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs13 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data5 = data.props; const _errs16 = errors; if (errors === _errs16) { if (Array.isArray(data5)) { if (data5.length < 1) { validate23.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid5 = true; const len0 = data5.length; for (let i0 = 0; i0 < len0; i0++) { const _errs18 = errors; if (!(validate24(data5[i0], { instancePath: instancePath + "/props/" + i0, parentData: data5, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid5 = _errs18 === errors; if (!valid5) { break; } } } } else { validate23.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs16 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data7 = data.links; const _errs19 = errors; if (errors === _errs19) { if (Array.isArray(data7)) { if (data7.length < 1) { validate23.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid6 = true; const len1 = data7.length; for (let i1 = 0; i1 < len1; i1++) { let data8 = data7[i1]; const _errs21 = errors; const _errs22 = errors; if (errors === _errs22) { if (data8 && typeof data8 == "object" && !Array.isArray(data8)) { let missing0; if ((data8.href === undefined) && (missing0 = "href")) { validate23.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs24 = errors; for (const key1 in data8) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate23.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs24 === errors) { if (data8.href !== undefined) { let data9 = data8.href; const _errs25 = errors; if (errors === _errs25) { if (errors === _errs25) { if (typeof data9 === "string") { if (!(formats10.test(data9))) { validate23.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate23.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid8 = _errs25 === errors; } else { var valid8 = true; } if (valid8) { if (data8.rel !== undefined) { let data10 = data8.rel; const _errs27 = errors; if (errors === _errs27) { if (typeof data10 === "string") { if (!pattern9.test(data10)) { validate23.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate23.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid8 = _errs27 === errors; } else { var valid8 = true; } if (valid8) { if (data8.media_type !== undefined) { let data11 = data8.media_type; const _errs29 = errors; if (errors === _errs29) { if (typeof data11 === "string") { if (!pattern3.test(data11)) { validate23.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate23.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid8 = _errs29 === errors; } else { var valid8 = true; } if (valid8) { if (data8.text !== undefined) { const _errs31 = errors; if (typeof data8.text !== "string") { validate23.errors = [{ instancePath: instancePath + "/links/" + i1 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid8 = _errs31 === errors; } else { var valid8 = true; } } } } } } } else { validate23.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid6 = _errs21 === errors; if (!valid6) { break; } } } } else { validate23.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs19 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs33 = errors; if (typeof data.remarks !== "string") { validate23.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs33 === errors; } else { var valid0 = true; } } } } } } } } } } else { validate23.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate23.errors = vErrors; return errors === 0; } const schema40 = { "title": "Role", "description": "Defines a function assumed or expected to be assumed by a party in a specific situation.", "$id": "#/definitions/role", "type": "object", "properties": { "id": { "title": "Role Identifier", "description": "A unique identifier for a specific role instance. This identifier's uniqueness is document scoped and is intended to be consistent for the same role across minor revisions of the document.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "title": { "title": "Role Title", "description": "A name given to the role, which may be used by a tool for display and navigation.", "type": "string" }, "short_name": { "title": "Role Short Name", "description": "A short common name, abbreviation, or acronym for the role.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "description": { "title": "Role Description", "description": "A summary of the role's purpose and associated responsibilities.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["id", "title"], "additionalProperties": false }; function validate28(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/role" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if (((data.id === undefined) && (missing0 = "id")) || ((data.title === undefined) && (missing0 = "title"))) { validate28.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(((((((key0 === "id") || (key0 === "title")) || (key0 === "short_name")) || (key0 === "description")) || (key0 === "props")) || (key0 === "links")) || (key0 === "remarks"))) { validate28.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.id !== undefined) { let data0 = data.id; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern9.test(data0)) { validate28.errors = [{ instancePath: instancePath + "/id", schemaPath: "#/properties/id/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate28.errors = [{ instancePath: instancePath + "/id", schemaPath: "#/properties/id/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.title !== undefined) { const _errs4 = errors; if (typeof data.title !== "string") { validate28.errors = [{ instancePath: instancePath + "/title", schemaPath: "#/properties/title/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.short_name !== undefined) { let data2 = data.short_name; const _errs6 = errors; if (errors === _errs6) { if (typeof data2 === "string") { if (!pattern3.test(data2)) { validate28.errors = [{ instancePath: instancePath + "/short_name", schemaPath: "#/properties/short_name/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate28.errors = [{ instancePath: instancePath + "/short_name", schemaPath: "#/properties/short_name/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.description !== undefined) { const _errs8 = errors; if (typeof data.description !== "string") { validate28.errors = [{ instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs8 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data4 = data.props; const _errs10 = errors; if (errors === _errs10) { if (Array.isArray(data4)) { if (data4.length < 1) { validate28.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data4.length; for (let i0 = 0; i0 < len0; i0++) { const _errs12 = errors; if (!(validate24(data4[i0], { instancePath: instancePath + "/props/" + i0, parentData: data4, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs12 === errors; if (!valid1) { break; } } } } else { validate28.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs10 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data6 = data.links; const _errs13 = errors; if (errors === _errs13) { if (Array.isArray(data6)) { if (data6.length < 1) { validate28.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data6.length; for (let i1 = 0; i1 < len1; i1++) { let data7 = data6[i1]; const _errs15 = errors; const _errs16 = errors; if (errors === _errs16) { if (data7 && typeof data7 == "object" && !Array.isArray(data7)) { let missing1; if ((data7.href === undefined) && (missing1 = "href")) { validate28.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs18 = errors; for (const key1 in data7) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate28.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs18 === errors) { if (data7.href !== undefined) { let data8 = data7.href; const _errs19 = errors; if (errors === _errs19) { if (errors === _errs19) { if (typeof data8 === "string") { if (!(formats10.test(data8))) { validate28.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate28.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid4 = _errs19 === errors; } else { var valid4 = true; } if (valid4) { if (data7.rel !== undefined) { let data9 = data7.rel; const _errs21 = errors; if (errors === _errs21) { if (typeof data9 === "string") { if (!pattern9.test(data9)) { validate28.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate28.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs21 === errors; } else { var valid4 = true; } if (valid4) { if (data7.media_type !== undefined) { let data10 = data7.media_type; const _errs23 = errors; if (errors === _errs23) { if (typeof data10 === "string") { if (!pattern3.test(data10)) { validate28.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate28.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs23 === errors; } else { var valid4 = true; } if (valid4) { if (data7.text !== undefined) { const _errs25 = errors; if (typeof data7.text !== "string") { validate28.errors = [{ instancePath: instancePath + "/links/" + i1 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid4 = _errs25 === errors; } else { var valid4 = true; } } } } } } } else { validate28.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs15 === errors; if (!valid2) { break; } } } } else { validate28.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs13 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs27 = errors; if (typeof data.remarks !== "string") { validate28.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs27 === errors; } else { var valid0 = true; } } } } } } } } } } else { validate28.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate28.errors = vErrors; return errors === 0; } const schema43 = { "title": "Location", "description": "A location, with associated metadata that can be referenced.", "$id": "#/definitions/location", "type": "object", "properties": { "uuid": { "title": "Location Universally Unique Identifier", "description": "A unique identifier that can be used to reference this defined location elsewhere in an OSCAL document. A UUID should be consistently used for a given location across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "title": { "title": "Location Title", "description": "A name given to the location, which may be used by a tool for display and navigation.", "type": "string" }, "address": { "$ref": "#/definitions/address" }, "email_addresses": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/email_address" } }, "telephone_numbers": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/telephone_number" } }, "urls": { "type": "array", "minItems": 1, "items": { "title": "Location URL", "description": "The uniform resource locator (URL) for a web site or Internet presence associated with the location.", "type": "string", "format": "uri" } }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "address"], "additionalProperties": false }; const schema46 = { "title": "Email Address", "description": "An email address as defined by RFC 5322 Section 3.4.1.", "$id": "#/definitions/email_address", "type": "string", "format": "email", "pattern": "^.+@.+" }; const schema47 = { "title": "Telephone Number", "description": "Contact number by telephone.", "$id": "#/definitions/telephone_number", "type": "object", "properties": { "type": { "$id": "phone_type", "title": "type flag", "description": "Indicates the type of phone number.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "number": { "type": "string" } }, "required": ["number"], "additionalProperties": false }; const pattern28 = new RegExp("^.+@.+", "u"); const schema44 = { "title": "Address", "description": "A postal address for the location.", "$id": "#/definitions/address", "type": "object", "properties": { "type": { "$id": "address_type", "title": "Address Type", "description": "Indicates the type of address.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "addr_lines": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/addr_line" } }, "city": { "title": "City", "description": "City, town or geographical region for the mailing address.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "state": { "title": "State", "description": "State, province or analogous geographical region for mailing address", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "postal_code": { "title": "Postal Code", "description": "Postal or ZIP code for mailing address", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "country": { "title": "Country Code", "description": "The ISO 3166_1 alpha_2 country code for the mailing address.", "type": "string", "pattern": "^\\S(.*\\S)?$" } }, "additionalProperties": false }; const schema45 = { "title": "Address line", "description": "A single line of an address.", "$id": "#/definitions/addr_line", "type": "string", "pattern": "^\\S(.*\\S)?$" }; function validate32(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/address" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { const _errs1 = errors; for (const key0 in data) { if (!((((((key0 === "type") || (key0 === "addr_lines")) || (key0 === "city")) || (key0 === "state")) || (key0 === "postal_code")) || (key0 === "country"))) { validate32.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.type !== undefined) { let data0 = data.type; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern9.test(data0)) { validate32.errors = [{ instancePath: instancePath + "/type", schemaPath: "#/properties/type/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate32.errors = [{ instancePath: instancePath + "/type", schemaPath: "#/properties/type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.addr_lines !== undefined) { let data1 = data.addr_lines; const _errs4 = errors; if (errors === _errs4) { if (Array.isArray(data1)) { if (data1.length < 1) { validate32.errors = [{ instancePath: instancePath + "/addr_lines", schemaPath: "#/properties/addr_lines/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data1.length; for (let i0 = 0; i0 < len0; i0++) { let data2 = data1[i0]; const _errs6 = errors; const _errs7 = errors; if (errors === _errs7) { if (typeof data2 === "string") { if (!pattern3.test(data2)) { validate32.errors = [{ instancePath: instancePath + "/addr_lines/" + i0, schemaPath: "#/definitions/addr_line/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate32.errors = [{ instancePath: instancePath + "/addr_lines/" + i0, schemaPath: "#/definitions/addr_line/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid1 = _errs6 === errors; if (!valid1) { break; } } } } else { validate32.errors = [{ instancePath: instancePath + "/addr_lines", schemaPath: "#/properties/addr_lines/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.city !== undefined) { let data3 = data.city; const _errs9 = errors; if (errors === _errs9) { if (typeof data3 === "string") { if (!pattern3.test(data3)) { validate32.errors = [{ instancePath: instancePath + "/city", schemaPath: "#/properties/city/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate32.errors = [{ instancePath: instancePath + "/city", schemaPath: "#/properties/city/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs9 === errors; } else { var valid0 = true; } if (valid0) { if (data.state !== undefined) { let data4 = data.state; const _errs11 = errors; if (errors === _errs11) { if (typeof data4 === "string") { if (!pattern3.test(data4)) { validate32.errors = [{ instancePath: instancePath + "/state", schemaPath: "#/properties/state/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate32.errors = [{ instancePath: instancePath + "/state", schemaPath: "#/properties/state/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs11 === errors; } else { var valid0 = true; } if (valid0) { if (data.postal_code !== undefined) { let data5 = data.postal_code; const _errs13 = errors; if (errors === _errs13) { if (typeof data5 === "string") { if (!pattern3.test(data5)) { validate32.errors = [{ instancePath: instancePath + "/postal_code", schemaPath: "#/properties/postal_code/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate32.errors = [{ instancePath: instancePath + "/postal_code", schemaPath: "#/properties/postal_code/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs13 === errors; } else { var valid0 = true; } if (valid0) { if (data.country !== undefined) { let data6 = data.country; const _errs15 = errors; if (errors === _errs15) { if (typeof data6 === "string") { if (!pattern3.test(data6)) { validate32.errors = [{ instancePath: instancePath + "/country", schemaPath: "#/properties/country/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate32.errors = [{ instancePath: instancePath + "/country", schemaPath: "#/properties/country/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs15 === errors; } else { var valid0 = true; } } } } } } } } else { validate32.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate32.errors = vErrors; return errors === 0; } const formats18 = /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i; function validate31(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/location" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if (((data.uuid === undefined) && (missing0 = "uuid")) || ((data.address === undefined) && (missing0 = "address"))) { validate31.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(func8.call(schema43.properties, key0))) { validate31.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.uuid !== undefined) { let data0 = data.uuid; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern0.test(data0)) { validate31.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate31.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.title !== undefined) { const _errs4 = errors; if (typeof data.title !== "string") { validate31.errors = [{ instancePath: instancePath + "/title", schemaPath: "#/properties/title/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.address !== undefined) { const _errs6 = errors; if (!(validate32(data.address, { instancePath: instancePath + "/address", parentData: data, parentDataProperty: "address", rootData }))) { vErrors = vErrors === null ? validate32.errors : vErrors.concat(validate32.errors); errors = vErrors.length; } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.email_addresses !== undefined) { let data3 = data.email_addresses; const _errs7 = errors; if (errors === _errs7) { if (Array.isArray(data3)) { if (data3.length < 1) { validate31.errors = [{ instancePath: instancePath + "/email_addresses", schemaPath: "#/properties/email_addresses/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data3.length; for (let i0 = 0; i0 < len0; i0++) { let data4 = data3[i0]; const _errs9 = errors; const _errs10 = errors; if (errors === _errs10) { if (errors === _errs10) { if (typeof data4 === "string") { if (!pattern28.test(data4)) { validate31.errors = [{ instancePath: instancePath + "/email_addresses/" + i0, schemaPath: "#/definitions/email_address/pattern", keyword: "pattern", params: { pattern: "^.+@.+" }, message: "must match pattern \"" + "^.+@.+" + "\"" }]; return false; } else { if (!(formats18.test(data4))) { validate31.errors = [{ instancePath: instancePath + "/email_addresses/" + i0, schemaPath: "#/definitions/email_address/format", keyword: "format", params: { format: "email" }, message: "must match format \"" + "email" + "\"" }]; return false; } } } else { validate31.errors = [{ instancePath: instancePath + "/email_addresses/" + i0, schemaPath: "#/definitions/email_address/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid1 = _errs9 === errors; if (!valid1) { break; } } } } else { validate31.errors = [{ instancePath: instancePath + "/email_addresses", schemaPath: "#/properties/email_addresses/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs7 === errors; } else { var valid0 = true; } if (valid0) { if (data.telephone_numbers !== undefined) { let data5 = data.telephone_numbers; const _errs12 = errors; if (errors === _errs12) { if (Array.isArray(data5)) { if (data5.length < 1) { validate31.errors = [{ instancePath: instancePath + "/telephone_numbers", schemaPath: "#/properties/telephone_numbers/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid3 = true; const len1 = data5.length; for (let i1 = 0; i1 < len1; i1++) { let data6 = data5[i1]; const _errs14 = errors; const _errs15 = errors; if (errors === _errs15) { if (data6 && typeof data6 == "object" && !Array.isArray(data6)) { let missing1; if ((data6.number === undefined) && (missing1 = "number")) { validate31.errors = [{ instancePath: instancePath + "/telephone_numbers/" + i1, schemaPath: "#/definitions/telephone_number/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs17 = errors; for (const key1 in data6) { if (!((key1 === "type") || (key1 === "number"))) { validate31.errors = [{ instancePath: instancePath + "/telephone_numbers/" + i1, schemaPath: "#/definitions/telephone_number/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs17 === errors) { if (data6.type !== undefined) { let data7 = data6.type; const _errs18 = errors; if (errors === _errs18) { if (typeof data7 === "string") { if (!pattern3.test(data7)) { validate31.errors = [{ instancePath: instancePath + "/telephone_numbers/" + i1 + "/type", schemaPath: "#/definitions/telephone_number/properties/type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate31.errors = [{ instancePath: instancePath + "/telephone_numbers/" + i1 + "/type", schemaPath: "#/definitions/telephone_number/properties/type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid5 = _errs18 === errors; } else { var valid5 = true; } if (valid5) { if (data6.number !== undefined) { const _errs20 = errors; if (typeof data6.number !== "string") { validate31.errors = [{ instancePath: instancePath + "/telephone_numbers/" + i1 + "/number", schemaPath: "#/definitions/telephone_number/properties/number/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid5 = _errs20 === errors; } else { var valid5 = true; } } } } } else { validate31.errors = [{ instancePath: instancePath + "/telephone_numbers/" + i1, schemaPath: "#/definitions/telephone_number/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid3 = _errs14 === errors; if (!valid3) { break; } } } } else { validate31.errors = [{ instancePath: instancePath + "/telephone_numbers", schemaPath: "#/properties/telephone_numbers/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs12 === errors; } else { var valid0 = true; } if (valid0) { if (data.urls !== undefined) { let data9 = data.urls; const _errs22 = errors; if (errors === _errs22) { if (Array.isArray(data9)) { if (data9.length < 1) { validate31.errors = [{ instancePath: instancePath + "/urls", schemaPath: "#/properties/urls/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid6 = true; const len2 = data9.length; for (let i2 = 0; i2 < len2; i2++) { let data10 = data9[i2]; const _errs24 = errors; if (errors === _errs24) { if (errors === _errs24) { if (typeof data10 === "string") { if (!(formats8(data10))) { validate31.errors = [{ instancePath: instancePath + "/urls/" + i2, schemaPath: "#/properties/urls/items/format", keyword: "format", params: { format: "uri" }, message: "must match format \"" + "uri" + "\"" }]; return false; } } else { validate31.errors = [{ instancePath: instancePath + "/urls/" + i2, schemaPath: "#/properties/urls/items/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid6 = _errs24 === errors; if (!valid6) { break; } } } } else { validate31.errors = [{ instancePath: instancePath + "/urls", schemaPath: "#/properties/urls/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs22 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data11 = data.props; const _errs26 = errors; if (errors === _errs26) { if (Array.isArray(data11)) { if (data11.length < 1) { validate31.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid7 = true; const len3 = data11.length; for (let i3 = 0; i3 < len3; i3++) { const _errs28 = errors; if (!(validate24(data11[i3], { instancePath: instancePath + "/props/" + i3, parentData: data11, parentDataProperty: i3, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid7 = _errs28 === errors; if (!valid7) { break; } } } } else { validate31.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs26 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data13 = data.links; const _errs29 = errors; if (errors === _errs29) { if (Array.isArray(data13)) { if (data13.length < 1) { validate31.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid8 = true; const len4 = data13.length; for (let i4 = 0; i4 < len4; i4++) { let data14 = data13[i4]; const _errs31 = errors; const _errs32 = errors; if (errors === _errs32) { if (data14 && typeof data14 == "object" && !Array.isArray(data14)) { let missing2; if ((data14.href === undefined) && (missing2 = "href")) { validate31.errors = [{ instancePath: instancePath + "/links/" + i4, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" }]; return false; } else { const _errs34 = errors; for (const key2 in data14) { if (!((((key2 === "href") || (key2 === "rel")) || (key2 === "media_type")) || (key2 === "text"))) { validate31.errors = [{ instancePath: instancePath + "/links/" + i4, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs34 === errors) { if (data14.href !== undefined) { let data15 = data14.href; const _errs35 = errors; if (errors === _errs35) { if (errors === _errs35) { if (typeof data15 === "string") { if (!(formats10.test(data15))) { validate31.errors = [{ instancePath: instancePath + "/links/" + i4 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate31.errors = [{ instancePath: instancePath + "/links/" + i4 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid10 = _errs35 === errors; } else { var valid10 = true; } if (valid10) { if (data14.rel !== undefined) { let data16 = data14.rel; const _errs37 = errors; if (errors === _errs37) { if (typeof data16 === "string") { if (!pattern9.test(data16)) { validate31.errors = [{ instancePath: instancePath + "/links/" + i4 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate31.errors = [{ instancePath: instancePath + "/links/" + i4 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid10 = _errs37 === errors; } else { var valid10 = true; } if (valid10) { if (data14.media_type !== undefined) { let data17 = data14.media_type; const _errs39 = errors; if (errors === _errs39) { if (typeof data17 === "string") { if (!pattern3.test(data17)) { validate31.errors = [{ instancePath: instancePath + "/links/" + i4 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate31.errors = [{ instancePath: instancePath + "/links/" + i4 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid10 = _errs39 === errors; } else { var valid10 = true; } if (valid10) { if (data14.text !== undefined) { const _errs41 = errors; if (typeof data14.text !== "string") { validate31.errors = [{ instancePath: instancePath + "/links/" + i4 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid10 = _errs41 === errors; } else { var valid10 = true; } } } } } } } else { validate31.errors = [{ instancePath: instancePath + "/links/" + i4, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid8 = _errs31 === errors; if (!valid8) { break; } } } } else { validate31.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs29 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs43 = errors; if (typeof data.remarks !== "string") { validate31.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs43 === errors; } else { var valid0 = true; } } } } } } } } } } } } else { validate31.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate31.errors = vErrors; return errors === 0; } const schema50 = { "title": "Party (organization or person)", "description": "A responsible entity which is either a person or an organization.", "$id": "#/definitions/party", "type": "object", "properties": { "uuid": { "title": "Party Universally Unique Identifier", "description": "A unique identifier that can be used to reference this defined location elsewhere in an OSCAL document. A UUID should be consistently used for a given party across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "type": { "title": "Party Type", "description": "A category describing the kind of party the object describes.", "type": "string", "pattern": "^\\S(.*\\S)?$", "enum": ["person", "organization"] }, "name": { "title": "Party Name", "description": "The full name of the party. This is typically the legal name associated with the party.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "short_name": { "title": "Party Short Name", "description": "A short common name, abbreviation, or acronym for the party.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "external_ids": { "type": "array", "minItems": 1, "items": { "title": "Party External Identifier", "description": "An identifier for a person or organization using a designated scheme. e.g. an Open Researcher and Contributor ID (ORCID)", "type": "object", "properties": { "scheme": { "title": "External Identifier Schema", "description": "Indicates the type of external identifier.", "type": "string", "format": "uri" }, "id": { "type": "string" } }, "required": ["id", "scheme"], "additionalProperties": false } }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "email_addresses": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/email_address" } }, "telephone_numbers": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/telephone_number" } }, "addresses": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/address" } }, "location_uuids": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/location_uuid" } }, "member_of_organizations": { "type": "array", "minItems": 1, "items": { "title": "Organizational Affiliation", "description": "Identifies that the party object is a member of the organization associated with the provided UUID.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "type"], "additionalProperties": false }; const schema54 = { "title": "Location Reference", "description": "References a location defined in metadata.", "$id": "#/definitions/location_uuid", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }; const func0 = require("ajv/dist/runtime/equal").default; function validate36(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/party" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if (((data.uuid === undefined) && (missing0 = "uuid")) || ((data.type === undefined) && (missing0 = "type"))) { validate36.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(func8.call(schema50.properties, key0))) { validate36.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.uuid !== undefined) { let data0 = data.uuid; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern0.test(data0)) { validate36.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate36.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.type !== undefined) { let data1 = data.type; const _errs4 = errors; if (!((data1 === "person") || (data1 === "organization"))) { validate36.errors = [{ instancePath: instancePath + "/type", schemaPath: "#/properties/type/enum", keyword: "enum", params: { allowedValues: schema50.properties.type.enum }, message: "must be equal to one of the allowed values" }]; return false; } if (errors === _errs4) { if (typeof data1 === "string") { if (!pattern3.test(data1)) { validate36.errors = [{ instancePath: instancePath + "/type", schemaPath: "#/properties/type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate36.errors = [{ instancePath: instancePath + "/type", schemaPath: "#/properties/type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.name !== undefined) { let data2 = data.name; const _errs6 = errors; if (errors === _errs6) { if (typeof data2 === "string") { if (!pattern3.test(data2)) { validate36.errors = [{ instancePath: instancePath + "/name", schemaPath: "#/properties/name/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate36.errors = [{ instancePath: instancePath + "/name", schemaPath: "#/properties/name/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.short_name !== undefined) { let data3 = data.short_name; const _errs8 = errors; if (errors === _errs8) { if (typeof data3 === "string") { if (!pattern3.test(data3)) { validate36.errors = [{ instancePath: instancePath + "/short_name", schemaPath: "#/properties/short_name/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate36.errors = [{ instancePath: instancePath + "/short_name", schemaPath: "#/properties/short_name/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs8 === errors; } else { var valid0 = true; } if (valid0) { if (data.external_ids !== undefined) { let data4 = data.external_ids; const _errs10 = errors; if (errors === _errs10) { if (Array.isArray(data4)) { if (data4.length < 1) { validate36.errors = [{ instancePath: instancePath + "/external_ids", schemaPath: "#/properties/external_ids/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data4.length; for (let i0 = 0; i0 < len0; i0++) { let data5 = data4[i0]; const _errs12 = errors; if (errors === _errs12) { if (data5 && typeof data5 == "object" && !Array.isArray(data5)) { let missing1; if (((data5.id === undefined) && (missing1 = "id")) || ((data5.scheme === undefined) && (missing1 = "scheme"))) { validate36.errors = [{ instancePath: instancePath + "/external_ids/" + i0, schemaPath: "#/properties/external_ids/items/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs14 = errors; for (const key1 in data5) { if (!((key1 === "scheme") || (key1 === "id"))) { validate36.errors = [{ instancePath: instancePath + "/external_ids/" + i0, schemaPath: "#/properties/external_ids/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs14 === errors) { if (data5.scheme !== undefined) { let data6 = data5.scheme; const _errs15 = errors; if (errors === _errs15) { if (errors === _errs15) { if (typeof data6 === "string") { if (!(formats8(data6))) { validate36.errors = [{ instancePath: instancePath + "/external_ids/" + i0 + "/scheme", schemaPath: "#/properties/external_ids/items/properties/scheme/format", keyword: "format", params: { format: "uri" }, message: "must match format \"" + "uri" + "\"" }]; return false; } } else { validate36.errors = [{ instancePath: instancePath + "/external_ids/" + i0 + "/scheme", schemaPath: "#/properties/external_ids/items/properties/scheme/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid2 = _errs15 === errors; } else { var valid2 = true; } if (valid2) { if (data5.id !== undefined) { const _errs17 = errors; if (typeof data5.id !== "string") { validate36.errors = [{ instancePath: instancePath + "/external_ids/" + i0 + "/id", schemaPath: "#/properties/external_ids/items/properties/id/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid2 = _errs17 === errors; } else { var valid2 = true; } } } } } else { validate36.errors = [{ instancePath: instancePath + "/external_ids/" + i0, schemaPath: "#/properties/external_ids/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid1 = _errs12 === errors; if (!valid1) { break; } } } } else { validate36.errors = [{ instancePath: instancePath + "/external_ids", schemaPath: "#/properties/external_ids/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs10 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data8 = data.props; const _errs19 = errors; if (errors === _errs19) { if (Array.isArray(data8)) { if (data8.length < 1) { validate36.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid3 = true; const len1 = data8.length; for (let i1 = 0; i1 < len1; i1++) { const _errs21 = errors; if (!(validate24(data8[i1], { instancePath: instancePath + "/props/" + i1, parentData: data8, parentDataProperty: i1, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid3 = _errs21 === errors; if (!valid3) { break; } } } } else { validate36.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs19 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data10 = data.links; const _errs22 = errors; if (errors === _errs22) { if (Array.isArray(data10)) { if (data10.length < 1) { validate36.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid4 = true; const len2 = data10.length; for (let i2 = 0; i2 < len2; i2++) { let data11 = data10[i2]; const _errs24 = errors; const _errs25 = errors; if (errors === _errs25) { if (data11 && typeof data11 == "object" && !Array.isArray(data11)) { let missing2; if ((data11.href === undefined) && (missing2 = "href")) { validate36.errors = [{ instancePath: instancePath + "/links/" + i2, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" }]; return false; } else { const _errs27 = errors; for (const key2 in data11) { if (!((((key2 === "href") || (key2 === "rel")) || (key2 === "media_type")) || (key2 === "text"))) { validate36.errors = [{ instancePath: instancePath + "/links/" + i2, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs27 === errors) { if (data11.href !== undefined) { let data12 = data11.href; const _errs28 = errors; if (errors === _errs28) { if (errors === _errs28) { if (typeof data12 === "string") { if (!(formats10.test(data12))) { validate36.errors = [{ instancePath: instancePath + "/links/" + i2 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate36.errors = [{ instancePath: instancePath + "/links/" + i2 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid6 = _errs28 === errors; } else { var valid6 = true; } if (valid6) { if (data11.rel !== undefined) { let data13 = data11.rel; const _errs30 = errors; if (errors === _errs30) { if (typeof data13 === "string") { if (!pattern9.test(data13)) { validate36.errors = [{ instancePath: instancePath + "/links/" + i2 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate36.errors = [{ instancePath: instancePath + "/links/" + i2 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid6 = _errs30 === errors; } else { var valid6 = true; } if (valid6) { if (data11.media_type !== undefined) { let data14 = data11.media_type; const _errs32 = errors; if (errors === _errs32) { if (typeof data14 === "string") { if (!pattern3.test(data14)) { validate36.errors = [{ instancePath: instancePath + "/links/" + i2 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate36.errors = [{ instancePath: instancePath + "/links/" + i2 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid6 = _errs32 === errors; } else { var valid6 = true; } if (valid6) { if (data11.text !== undefined) { const _errs34 = errors; if (typeof data11.text !== "string") { validate36.errors = [{ instancePath: instancePath + "/links/" + i2 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid6 = _errs34 === errors; } else { var valid6 = true; } } } } } } } else { validate36.errors = [{ instancePath: instancePath + "/links/" + i2, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid4 = _errs24 === errors; if (!valid4) { break; } } } } else { validate36.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs22 === errors; } else { var valid0 = true; } if (valid0) { if (data.email_addresses !== undefined) { let data16 = data.email_addresses; const _errs36 = errors; if (errors === _errs36) { if (Array.isArray(data16)) { if (data16.length < 1) { validate36.errors = [{ instancePath: instancePath + "/email_addresses", schemaPath: "#/properties/email_addresses/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid7 = true; const len3 = data16.length; for (let i3 = 0; i3 < len3; i3++) { let data17 = data16[i3]; const _errs38 = errors; const _errs39 = errors; if (errors === _errs39) { if (errors === _errs39) { if (typeof data17 === "string") { if (!pattern28.test(data17)) { validate36.errors = [{ instancePath: instancePath + "/email_addresses/" + i3, schemaPath: "#/definitions/email_address/pattern", keyword: "pattern", params: { pattern: "^.+@.+" }, message: "must match pattern \"" + "^.+@.+" + "\"" }]; return false; } else { if (!(formats18.test(data17))) { validate36.errors = [{ instancePath: instancePath + "/email_addresses/" + i3, schemaPath: "#/definitions/email_address/format", keyword: "format", params: { format: "email" }, message: "must match format \"" + "email" + "\"" }]; return false; } } } else { validate36.errors = [{ instancePath: instancePath + "/email_addresses/" + i3, schemaPath: "#/definitions/email_address/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid7 = _errs38 === errors; if (!valid7) { break; } } } } else { validate36.errors = [{ instancePath: instancePath + "/email_addresses", schemaPath: "#/properties/email_addresses/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs36 === errors; } else { var valid0 = true; } if (valid0) { if (data.telephone_numbers !== undefined) { let data18 = data.telephone_numbers; const _errs41 = errors; if (errors === _errs41) { if (Array.isArray(data18)) { if (data18.length < 1) { validate36.errors = [{ instancePath: instancePath + "/telephone_numbers", schemaPath: "#/properties/telephone_numbers/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid9 = true; const len4 = data18.length; for (let i4 = 0; i4 < len4; i4++) { let data19 = data18[i4]; const _errs43 = errors; const _errs44 = errors; if (errors === _errs44) { if (data19 && typeof data19 == "object" && !Array.isArray(data19)) { let missing3; if ((data19.number === undefined) && (missing3 = "number")) { validate36.errors = [{ instancePath: instancePath + "/telephone_numbers/" + i4, schemaPath: "#/definitions/telephone_number/required", keyword: "required", params: { missingProperty: missing3 }, message: "must have required property '" + missing3 + "'" }]; return false; } else { const _errs46 = errors; for (const key3 in data19) { if (!((key3 === "type") || (key3 === "number"))) { validate36.errors = [{ instancePath: instancePath + "/telephone_numbers/" + i4, schemaPath: "#/definitions/telephone_number/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key3 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs46 === errors) { if (data19.type !== undefined) { let data20 = data19.type; const _errs47 = errors; if (errors === _errs47) { if (typeof data20 === "string") { if (!pattern3.test(data20)) { validate36.errors = [{ instancePath: instancePath + "/telephone_numbers/" + i4 + "/type", schemaPath: "#/definitions/telephone_number/properties/type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate36.errors = [{ instancePath: instancePath + "/telephone_numbers/" + i4 + "/type", schemaPath: "#/definitions/telephone_number/properties/type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid11 = _errs47 === errors; } else { var valid11 = true; } if (valid11) { if (data19.number !== undefined) { const _errs49 = errors; if (typeof data19.number !== "string") { validate36.errors = [{ instancePath: instancePath + "/telephone_numbers/" + i4 + "/number", schemaPath: "#/definitions/telephone_number/properties/number/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid11 = _errs49 === errors; } else { var valid11 = true; } } } } } else { validate36.errors = [{ instancePath: instancePath + "/telephone_numbers/" + i4, schemaPath: "#/definitions/telephone_number/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid9 = _errs43 === errors; if (!valid9) { break; } } } } else { validate36.errors = [{ instancePath: instancePath + "/telephone_numbers", schemaPath: "#/properties/telephone_numbers/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs41 === errors; } else { var valid0 = true; } if (valid0) { if (data.addresses !== undefined) { let data22 = data.addresses; const _errs51 = errors; if (errors === _errs51) { if (Array.isArray(data22)) { if (data22.length < 1) { validate36.errors = [{ instancePath: instancePath + "/addresses", schemaPath: "#/properties/addresses/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid12 = true; const len5 = data22.length; for (let i5 = 0; i5 < len5; i5++) { const _errs53 = errors; if (!(validate32(data22[i5], { instancePath: instancePath + "/addresses/" + i5, parentData: data22, parentDataProperty: i5, rootData }))) { vErrors = vErrors === null ? validate32.errors : vErrors.concat(validate32.errors); errors = vErrors.length; } var valid12 = _errs53 === errors; if (!valid12) { break; } } } } else { validate36.errors = [{ instancePath: instancePath + "/addresses", schemaPath: "#/properties/addresses/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs51 === errors; } else { var valid0 = true; } if (valid0) { if (data.location_uuids !== undefined) { let data24 = data.location_uuids; const _errs54 = errors; if (errors === _errs54) { if (Array.isArray(data24)) { if (data24.length < 1) { validate36.errors = [{ instancePath: instancePath + "/location_uuids", schemaPath: "#/properties/location_uuids/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid13 = true; const len6 = data24.length; for (let i6 = 0; i6 < len6; i6++) { let data25 = data24[i6]; const _errs56 = errors; const _errs57 = errors; if (errors === _errs57) { if (typeof data25 === "string") { if (!pattern0.test(data25)) { validate36.errors = [{ instancePath: instancePath + "/location_uuids/" + i6, schemaPath: "#/definitions/location_uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate36.errors = [{ instancePath: instancePath + "/location_uuids/" + i6, schemaPath: "#/definitions/location_uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid13 = _errs56 === errors; if (!valid13) { break; } } } } else { validate36.errors = [{ instancePath: instancePath + "/location_uuids", schemaPath: "#/properties/location_uuids/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs54 === errors; } else { var valid0 = true; } if (valid0) { if (data.member_of_organizations !== undefined) { let data26 = data.member_of_organizations; const _errs59 = errors; if (errors === _errs59) { if (Array.isArray(data26)) { if (data26.length < 1) { validate36.errors = [{ instancePath: instancePath + "/member_of_organizations", schemaPath: "#/properties/member_of_organizations/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid15 = true; const len7 = data26.length; for (let i7 = 0; i7 < len7; i7++) { let data27 = data26[i7]; const _errs61 = errors; if (errors === _errs61) { if (typeof data27 === "string") { if (!pattern0.test(data27)) { validate36.errors = [{ instancePath: instancePath + "/member_of_organizations/" + i7, schemaPath: "#/properties/member_of_organizations/items/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate36.errors = [{ instancePath: instancePath + "/member_of_organizations/" + i7, schemaPath: "#/properties/member_of_organizations/items/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid15 = _errs61 === errors; if (!valid15) { break; } } } } else { validate36.errors = [{ instancePath: instancePath + "/member_of_organizations", schemaPath: "#/properties/member_of_organizations/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs59 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs63 = errors; if (typeof data.remarks !== "string") { validate36.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs63 === errors; } else { var valid0 = true; } } } } } } } } } } } } } } } } else { validate36.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate36.errors = vErrors; return errors === 0; } const schema56 = { "title": "Responsible Party", "description": "A reference to a set of organizations or persons that have responsibility for performing a referenced role in the context of the containing object.", "$id": "#/definitions/responsible_party", "type": "object", "properties": { "role_id": { "title": "Responsible Role", "description": "The role that the party is responsible for.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "party_uuids": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/party_uuid" } }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["role_id", "party_uuids"], "additionalProperties": false }; const schema57 = { "title": "Party Reference", "description": "References a party defined in metadata.", "$id": "#/definitions/party_uuid", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }; function validate40(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/responsible_party" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if (((data.role_id === undefined) && (missing0 = "role_id")) || ((data.party_uuids === undefined) && (missing0 = "party_uuids"))) { validate40.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(((((key0 === "role_id") || (key0 === "party_uuids")) || (key0 === "props")) || (key0 === "links")) || (key0 === "remarks"))) { validate40.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.role_id !== undefined) { let data0 = data.role_id; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern9.test(data0)) { validate40.errors = [{ instancePath: instancePath + "/role_id", schemaPath: "#/properties/role_id/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate40.errors = [{ instancePath: instancePath + "/role_id", schemaPath: "#/properties/role_id/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.party_uuids !== undefined) { let data1 = data.party_uuids; const _errs4 = errors; if (errors === _errs4) { if (Array.isArray(data1)) { if (data1.length < 1) { validate40.errors = [{ instancePath: instancePath + "/party_uuids", schemaPath: "#/properties/party_uuids/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data1.length; for (let i0 = 0; i0 < len0; i0++) { let data2 = data1[i0]; const _errs6 = errors; const _errs7 = errors; if (errors === _errs7) { if (typeof data2 === "string") { if (!pattern0.test(data2)) { validate40.errors = [{ instancePath: instancePath + "/party_uuids/" + i0, schemaPath: "#/definitions/party_uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate40.errors = [{ instancePath: instancePath + "/party_uuids/" + i0, schemaPath: "#/definitions/party_uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid1 = _errs6 === errors; if (!valid1) { break; } } } } else { validate40.errors = [{ instancePath: instancePath + "/party_uuids", schemaPath: "#/properties/party_uuids/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data3 = data.props; const _errs9 = errors; if (errors === _errs9) { if (Array.isArray(data3)) { if (data3.length < 1) { validate40.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid3 = true; const len1 = data3.length; for (let i1 = 0; i1 < len1; i1++) { const _errs11 = errors; if (!(validate24(data3[i1], { instancePath: instancePath + "/props/" + i1, parentData: data3, parentDataProperty: i1, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid3 = _errs11 === errors; if (!valid3) { break; } } } } else { validate40.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs9 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data5 = data.links; const _errs12 = errors; if (errors === _errs12) { if (Array.isArray(data5)) { if (data5.length < 1) { validate40.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid4 = true; const len2 = data5.length; for (let i2 = 0; i2 < len2; i2++) { let data6 = data5[i2]; const _errs14 = errors; const _errs15 = errors; if (errors === _errs15) { if (data6 && typeof data6 == "object" && !Array.isArray(data6)) { let missing1; if ((data6.href === undefined) && (missing1 = "href")) { validate40.errors = [{ instancePath: instancePath + "/links/" + i2, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs17 = errors; for (const key1 in data6) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate40.errors = [{ instancePath: instancePath + "/links/" + i2, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs17 === errors) { if (data6.href !== undefined) { let data7 = data6.href; const _errs18 = errors; if (errors === _errs18) { if (errors === _errs18) { if (typeof data7 === "string") { if (!(formats10.test(data7))) { validate40.errors = [{ instancePath: instancePath + "/links/" + i2 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate40.errors = [{ instancePath: instancePath + "/links/" + i2 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid6 = _errs18 === errors; } else { var valid6 = true; } if (valid6) { if (data6.rel !== undefined) { let data8 = data6.rel; const _errs20 = errors; if (errors === _errs20) { if (typeof data8 === "string") { if (!pattern9.test(data8)) { validate40.errors = [{ instancePath: instancePath + "/links/" + i2 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate40.errors = [{ instancePath: instancePath + "/links/" + i2 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid6 = _errs20 === errors; } else { var valid6 = true; } if (valid6) { if (data6.media_type !== undefined) { let data9 = data6.media_type; const _errs22 = errors; if (errors === _errs22) { if (typeof data9 === "string") { if (!pattern3.test(data9)) { validate40.errors = [{ instancePath: instancePath + "/links/" + i2 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate40.errors = [{ instancePath: instancePath + "/links/" + i2 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid6 = _errs22 === errors; } else { var valid6 = true; } if (valid6) { if (data6.text !== undefined) { const _errs24 = errors; if (typeof data6.text !== "string") { validate40.errors = [{ instancePath: instancePath + "/links/" + i2 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid6 = _errs24 === errors; } else { var valid6 = true; } } } } } } } else { validate40.errors = [{ instancePath: instancePath + "/links/" + i2, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid4 = _errs14 === errors; if (!valid4) { break; } } } } else { validate40.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs12 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs26 = errors; if (typeof data.remarks !== "string") { validate40.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs26 === errors; } else { var valid0 = true; } } } } } } } } else { validate40.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate40.errors = vErrors; return errors === 0; } function validate22(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/metadata" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if (((((data.title === undefined) && (missing0 = "title")) || ((data.last_modified === undefined) && (missing0 = "last_modified"))) || ((data.version === undefined) && (missing0 = "version"))) || ((data.oscal_version === undefined) && (missing0 = "oscal_version"))) { validate22.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(func8.call(schema24.properties, key0))) { validate22.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.title !== undefined) { const _errs2 = errors; if (typeof data.title !== "string") { validate22.errors = [{ instancePath: instancePath + "/title", schemaPath: "#/properties/title/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.published !== undefined) { let data1 = data.published; const _errs4 = errors; const _errs5 = errors; if (errors === _errs5) { if (errors === _errs5) { if (typeof data1 === "string") { if (!pattern1.test(data1)) { validate22.errors = [{ instancePath: instancePath + "/published", schemaPath: "#/definitions/published/pattern", keyword: "pattern", params: { pattern: "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, message: "must match pattern \"" + "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" + "\"" }]; return false; } else { if (!(formats0.validate(data1))) { validate22.errors = [{ instancePath: instancePath + "/published", schemaPath: "#/definitions/published/format", keyword: "format", params: { format: "date-time" }, message: "must match format \"" + "date-time" + "\"" }]; return false; } } } else { validate22.errors = [{ instancePath: instancePath + "/published", schemaPath: "#/definitions/published/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.last_modified !== undefined) { let data2 = data.last_modified; const _errs7 = errors; const _errs8 = errors; if (errors === _errs8) { if (errors === _errs8) { if (typeof data2 === "string") { if (!pattern1.test(data2)) { validate22.errors = [{ instancePath: instancePath + "/last_modified", schemaPath: "#/definitions/last_modified/pattern", keyword: "pattern", params: { pattern: "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, message: "must match pattern \"" + "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" + "\"" }]; return false; } else { if (!(formats0.validate(data2))) { validate22.errors = [{ instancePath: instancePath + "/last_modified", schemaPath: "#/definitions/last_modified/format", keyword: "format", params: { format: "date-time" }, message: "must match format \"" + "date-time" + "\"" }]; return false; } } } else { validate22.errors = [{ instancePath: instancePath + "/last_modified", schemaPath: "#/definitions/last_modified/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid0 = _errs7 === errors; } else { var valid0 = true; } if (valid0) { if (data.version !== undefined) { let data3 = data.version; const _errs10 = errors; const _errs11 = errors; if (errors === _errs11) { if (typeof data3 === "string") { if (!pattern3.test(data3)) { validate22.errors = [{ instancePath: instancePath + "/version", schemaPath: "#/definitions/version/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate22.errors = [{ instancePath: instancePath + "/version", schemaPath: "#/definitions/version/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs10 === errors; } else { var valid0 = true; } if (valid0) { if (data.oscal_version !== undefined) { let data4 = data.oscal_version; const _errs13 = errors; const _errs14 = errors; if (errors === _errs14) { if (typeof data4 === "string") { if (!pattern3.test(data4)) { validate22.errors = [{ instancePath: instancePath + "/oscal_version", schemaPath: "#/definitions/oscal_version/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate22.errors = [{ instancePath: instancePath + "/oscal_version", schemaPath: "#/definitions/oscal_version/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs13 === errors; } else { var valid0 = true; } if (valid0) { if (data.revisions !== undefined) { let data5 = data.revisions; const _errs16 = errors; if (errors === _errs16) { if (Array.isArray(data5)) { if (data5.length < 1) { validate22.errors = [{ instancePath: instancePath + "/revisions", schemaPath: "#/properties/revisions/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid5 = true; const len0 = data5.length; for (let i0 = 0; i0 < len0; i0++) { const _errs18 = errors; if (!(validate23(data5[i0], { instancePath: instancePath + "/revisions/" + i0, parentData: data5, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate23.errors : vErrors.concat(validate23.errors); errors = vErrors.length; } var valid5 = _errs18 === errors; if (!valid5) { break; } } } } else { validate22.errors = [{ instancePath: instancePath + "/revisions", schemaPath: "#/properties/revisions/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs16 === errors; } else { var valid0 = true; } if (valid0) { if (data.document_ids !== undefined) { let data7 = data.document_ids; const _errs19 = errors; if (errors === _errs19) { if (Array.isArray(data7)) { if (data7.length < 1) { validate22.errors = [{ instancePath: instancePath + "/document_ids", schemaPath: "#/properties/document_ids/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid6 = true; const len1 = data7.length; for (let i1 = 0; i1 < len1; i1++) { let data8 = data7[i1]; const _errs21 = errors; const _errs22 = errors; if (errors === _errs22) { if (data8 && typeof data8 == "object" && !Array.isArray(data8)) { let missing1; if ((data8.identifier === undefined) && (missing1 = "identifier")) { validate22.errors = [{ instancePath: instancePath + "/document_ids/" + i1, schemaPath: "#/definitions/document_id/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs24 = errors; for (const key1 in data8) { if (!((key1 === "scheme") || (key1 === "identifier"))) { validate22.errors = [{ instancePath: instancePath + "/document_ids/" + i1, schemaPath: "#/definitions/document_id/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs24 === errors) { if (data8.scheme !== undefined) { let data9 = data8.scheme; const _errs25 = errors; if (errors === _errs25) { if (errors === _errs25) { if (typeof data9 === "string") { if (!(formats8(data9))) { validate22.errors = [{ instancePath: instancePath + "/document_ids/" + i1 + "/scheme", schemaPath: "#/definitions/document_id/properties/scheme/format", keyword: "format", params: { format: "uri" }, message: "must match format \"" + "uri" + "\"" }]; return false; } } else { validate22.errors = [{ instancePath: instancePath + "/document_ids/" + i1 + "/scheme", schemaPath: "#/definitions/document_id/properties/scheme/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid8 = _errs25 === errors; } else { var valid8 = true; } if (valid8) { if (data8.identifier !== undefined) { const _errs27 = errors; if (typeof data8.identifier !== "string") { validate22.errors = [{ instancePath: instancePath + "/document_ids/" + i1 + "/identifier", schemaPath: "#/definitions/document_id/properties/identifier/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid8 = _errs27 === errors; } else { var valid8 = true; } } } } } else { validate22.errors = [{ instancePath: instancePath + "/document_ids/" + i1, schemaPath: "#/definitions/document_id/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid6 = _errs21 === errors; if (!valid6) { break; } } } } else { validate22.errors = [{ instancePath: instancePath + "/document_ids", schemaPath: "#/properties/document_ids/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs19 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data11 = data.props; const _errs29 = errors; if (errors === _errs29) { if (Array.isArray(data11)) { if (data11.length < 1) { validate22.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid9 = true; const len2 = data11.length; for (let i2 = 0; i2 < len2; i2++) { const _errs31 = errors; if (!(validate24(data11[i2], { instancePath: instancePath + "/props/" + i2, parentData: data11, parentDataProperty: i2, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid9 = _errs31 === errors; if (!valid9) { break; } } } } else { validate22.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs29 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data13 = data.links; const _errs32 = errors; if (errors === _errs32) { if (Array.isArray(data13)) { if (data13.length < 1) { validate22.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid10 = true; const len3 = data13.length; for (let i3 = 0; i3 < len3; i3++) { let data14 = data13[i3]; const _errs34 = errors; const _errs35 = errors; if (errors === _errs35) { if (data14 && typeof data14 == "object" && !Array.isArray(data14)) { let missing2; if ((data14.href === undefined) && (missing2 = "href")) { validate22.errors = [{ instancePath: instancePath + "/links/" + i3, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" }]; return false; } else { const _errs37 = errors; for (const key2 in data14) { if (!((((key2 === "href") || (key2 === "rel")) || (key2 === "media_type")) || (key2 === "text"))) { validate22.errors = [{ instancePath: instancePath + "/links/" + i3, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs37 === errors) { if (data14.href !== undefined) { let data15 = data14.href; const _errs38 = errors; if (errors === _errs38) { if (errors === _errs38) { if (typeof data15 === "string") { if (!(formats10.test(data15))) { validate22.errors = [{ instancePath: instancePath + "/links/" + i3 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate22.errors = [{ instancePath: instancePath + "/links/" + i3 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid12 = _errs38 === errors; } else { var valid12 = true; } if (valid12) { if (data14.rel !== undefined) { let data16 = data14.rel; const _errs40 = errors; if (errors === _errs40) { if (typeof data16 === "string") { if (!pattern9.test(data16)) { validate22.errors = [{ instancePath: instancePath + "/links/" + i3 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate22.errors = [{ instancePath: instancePath + "/links/" + i3 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid12 = _errs40 === errors; } else { var valid12 = true; } if (valid12) { if (data14.media_type !== undefined) { let data17 = data14.media_type; const _errs42 = errors; if (errors === _errs42) { if (typeof data17 === "string") { if (!pattern3.test(data17)) { validate22.errors = [{ instancePath: instancePath + "/links/" + i3 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate22.errors = [{ instancePath: instancePath + "/links/" + i3 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid12 = _errs42 === errors; } else { var valid12 = true; } if (valid12) { if (data14.text !== undefined) { const _errs44 = errors; if (typeof data14.text !== "string") { validate22.errors = [{ instancePath: instancePath + "/links/" + i3 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid12 = _errs44 === errors; } else { var valid12 = true; } } } } } } } else { validate22.errors = [{ instancePath: instancePath + "/links/" + i3, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid10 = _errs34 === errors; if (!valid10) { break; } } } } else { validate22.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs32 === errors; } else { var valid0 = true; } if (valid0) { if (data.roles !== undefined) { let data19 = data.roles; const _errs46 = errors; if (errors === _errs46) { if (Array.isArray(data19)) { if (data19.length < 1) { validate22.errors = [{ instancePath: instancePath + "/roles", schemaPath: "#/properties/roles/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid13 = true; const len4 = data19.length; for (let i4 = 0; i4 < len4; i4++) { const _errs48 = errors; if (!(validate28(data19[i4], { instancePath: instancePath + "/roles/" + i4, parentData: data19, parentDataProperty: i4, rootData }))) { vErrors = vErrors === null ? validate28.errors : vErrors.concat(validate28.errors); errors = vErrors.length; } var valid13 = _errs48 === errors; if (!valid13) { break; } } } } else { validate22.errors = [{ instancePath: instancePath + "/roles", schemaPath: "#/properties/roles/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs46 === errors; } else { var valid0 = true; } if (valid0) { if (data.locations !== undefined) { let data21 = data.locations; const _errs49 = errors; if (errors === _errs49) { if (Array.isArray(data21)) { if (data21.length < 1) { validate22.errors = [{ instancePath: instancePath + "/locations", schemaPath: "#/properties/locations/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid14 = true; const len5 = data21.length; for (let i5 = 0; i5 < len5; i5++) { const _errs51 = errors; if (!(validate31(data21[i5], { instancePath: instancePath + "/locations/" + i5, parentData: data21, parentDataProperty: i5, rootData }))) { vErrors = vErrors === null ? validate31.errors : vErrors.concat(validate31.errors); errors = vErrors.length; } var valid14 = _errs51 === errors; if (!valid14) { break; } } } } else { validate22.errors = [{ instancePath: instancePath + "/locations", schemaPath: "#/properties/locations/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs49 === errors; } else { var valid0 = true; } if (valid0) { if (data.parties !== undefined) { let data23 = data.parties; const _errs52 = errors; if (errors === _errs52) { if (Array.isArray(data23)) { if (data23.length < 1) { validate22.errors = [{ instancePath: instancePath + "/parties", schemaPath: "#/properties/parties/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid15 = true; const len6 = data23.length; for (let i6 = 0; i6 < len6; i6++) { const _errs54 = errors; if (!(validate36(data23[i6], { instancePath: instancePath + "/parties/" + i6, parentData: data23, parentDataProperty: i6, rootData }))) { vErrors = vErrors === null ? validate36.errors : vErrors.concat(validate36.errors); errors = vErrors.length; } var valid15 = _errs54 === errors; if (!valid15) { break; } } } } else { validate22.errors = [{ instancePath: instancePath + "/parties", schemaPath: "#/properties/parties/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs52 === errors; } else { var valid0 = true; } if (valid0) { if (data.responsible_parties !== undefined) { let data25 = data.responsible_parties; const _errs55 = errors; if (errors === _errs55) { if (Array.isArray(data25)) { if (data25.length < 1) { validate22.errors = [{ instancePath: instancePath + "/responsible_parties", schemaPath: "#/properties/responsible_parties/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid16 = true; const len7 = data25.length; for (let i7 = 0; i7 < len7; i7++) { const _errs57 = errors; if (!(validate40(data25[i7], { instancePath: instancePath + "/responsible_parties/" + i7, parentData: data25, parentDataProperty: i7, rootData }))) { vErrors = vErrors === null ? validate40.errors : vErrors.concat(validate40.errors); errors = vErrors.length; } var valid16 = _errs57 === errors; if (!valid16) { break; } } } } else { validate22.errors = [{ instancePath: instancePath + "/responsible_parties", schemaPath: "#/properties/responsible_parties/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs55 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs58 = errors; if (typeof data.remarks !== "string") { validate22.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs58 === errors; } else { var valid0 = true; } } } } } } } } } } } } } } } } } else { validate22.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate22.errors = vErrors; return errors === 0; } const schema61 = { "title": "Parameter", "description": "Parameters provide a mechanism for the dynamic assignment of value(s) in a control.", "$id": "#/definitions/parameter", "type": "object", "properties": { "id": { "title": "Parameter Identifier", "description": "A unique identifier for a specific parameter instance. This identifier's uniqueness is document scoped and is intended to be consistent for the same parameter across minor revisions of the document.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "class": { "title": "Parameter Class", "description": "A textual label that provides a characterization of the parameter.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "depends_on": { "title": "Depends on", "description": "Another parameter invoking this one", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "label": { "title": "Parameter Label", "description": "A short, placeholder name for the parameter, which can be used as a substitute for a value if no value is assigned.", "type": "string" }, "usage": { "title": "Parameter Usage Description", "description": "Describes the purpose and use of a parameter", "type": "string" }, "constraints": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/parameter_constraint" } }, "guidelines": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/parameter_guideline" } }, "values": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/parameter_value" } }, "select": { "$ref": "#/definitions/parameter_selection" }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["id"], "additionalProperties": false }; const schema65 = { "title": "Guideline", "description": "A prose statement that provides a recommendation for the use of a parameter.", "$id": "#/definitions/parameter_guideline", "type": "object", "properties": { "prose": { "title": "Guideline Text", "description": "Prose permits multiple paragraphs, lists, tables etc.", "type": "string" } }, "required": ["prose"], "additionalProperties": false }; const schema66 = { "title": "Parameter Value", "description": "A parameter value or set of values.", "$id": "#/definitions/parameter_value", "type": "string", "pattern": "^\\S(.*\\S)?$" }; const schema67 = { "title": "Selection", "description": "Presenting a choice among alternatives", "$id": "#/definitions/parameter_selection", "type": "object", "properties": { "how_many": { "title": "Parameter Cardinality", "description": "Describes the number of selections that must occur. Without this setting, only one value should be assumed to be permitted.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$", "enum": ["one", "one_or_more"] }, "choice": { "type": "array", "minItems": 1, "items": { "title": "Choice", "description": "A value selection among several such options", "type": "string" } } }, "additionalProperties": false }; const schema63 = { "title": "Constraint", "description": "A formal or informal expression of a constraint or test", "$id": "#/definitions/parameter_constraint", "type": "object", "properties": { "description": { "title": "Constraint Description", "description": "A textual summary of the constraint to be applied.", "type": "string" }, "tests": { "type": "array", "minItems": 1, "items": { "title": "Constraint Test", "description": "A test expression which is expected to be evaluated by a tool.", "type": "object", "properties": { "expression": { "title": "Constraint test", "description": "A formal (executable) expression of a constraint", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["expression"], "additionalProperties": false } } }, "additionalProperties": false }; function validate46(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/parameter_constraint" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { const _errs1 = errors; for (const key0 in data) { if (!((key0 === "description") || (key0 === "tests"))) { validate46.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.description !== undefined) { const _errs2 = errors; if (typeof data.description !== "string") { validate46.errors = [{ instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.tests !== undefined) { let data1 = data.tests; const _errs4 = errors; if (errors === _errs4) { if (Array.isArray(data1)) { if (data1.length < 1) { validate46.errors = [{ instancePath: instancePath + "/tests", schemaPath: "#/properties/tests/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data1.length; for (let i0 = 0; i0 < len0; i0++) { let data2 = data1[i0]; const _errs6 = errors; if (errors === _errs6) { if (data2 && typeof data2 == "object" && !Array.isArray(data2)) { let missing0; if ((data2.expression === undefined) && (missing0 = "expression")) { validate46.errors = [{ instancePath: instancePath + "/tests/" + i0, schemaPath: "#/properties/tests/items/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs8 = errors; for (const key1 in data2) { if (!((key1 === "expression") || (key1 === "remarks"))) { validate46.errors = [{ instancePath: instancePath + "/tests/" + i0, schemaPath: "#/properties/tests/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs8 === errors) { if (data2.expression !== undefined) { let data3 = data2.expression; const _errs9 = errors; if (errors === _errs9) { if (typeof data3 === "string") { if (!pattern3.test(data3)) { validate46.errors = [{ instancePath: instancePath + "/tests/" + i0 + "/expression", schemaPath: "#/properties/tests/items/properties/expression/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate46.errors = [{ instancePath: instancePath + "/tests/" + i0 + "/expression", schemaPath: "#/properties/tests/items/properties/expression/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid2 = _errs9 === errors; } else { var valid2 = true; } if (valid2) { if (data2.remarks !== undefined) { const _errs11 = errors; if (typeof data2.remarks !== "string") { validate46.errors = [{ instancePath: instancePath + "/tests/" + i0 + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid2 = _errs11 === errors; } else { var valid2 = true; } } } } } else { validate46.errors = [{ instancePath: instancePath + "/tests/" + i0, schemaPath: "#/properties/tests/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid1 = _errs6 === errors; if (!valid1) { break; } } } } else { validate46.errors = [{ instancePath: instancePath + "/tests", schemaPath: "#/properties/tests/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs4 === errors; } else { var valid0 = true; } } } } else { validate46.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate46.errors = vErrors; return errors === 0; } function validate44(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/parameter" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((data.id === undefined) && (missing0 = "id")) { validate44.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(func8.call(schema61.properties, key0))) { validate44.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.id !== undefined) { let data0 = data.id; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern9.test(data0)) { validate44.errors = [{ instancePath: instancePath + "/id", schemaPath: "#/properties/id/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate44.errors = [{ instancePath: instancePath + "/id", schemaPath: "#/properties/id/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.class !== undefined) { let data1 = data.class; const _errs4 = errors; if (errors === _errs4) { if (typeof data1 === "string") { if (!pattern9.test(data1)) { validate44.errors = [{ instancePath: instancePath + "/class", schemaPath: "#/properties/class/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate44.errors = [{ instancePath: instancePath + "/class", schemaPath: "#/properties/class/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.depends_on !== undefined) { let data2 = data.depends_on; const _errs6 = errors; if (errors === _errs6) { if (typeof data2 === "string") { if (!pattern9.test(data2)) { validate44.errors = [{ instancePath: instancePath + "/depends_on", schemaPath: "#/properties/depends_on/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate44.errors = [{ instancePath: instancePath + "/depends_on", schemaPath: "#/properties/depends_on/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data3 = data.props; const _errs8 = errors; if (errors === _errs8) { if (Array.isArray(data3)) { if (data3.length < 1) { validate44.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data3.length; for (let i0 = 0; i0 < len0; i0++) { const _errs10 = errors; if (!(validate24(data3[i0], { instancePath: instancePath + "/props/" + i0, parentData: data3, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs10 === errors; if (!valid1) { break; } } } } else { validate44.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs8 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data5 = data.links; const _errs11 = errors; if (errors === _errs11) { if (Array.isArray(data5)) { if (data5.length < 1) { validate44.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data5.length; for (let i1 = 0; i1 < len1; i1++) { let data6 = data5[i1]; const _errs13 = errors; const _errs14 = errors; if (errors === _errs14) { if (data6 && typeof data6 == "object" && !Array.isArray(data6)) { let missing1; if ((data6.href === undefined) && (missing1 = "href")) { validate44.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs16 = errors; for (const key1 in data6) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate44.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs16 === errors) { if (data6.href !== undefined) { let data7 = data6.href; const _errs17 = errors; if (errors === _errs17) { if (errors === _errs17) { if (typeof data7 === "string") { if (!(formats10.test(data7))) { validate44.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate44.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid4 = _errs17 === errors; } else { var valid4 = true; } if (valid4) { if (data6.rel !== undefined) { let data8 = data6.rel; const _errs19 = errors; if (errors === _errs19) { if (typeof data8 === "string") { if (!pattern9.test(data8)) { validate44.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate44.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs19 === errors; } else { var valid4 = true; } if (valid4) { if (data6.media_type !== undefined) { let data9 = data6.media_type; const _errs21 = errors; if (errors === _errs21) { if (typeof data9 === "string") { if (!pattern3.test(data9)) { validate44.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate44.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs21 === errors; } else { var valid4 = true; } if (valid4) { if (data6.text !== undefined) { const _errs23 = errors; if (typeof data6.text !== "string") { validate44.errors = [{ instancePath: instancePath + "/links/" + i1 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid4 = _errs23 === errors; } else { var valid4 = true; } } } } } } } else { validate44.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs13 === errors; if (!valid2) { break; } } } } else { validate44.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs11 === errors; } else { var valid0 = true; } if (valid0) { if (data.label !== undefined) { const _errs25 = errors; if (typeof data.label !== "string") { validate44.errors = [{ instancePath: instancePath + "/label", schemaPath: "#/properties/label/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs25 === errors; } else { var valid0 = true; } if (valid0) { if (data.usage !== undefined) { const _errs27 = errors; if (typeof data.usage !== "string") { validate44.errors = [{ instancePath: instancePath + "/usage", schemaPath: "#/properties/usage/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs27 === errors; } else { var valid0 = true; } if (valid0) { if (data.constraints !== undefined) { let data13 = data.constraints; const _errs29 = errors; if (errors === _errs29) { if (Array.isArray(data13)) { if (data13.length < 1) { validate44.errors = [{ instancePath: instancePath + "/constraints", schemaPath: "#/properties/constraints/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid5 = true; const len2 = data13.length; for (let i2 = 0; i2 < len2; i2++) { const _errs31 = errors; if (!(validate46(data13[i2], { instancePath: instancePath + "/constraints/" + i2, parentData: data13, parentDataProperty: i2, rootData }))) { vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors); errors = vErrors.length; } var valid5 = _errs31 === errors; if (!valid5) { break; } } } } else { validate44.errors = [{ instancePath: instancePath + "/constraints", schemaPath: "#/properties/constraints/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs29 === errors; } else { var valid0 = true; } if (valid0) { if (data.guidelines !== undefined) { let data15 = data.guidelines; const _errs32 = errors; if (errors === _errs32) { if (Array.isArray(data15)) { if (data15.length < 1) { validate44.errors = [{ instancePath: instancePath + "/guidelines", schemaPath: "#/properties/guidelines/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid6 = true; const len3 = data15.length; for (let i3 = 0; i3 < len3; i3++) { let data16 = data15[i3]; const _errs34 = errors; const _errs35 = errors; if (errors === _errs35) { if (data16 && typeof data16 == "object" && !Array.isArray(data16)) { let missing2; if ((data16.prose === undefined) && (missing2 = "prose")) { validate44.errors = [{ instancePath: instancePath + "/guidelines/" + i3, schemaPath: "#/definitions/parameter_guideline/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" }]; return false; } else { const _errs37 = errors; for (const key2 in data16) { if (!(key2 === "prose")) { validate44.errors = [{ instancePath: instancePath + "/guidelines/" + i3, schemaPath: "#/definitions/parameter_guideline/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs37 === errors) { if (data16.prose !== undefined) { if (typeof data16.prose !== "string") { validate44.errors = [{ instancePath: instancePath + "/guidelines/" + i3 + "/prose", schemaPath: "#/definitions/parameter_guideline/properties/prose/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } } } else { validate44.errors = [{ instancePath: instancePath + "/guidelines/" + i3, schemaPath: "#/definitions/parameter_guideline/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid6 = _errs34 === errors; if (!valid6) { break; } } } } else { validate44.errors = [{ instancePath: instancePath + "/guidelines", schemaPath: "#/properties/guidelines/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs32 === errors; } else { var valid0 = true; } if (valid0) { if (data.values !== undefined) { let data18 = data.values; const _errs40 = errors; if (errors === _errs40) { if (Array.isArray(data18)) { if (data18.length < 1) { validate44.errors = [{ instancePath: instancePath + "/values", schemaPath: "#/properties/values/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid9 = true; const len4 = data18.length; for (let i4 = 0; i4 < len4; i4++) { let data19 = data18[i4]; const _errs42 = errors; const _errs43 = errors; if (errors === _errs43) { if (typeof data19 === "string") { if (!pattern3.test(data19)) { validate44.errors = [{ instancePath: instancePath + "/values/" + i4, schemaPath: "#/definitions/parameter_value/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate44.errors = [{ instancePath: instancePath + "/values/" + i4, schemaPath: "#/definitions/parameter_value/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid9 = _errs42 === errors; if (!valid9) { break; } } } } else { validate44.errors = [{ instancePath: instancePath + "/values", schemaPath: "#/properties/values/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs40 === errors; } else { var valid0 = true; } if (valid0) { if (data.select !== undefined) { let data20 = data.select; const _errs45 = errors; const _errs46 = errors; if (errors === _errs46) { if (data20 && typeof data20 == "object" && !Array.isArray(data20)) { const _errs48 = errors; for (const key3 in data20) { if (!((key3 === "how_many") || (key3 === "choice"))) { validate44.errors = [{ instancePath: instancePath + "/select", schemaPath: "#/definitions/parameter_selection/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key3 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs48 === errors) { if (data20.how_many !== undefined) { let data21 = data20.how_many; const _errs49 = errors; if (!((data21 === "one") || (data21 === "one_or_more"))) { validate44.errors = [{ instancePath: instancePath + "/select/how_many", schemaPath: "#/definitions/parameter_selection/properties/how_many/enum", keyword: "enum", params: { allowedValues: schema67.properties.how_many.enum }, message: "must be equal to one of the allowed values" }]; return false; } if (errors === _errs49) { if (typeof data21 === "string") { if (!pattern9.test(data21)) { validate44.errors = [{ instancePath: instancePath + "/select/how_many", schemaPath: "#/definitions/parameter_selection/properties/how_many/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate44.errors = [{ instancePath: instancePath + "/select/how_many", schemaPath: "#/definitions/parameter_selection/properties/how_many/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid12 = _errs49 === errors; } else { var valid12 = true; } if (valid12) { if (data20.choice !== undefined) { let data22 = data20.choice; const _errs51 = errors; if (errors === _errs51) { if (Array.isArray(data22)) { if (data22.length < 1) { validate44.errors = [{ instancePath: instancePath + "/select/choice", schemaPath: "#/definitions/parameter_selection/properties/choice/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid13 = true; const len5 = data22.length; for (let i5 = 0; i5 < len5; i5++) { const _errs53 = errors; if (typeof data22[i5] !== "string") { validate44.errors = [{ instancePath: instancePath + "/select/choice/" + i5, schemaPath: "#/definitions/parameter_selection/properties/choice/items/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid13 = _errs53 === errors; if (!valid13) { break; } } } } else { validate44.errors = [{ instancePath: instancePath + "/select/choice", schemaPath: "#/definitions/parameter_selection/properties/choice/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid12 = _errs51 === errors; } else { var valid12 = true; } } } } else { validate44.errors = [{ instancePath: instancePath + "/select", schemaPath: "#/definitions/parameter_selection/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid0 = _errs45 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs55 = errors; if (typeof data.remarks !== "string") { validate44.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs55 === errors; } else { var valid0 = true; } } } } } } } } } } } } } } } else { validate44.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate44.errors = vErrors; return errors === 0; } const schema69 = { "title": "Control", "description": "A structured information object representing a security or privacy control. Each security or privacy control within the Catalog is defined by a distinct control instance.", "$id": "#/definitions/control", "type": "object", "properties": { "id": { "title": "Control Identifier", "description": "A unique identifier for a specific control instance that can be used to reference the control in other OSCAL documents. This identifier's uniqueness is document scoped and is intended to be consistent for the same control across minor revisions of the document.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "class": { "title": "Control Class", "description": "A textual label that provides a sub_type or characterization of the control.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "title": { "title": "Control Title", "description": "A name given to the control, which may be used by a tool for display and navigation.", "type": "string" }, "params": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/parameter" } }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "parts": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/part" } }, "controls": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/control" } } }, "required": ["id", "title"], "additionalProperties": false }; const schema71 = { "title": "Part", "description": "A partition of a control's definition or a child of another part.", "$id": "#/definitions/part", "type": "object", "properties": { "id": { "title": "Part Identifier", "description": "A unique identifier for a specific part instance. This identifier's uniqueness is document scoped and is intended to be consistent for the same part across minor revisions of the document.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "name": { "title": "Part Name", "description": "A textual label that uniquely identifies the part's semantic type.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "ns": { "title": "Part Namespace", "description": "A namespace qualifying the part's name. This allows different organizations to associate distinct semantics with the same name.", "type": "string", "format": "uri" }, "class": { "title": "Part Class", "description": "A textual label that provides a sub_type or characterization of the part's name. This can be used to further distinguish or discriminate between the semantics of multiple parts of the same control with the same name and ns.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "title": { "title": "Part Title", "description": "A name given to the part, which may be used by a tool for display and navigation.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "prose": { "title": "Part Text", "description": "Permits multiple paragraphs, lists, tables etc.", "type": "string" }, "parts": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/part" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } } }, "required": ["name"], "additionalProperties": false }; const wrapper0 = { validate: validate52 }; function validate52(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/part" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((data.name === undefined) && (missing0 = "name")) { validate52.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(func8.call(schema71.properties, key0))) { validate52.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.id !== undefined) { let data0 = data.id; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern9.test(data0)) { validate52.errors = [{ instancePath: instancePath + "/id", schemaPath: "#/properties/id/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate52.errors = [{ instancePath: instancePath + "/id", schemaPath: "#/properties/id/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.name !== undefined) { let data1 = data.name; const _errs4 = errors; if (errors === _errs4) { if (typeof data1 === "string") { if (!pattern9.test(data1)) { validate52.errors = [{ instancePath: instancePath + "/name", schemaPath: "#/properties/name/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate52.errors = [{ instancePath: instancePath + "/name", schemaPath: "#/properties/name/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.ns !== undefined) { let data2 = data.ns; const _errs6 = errors; if (errors === _errs6) { if (errors === _errs6) { if (typeof data2 === "string") { if (!(formats8(data2))) { validate52.errors = [{ instancePath: instancePath + "/ns", schemaPath: "#/properties/ns/format", keyword: "format", params: { format: "uri" }, message: "must match format \"" + "uri" + "\"" }]; return false; } } else { validate52.errors = [{ instancePath: instancePath + "/ns", schemaPath: "#/properties/ns/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.class !== undefined) { let data3 = data.class; const _errs8 = errors; if (errors === _errs8) { if (typeof data3 === "string") { if (!pattern9.test(data3)) { validate52.errors = [{ instancePath: instancePath + "/class", schemaPath: "#/properties/class/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate52.errors = [{ instancePath: instancePath + "/class", schemaPath: "#/properties/class/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs8 === errors; } else { var valid0 = true; } if (valid0) { if (data.title !== undefined) { const _errs10 = errors; if (typeof data.title !== "string") { validate52.errors = [{ instancePath: instancePath + "/title", schemaPath: "#/properties/title/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs10 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data5 = data.props; const _errs12 = errors; if (errors === _errs12) { if (Array.isArray(data5)) { if (data5.length < 1) { validate52.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data5.length; for (let i0 = 0; i0 < len0; i0++) { const _errs14 = errors; if (!(validate24(data5[i0], { instancePath: instancePath + "/props/" + i0, parentData: data5, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs14 === errors; if (!valid1) { break; } } } } else { validate52.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs12 === errors; } else { var valid0 = true; } if (valid0) { if (data.prose !== undefined) { const _errs15 = errors; if (typeof data.prose !== "string") { validate52.errors = [{ instancePath: instancePath + "/prose", schemaPath: "#/properties/prose/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs15 === errors; } else { var valid0 = true; } if (valid0) { if (data.parts !== undefined) { let data8 = data.parts; const _errs17 = errors; if (errors === _errs17) { if (Array.isArray(data8)) { if (data8.length < 1) { validate52.errors = [{ instancePath: instancePath + "/parts", schemaPath: "#/properties/parts/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data8.length; for (let i1 = 0; i1 < len1; i1++) { const _errs19 = errors; if (!(wrapper0.validate(data8[i1], { instancePath: instancePath + "/parts/" + i1, parentData: data8, parentDataProperty: i1, rootData }))) { vErrors = vErrors === null ? wrapper0.validate.errors : vErrors.concat(wrapper0.validate.errors); errors = vErrors.length; } var valid2 = _errs19 === errors; if (!valid2) { break; } } } } else { validate52.errors = [{ instancePath: instancePath + "/parts", schemaPath: "#/properties/parts/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs17 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data10 = data.links; const _errs20 = errors; if (errors === _errs20) { if (Array.isArray(data10)) { if (data10.length < 1) { validate52.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid3 = true; const len2 = data10.length; for (let i2 = 0; i2 < len2; i2++) { let data11 = data10[i2]; const _errs22 = errors; const _errs23 = errors; if (errors === _errs23) { if (data11 && typeof data11 == "object" && !Array.isArray(data11)) { let missing1; if ((data11.href === undefined) && (missing1 = "href")) { validate52.errors = [{ instancePath: instancePath + "/links/" + i2, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs25 = errors; for (const key1 in data11) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate52.errors = [{ instancePath: instancePath + "/links/" + i2, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs25 === errors) { if (data11.href !== undefined) { let data12 = data11.href; const _errs26 = errors; if (errors === _errs26) { if (errors === _errs26) { if (typeof data12 === "string") { if (!(formats10.test(data12))) { validate52.errors = [{ instancePath: instancePath + "/links/" + i2 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate52.errors = [{ instancePath: instancePath + "/links/" + i2 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid5 = _errs26 === errors; } else { var valid5 = true; } if (valid5) { if (data11.rel !== undefined) { let data13 = data11.rel; const _errs28 = errors; if (errors === _errs28) { if (typeof data13 === "string") { if (!pattern9.test(data13)) { validate52.errors = [{ instancePath: instancePath + "/links/" + i2 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate52.errors = [{ instancePath: instancePath + "/links/" + i2 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid5 = _errs28 === errors; } else { var valid5 = true; } if (valid5) { if (data11.media_type !== undefined) { let data14 = data11.media_type; const _errs30 = errors; if (errors === _errs30) { if (typeof data14 === "string") { if (!pattern3.test(data14)) { validate52.errors = [{ instancePath: instancePath + "/links/" + i2 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate52.errors = [{ instancePath: instancePath + "/links/" + i2 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid5 = _errs30 === errors; } else { var valid5 = true; } if (valid5) { if (data11.text !== undefined) { const _errs32 = errors; if (typeof data11.text !== "string") { validate52.errors = [{ instancePath: instancePath + "/links/" + i2 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid5 = _errs32 === errors; } else { var valid5 = true; } } } } } } } else { validate52.errors = [{ instancePath: instancePath + "/links/" + i2, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid3 = _errs22 === errors; if (!valid3) { break; } } } } else { validate52.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs20 === errors; } else { var valid0 = true; } } } } } } } } } } } } else { validate52.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate52.errors = vErrors; return errors === 0; } const wrapper1 = { validate: validate49 }; function validate49(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/control" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if (((data.id === undefined) && (missing0 = "id")) || ((data.title === undefined) && (missing0 = "title"))) { validate49.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!((((((((key0 === "id") || (key0 === "class")) || (key0 === "title")) || (key0 === "params")) || (key0 === "props")) || (key0 === "links")) || (key0 === "parts")) || (key0 === "controls"))) { validate49.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.id !== undefined) { let data0 = data.id; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern9.test(data0)) { validate49.errors = [{ instancePath: instancePath + "/id", schemaPath: "#/properties/id/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate49.errors = [{ instancePath: instancePath + "/id", schemaPath: "#/properties/id/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.class !== undefined) { let data1 = data.class; const _errs4 = errors; if (errors === _errs4) { if (typeof data1 === "string") { if (!pattern9.test(data1)) { validate49.errors = [{ instancePath: instancePath + "/class", schemaPath: "#/properties/class/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate49.errors = [{ instancePath: instancePath + "/class", schemaPath: "#/properties/class/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.title !== undefined) { const _errs6 = errors; if (typeof data.title !== "string") { validate49.errors = [{ instancePath: instancePath + "/title", schemaPath: "#/properties/title/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.params !== undefined) { let data3 = data.params; const _errs8 = errors; if (errors === _errs8) { if (Array.isArray(data3)) { if (data3.length < 1) { validate49.errors = [{ instancePath: instancePath + "/params", schemaPath: "#/properties/params/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data3.length; for (let i0 = 0; i0 < len0; i0++) { const _errs10 = errors; if (!(validate44(data3[i0], { instancePath: instancePath + "/params/" + i0, parentData: data3, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate44.errors : vErrors.concat(validate44.errors); errors = vErrors.length; } var valid1 = _errs10 === errors; if (!valid1) { break; } } } } else { validate49.errors = [{ instancePath: instancePath + "/params", schemaPath: "#/properties/params/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs8 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data5 = data.props; const _errs11 = errors; if (errors === _errs11) { if (Array.isArray(data5)) { if (data5.length < 1) { validate49.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data5.length; for (let i1 = 0; i1 < len1; i1++) { const _errs13 = errors; if (!(validate24(data5[i1], { instancePath: instancePath + "/props/" + i1, parentData: data5, parentDataProperty: i1, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid2 = _errs13 === errors; if (!valid2) { break; } } } } else { validate49.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs11 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data7 = data.links; const _errs14 = errors; if (errors === _errs14) { if (Array.isArray(data7)) { if (data7.length < 1) { validate49.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid3 = true; const len2 = data7.length; for (let i2 = 0; i2 < len2; i2++) { let data8 = data7[i2]; const _errs16 = errors; const _errs17 = errors; if (errors === _errs17) { if (data8 && typeof data8 == "object" && !Array.isArray(data8)) { let missing1; if ((data8.href === undefined) && (missing1 = "href")) { validate49.errors = [{ instancePath: instancePath + "/links/" + i2, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs19 = errors; for (const key1 in data8) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate49.errors = [{ instancePath: instancePath + "/links/" + i2, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs19 === errors) { if (data8.href !== undefined) { let data9 = data8.href; const _errs20 = errors; if (errors === _errs20) { if (errors === _errs20) { if (typeof data9 === "string") { if (!(formats10.test(data9))) { validate49.errors = [{ instancePath: instancePath + "/links/" + i2 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate49.errors = [{ instancePath: instancePath + "/links/" + i2 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid5 = _errs20 === errors; } else { var valid5 = true; } if (valid5) { if (data8.rel !== undefined) { let data10 = data8.rel; const _errs22 = errors; if (errors === _errs22) { if (typeof data10 === "string") { if (!pattern9.test(data10)) { validate49.errors = [{ instancePath: instancePath + "/links/" + i2 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate49.errors = [{ instancePath: instancePath + "/links/" + i2 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid5 = _errs22 === errors; } else { var valid5 = true; } if (valid5) { if (data8.media_type !== undefined) { let data11 = data8.media_type; const _errs24 = errors; if (errors === _errs24) { if (typeof data11 === "string") { if (!pattern3.test(data11)) { validate49.errors = [{ instancePath: instancePath + "/links/" + i2 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate49.errors = [{ instancePath: instancePath + "/links/" + i2 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid5 = _errs24 === errors; } else { var valid5 = true; } if (valid5) { if (data8.text !== undefined) { const _errs26 = errors; if (typeof data8.text !== "string") { validate49.errors = [{ instancePath: instancePath + "/links/" + i2 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid5 = _errs26 === errors; } else { var valid5 = true; } } } } } } } else { validate49.errors = [{ instancePath: instancePath + "/links/" + i2, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid3 = _errs16 === errors; if (!valid3) { break; } } } } else { validate49.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs14 === errors; } else { var valid0 = true; } if (valid0) { if (data.parts !== undefined) { let data13 = data.parts; const _errs28 = errors; if (errors === _errs28) { if (Array.isArray(data13)) { if (data13.length < 1) { validate49.errors = [{ instancePath: instancePath + "/parts", schemaPath: "#/properties/parts/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid6 = true; const len3 = data13.length; for (let i3 = 0; i3 < len3; i3++) { const _errs30 = errors; if (!(validate52(data13[i3], { instancePath: instancePath + "/parts/" + i3, parentData: data13, parentDataProperty: i3, rootData }))) { vErrors = vErrors === null ? validate52.errors : vErrors.concat(validate52.errors); errors = vErrors.length; } var valid6 = _errs30 === errors; if (!valid6) { break; } } } } else { validate49.errors = [{ instancePath: instancePath + "/parts", schemaPath: "#/properties/parts/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs28 === errors; } else { var valid0 = true; } if (valid0) { if (data.controls !== undefined) { let data15 = data.controls; const _errs31 = errors; if (errors === _errs31) { if (Array.isArray(data15)) { if (data15.length < 1) { validate49.errors = [{ instancePath: instancePath + "/controls", schemaPath: "#/properties/controls/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid7 = true; const len4 = data15.length; for (let i4 = 0; i4 < len4; i4++) { const _errs33 = errors; if (!(wrapper1.validate(data15[i4], { instancePath: instancePath + "/controls/" + i4, parentData: data15, parentDataProperty: i4, rootData }))) { vErrors = vErrors === null ? wrapper1.validate.errors : vErrors.concat(wrapper1.validate.errors); errors = vErrors.length; } var valid7 = _errs33 === errors; if (!valid7) { break; } } } } else { validate49.errors = [{ instancePath: instancePath + "/controls", schemaPath: "#/properties/controls/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs31 === errors; } else { var valid0 = true; } } } } } } } } } } } else { validate49.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate49.errors = vErrors; return errors === 0; } const schema73 = { "title": "Control Group", "description": "A group of controls, or of groups of controls.", "$id": "#/definitions/group", "type": "object", "properties": { "id": { "title": "Group Identifier", "description": "A unique identifier for a specific group instance that can be used to reference the group within this and in other OSCAL documents. This identifier's uniqueness is document scoped and is intended to be consistent for the same group across minor revisions of the document.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "class": { "title": "Group Class", "description": "A textual label that provides a sub_type or characterization of the group.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "title": { "title": "Group Title", "description": "A name given to the group, which may be used by a tool for display and navigation.", "type": "string" }, "params": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/parameter" } }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "parts": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/part" } }, "groups": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/group" } }, "controls": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/control" } } }, "required": ["title"], "additionalProperties": false }; const wrapper2 = { validate: validate56 }; function validate56(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/group" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((data.title === undefined) && (missing0 = "title")) { validate56.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(func8.call(schema73.properties, key0))) { validate56.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.id !== undefined) { let data0 = data.id; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern9.test(data0)) { validate56.errors = [{ instancePath: instancePath + "/id", schemaPath: "#/properties/id/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate56.errors = [{ instancePath: instancePath + "/id", schemaPath: "#/properties/id/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.class !== undefined) { let data1 = data.class; const _errs4 = errors; if (errors === _errs4) { if (typeof data1 === "string") { if (!pattern9.test(data1)) { validate56.errors = [{ instancePath: instancePath + "/class", schemaPath: "#/properties/class/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate56.errors = [{ instancePath: instancePath + "/class", schemaPath: "#/properties/class/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.title !== undefined) { const _errs6 = errors; if (typeof data.title !== "string") { validate56.errors = [{ instancePath: instancePath + "/title", schemaPath: "#/properties/title/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.params !== undefined) { let data3 = data.params; const _errs8 = errors; if (errors === _errs8) { if (Array.isArray(data3)) { if (data3.length < 1) { validate56.errors = [{ instancePath: instancePath + "/params", schemaPath: "#/properties/params/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data3.length; for (let i0 = 0; i0 < len0; i0++) { const _errs10 = errors; if (!(validate44(data3[i0], { instancePath: instancePath + "/params/" + i0, parentData: data3, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate44.errors : vErrors.concat(validate44.errors); errors = vErrors.length; } var valid1 = _errs10 === errors; if (!valid1) { break; } } } } else { validate56.errors = [{ instancePath: instancePath + "/params", schemaPath: "#/properties/params/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs8 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data5 = data.props; const _errs11 = errors; if (errors === _errs11) { if (Array.isArray(data5)) { if (data5.length < 1) { validate56.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data5.length; for (let i1 = 0; i1 < len1; i1++) { const _errs13 = errors; if (!(validate24(data5[i1], { instancePath: instancePath + "/props/" + i1, parentData: data5, parentDataProperty: i1, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid2 = _errs13 === errors; if (!valid2) { break; } } } } else { validate56.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs11 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data7 = data.links; const _errs14 = errors; if (errors === _errs14) { if (Array.isArray(data7)) { if (data7.length < 1) { validate56.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid3 = true; const len2 = data7.length; for (let i2 = 0; i2 < len2; i2++) { let data8 = data7[i2]; const _errs16 = errors; const _errs17 = errors; if (errors === _errs17) { if (data8 && typeof data8 == "object" && !Array.isArray(data8)) { let missing1; if ((data8.href === undefined) && (missing1 = "href")) { validate56.errors = [{ instancePath: instancePath + "/links/" + i2, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs19 = errors; for (const key1 in data8) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate56.errors = [{ instancePath: instancePath + "/links/" + i2, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs19 === errors) { if (data8.href !== undefined) { let data9 = data8.href; const _errs20 = errors; if (errors === _errs20) { if (errors === _errs20) { if (typeof data9 === "string") { if (!(formats10.test(data9))) { validate56.errors = [{ instancePath: instancePath + "/links/" + i2 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate56.errors = [{ instancePath: instancePath + "/links/" + i2 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid5 = _errs20 === errors; } else { var valid5 = true; } if (valid5) { if (data8.rel !== undefined) { let data10 = data8.rel; const _errs22 = errors; if (errors === _errs22) { if (typeof data10 === "string") { if (!pattern9.test(data10)) { validate56.errors = [{ instancePath: instancePath + "/links/" + i2 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate56.errors = [{ instancePath: instancePath + "/links/" + i2 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid5 = _errs22 === errors; } else { var valid5 = true; } if (valid5) { if (data8.media_type !== undefined) { let data11 = data8.media_type; const _errs24 = errors; if (errors === _errs24) { if (typeof data11 === "string") { if (!pattern3.test(data11)) { validate56.errors = [{ instancePath: instancePath + "/links/" + i2 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate56.errors = [{ instancePath: instancePath + "/links/" + i2 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid5 = _errs24 === errors; } else { var valid5 = true; } if (valid5) { if (data8.text !== undefined) { const _errs26 = errors; if (typeof data8.text !== "string") { validate56.errors = [{ instancePath: instancePath + "/links/" + i2 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid5 = _errs26 === errors; } else { var valid5 = true; } } } } } } } else { validate56.errors = [{ instancePath: instancePath + "/links/" + i2, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid3 = _errs16 === errors; if (!valid3) { break; } } } } else { validate56.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs14 === errors; } else { var valid0 = true; } if (valid0) { if (data.parts !== undefined) { let data13 = data.parts; const _errs28 = errors; if (errors === _errs28) { if (Array.isArray(data13)) { if (data13.length < 1) { validate56.errors = [{ instancePath: instancePath + "/parts", schemaPath: "#/properties/parts/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid6 = true; const len3 = data13.length; for (let i3 = 0; i3 < len3; i3++) { const _errs30 = errors; if (!(validate52(data13[i3], { instancePath: instancePath + "/parts/" + i3, parentData: data13, parentDataProperty: i3, rootData }))) { vErrors = vErrors === null ? validate52.errors : vErrors.concat(validate52.errors); errors = vErrors.length; } var valid6 = _errs30 === errors; if (!valid6) { break; } } } } else { validate56.errors = [{ instancePath: instancePath + "/parts", schemaPath: "#/properties/parts/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs28 === errors; } else { var valid0 = true; } if (valid0) { if (data.groups !== undefined) { let data15 = data.groups; const _errs31 = errors; if (errors === _errs31) { if (Array.isArray(data15)) { if (data15.length < 1) { validate56.errors = [{ instancePath: instancePath + "/groups", schemaPath: "#/properties/groups/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid7 = true; const len4 = data15.length; for (let i4 = 0; i4 < len4; i4++) { const _errs33 = errors; if (!(wrapper2.validate(data15[i4], { instancePath: instancePath + "/groups/" + i4, parentData: data15, parentDataProperty: i4, rootData }))) { vErrors = vErrors === null ? wrapper2.validate.errors : vErrors.concat(wrapper2.validate.errors); errors = vErrors.length; } var valid7 = _errs33 === errors; if (!valid7) { break; } } } } else { validate56.errors = [{ instancePath: instancePath + "/groups", schemaPath: "#/properties/groups/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs31 === errors; } else { var valid0 = true; } if (valid0) { if (data.controls !== undefined) { let data17 = data.controls; const _errs34 = errors; if (errors === _errs34) { if (Array.isArray(data17)) { if (data17.length < 1) { validate56.errors = [{ instancePath: instancePath + "/controls", schemaPath: "#/properties/controls/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid8 = true; const len5 = data17.length; for (let i5 = 0; i5 < len5; i5++) { const _errs36 = errors; if (!(validate49(data17[i5], { instancePath: instancePath + "/controls/" + i5, parentData: data17, parentDataProperty: i5, rootData }))) { vErrors = vErrors === null ? validate49.errors : vErrors.concat(validate49.errors); errors = vErrors.length; } var valid8 = _errs36 === errors; if (!valid8) { break; } } } } else { validate56.errors = [{ instancePath: instancePath + "/controls", schemaPath: "#/properties/controls/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs34 === errors; } else { var valid0 = true; } } } } } } } } } } } } else { validate56.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate56.errors = vErrors; return errors === 0; } const schema75 = { "title": "Back matter", "description": "A collection of resources, which may be included directly or by reference.", "$id": "#/definitions/back_matter", "type": "object", "properties": { "resources": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/resource" } } }, "additionalProperties": false }; const schema76 = { "$id": "#/definitions/resource", "title": "Resource", "description": "A resource associated with content in the containing document. A resource may be directly included in the document base64 encoded or may point to one or more equivalent internet resources.", "type": "object", "properties": { "uuid": { "title": "Resource Universally Unique Identifier", "description": "A globally unique identifier that can be used to reference this defined resource elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "title": { "title": "Resource Title", "description": "A name given to the resource, which may be used by a tool for display and navigation.", "type": "string" }, "description": { "title": "Resource Description", "description": "A short summary of the resource used to indicate the purpose of the resource.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "document_ids": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/document_id" } }, "citation": { "title": "Citation", "description": "A citation consisting of end note text and optional structured bibliographic data.", "type": "object", "properties": { "text": { "title": "Citation Text", "description": "A line of citation text.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } } }, "required": ["text"], "additionalProperties": false }, "rlinks": { "type": "array", "minItems": 1, "items": { "title": "Resource link", "description": "A pointer to an external resource with an optional hash for verification and change detection.", "type": "object", "properties": { "href": { "title": "Hypertext Reference", "description": "A resolvable URI reference to a resource.", "type": "string", "format": "uri-reference" }, "media_type": { "title": "Media Type", "description": "Specifies a media type as defined by the Internet Assigned Numbers Authority (IANA) Media Types Registry.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "hashes": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/hash" } } }, "required": ["href"], "additionalProperties": false } }, "base64": { "title": "Base64", "description": "The Base64 alphabet in RFC 2045 _ aligned with XSD.", "type": "object", "properties": { "filename": { "title": "File Name", "description": "Name of the file before it was encoded as Base64 to be embedded in a resource. This is the name that will be assigned to the file when the file is decoded.", "type": "string", "format": "uri-reference" }, "media_type": { "title": "Media Type", "description": "Specifies a media type as defined by the Internet Assigned Numbers Authority (IANA) Media Types Registry.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "value": { "type": "string" } }, "required": ["value"], "additionalProperties": false }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid"], "additionalProperties": false }; const schema79 = { "title": "Hash", "description": "A representation of a cryptographic digest generated over a resource using a specified hash algorithm.", "$id": "#/definitions/hash", "type": "object", "properties": { "algorithm": { "title": "Hash algorithm", "description": "Method by which a hash is derived", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "value": { "type": "string" } }, "required": ["value", "algorithm"], "additionalProperties": false }; function validate63(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/resource" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((data.uuid === undefined) && (missing0 = "uuid")) { validate63.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(func8.call(schema76.properties, key0))) { validate63.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.uuid !== undefined) { let data0 = data.uuid; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern0.test(data0)) { validate63.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate63.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.title !== undefined) { const _errs4 = errors; if (typeof data.title !== "string") { validate63.errors = [{ instancePath: instancePath + "/title", schemaPath: "#/properties/title/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.description !== undefined) { const _errs6 = errors; if (typeof data.description !== "string") { validate63.errors = [{ instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data3 = data.props; const _errs8 = errors; if (errors === _errs8) { if (Array.isArray(data3)) { if (data3.length < 1) { validate63.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data3.length; for (let i0 = 0; i0 < len0; i0++) { const _errs10 = errors; if (!(validate24(data3[i0], { instancePath: instancePath + "/props/" + i0, parentData: data3, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs10 === errors; if (!valid1) { break; } } } } else { validate63.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs8 === errors; } else { var valid0 = true; } if (valid0) { if (data.document_ids !== undefined) { let data5 = data.document_ids; const _errs11 = errors; if (errors === _errs11) { if (Array.isArray(data5)) { if (data5.length < 1) { validate63.errors = [{ instancePath: instancePath + "/document_ids", schemaPath: "#/properties/document_ids/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data5.length; for (let i1 = 0; i1 < len1; i1++) { let data6 = data5[i1]; const _errs13 = errors; const _errs14 = errors; if (errors === _errs14) { if (data6 && typeof data6 == "object" && !Array.isArray(data6)) { let missing1; if ((data6.identifier === undefined) && (missing1 = "identifier")) { validate63.errors = [{ instancePath: instancePath + "/document_ids/" + i1, schemaPath: "#/definitions/document_id/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs16 = errors; for (const key1 in data6) { if (!((key1 === "scheme") || (key1 === "identifier"))) { validate63.errors = [{ instancePath: instancePath + "/document_ids/" + i1, schemaPath: "#/definitions/document_id/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs16 === errors) { if (data6.scheme !== undefined) { let data7 = data6.scheme; const _errs17 = errors; if (errors === _errs17) { if (errors === _errs17) { if (typeof data7 === "string") { if (!(formats8(data7))) { validate63.errors = [{ instancePath: instancePath + "/document_ids/" + i1 + "/scheme", schemaPath: "#/definitions/document_id/properties/scheme/format", keyword: "format", params: { format: "uri" }, message: "must match format \"" + "uri" + "\"" }]; return false; } } else { validate63.errors = [{ instancePath: instancePath + "/document_ids/" + i1 + "/scheme", schemaPath: "#/definitions/document_id/properties/scheme/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid4 = _errs17 === errors; } else { var valid4 = true; } if (valid4) { if (data6.identifier !== undefined) { const _errs19 = errors; if (typeof data6.identifier !== "string") { validate63.errors = [{ instancePath: instancePath + "/document_ids/" + i1 + "/identifier", schemaPath: "#/definitions/document_id/properties/identifier/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid4 = _errs19 === errors; } else { var valid4 = true; } } } } } else { validate63.errors = [{ instancePath: instancePath + "/document_ids/" + i1, schemaPath: "#/definitions/document_id/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs13 === errors; if (!valid2) { break; } } } } else { validate63.errors = [{ instancePath: instancePath + "/document_ids", schemaPath: "#/properties/document_ids/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs11 === errors; } else { var valid0 = true; } if (valid0) { if (data.citation !== undefined) { let data9 = data.citation; const _errs21 = errors; if (errors === _errs21) { if (data9 && typeof data9 == "object" && !Array.isArray(data9)) { let missing2; if ((data9.text === undefined) && (missing2 = "text")) { validate63.errors = [{ instancePath: instancePath + "/citation", schemaPath: "#/properties/citation/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" }]; return false; } else { const _errs23 = errors; for (const key2 in data9) { if (!(((key2 === "text") || (key2 === "props")) || (key2 === "links"))) { validate63.errors = [{ instancePath: instancePath + "/citation", schemaPath: "#/properties/citation/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs23 === errors) { if (data9.text !== undefined) { const _errs24 = errors; if (typeof data9.text !== "string") { validate63.errors = [{ instancePath: instancePath + "/citation/text", schemaPath: "#/properties/citation/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid5 = _errs24 === errors; } else { var valid5 = true; } if (valid5) { if (data9.props !== undefined) { let data11 = data9.props; const _errs26 = errors; if (errors === _errs26) { if (Array.isArray(data11)) { if (data11.length < 1) { validate63.errors = [{ instancePath: instancePath + "/citation/props", schemaPath: "#/properties/citation/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid6 = true; const len2 = data11.length; for (let i2 = 0; i2 < len2; i2++) { const _errs28 = errors; if (!(validate24(data11[i2], { instancePath: instancePath + "/citation/props/" + i2, parentData: data11, parentDataProperty: i2, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid6 = _errs28 === errors; if (!valid6) { break; } } } } else { validate63.errors = [{ instancePath: instancePath + "/citation/props", schemaPath: "#/properties/citation/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid5 = _errs26 === errors; } else { var valid5 = true; } if (valid5) { if (data9.links !== undefined) { let data13 = data9.links; const _errs29 = errors; if (errors === _errs29) { if (Array.isArray(data13)) { if (data13.length < 1) { validate63.errors = [{ instancePath: instancePath + "/citation/links", schemaPath: "#/properties/citation/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid7 = true; const len3 = data13.length; for (let i3 = 0; i3 < len3; i3++) { let data14 = data13[i3]; const _errs31 = errors; const _errs32 = errors; if (errors === _errs32) { if (data14 && typeof data14 == "object" && !Array.isArray(data14)) { let missing3; if ((data14.href === undefined) && (missing3 = "href")) { validate63.errors = [{ instancePath: instancePath + "/citation/links/" + i3, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing3 }, message: "must have required property '" + missing3 + "'" }]; return false; } else { const _errs34 = errors; for (const key3 in data14) { if (!((((key3 === "href") || (key3 === "rel")) || (key3 === "media_type")) || (key3 === "text"))) { validate63.errors = [{ instancePath: instancePath + "/citation/links/" + i3, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key3 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs34 === errors) { if (data14.href !== undefined) { let data15 = data14.href; const _errs35 = errors; if (errors === _errs35) { if (errors === _errs35) { if (typeof data15 === "string") { if (!(formats10.test(data15))) { validate63.errors = [{ instancePath: instancePath + "/citation/links/" + i3 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate63.errors = [{ instancePath: instancePath + "/citation/links/" + i3 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid9 = _errs35 === errors; } else { var valid9 = true; } if (valid9) { if (data14.rel !== undefined) { let data16 = data14.rel; const _errs37 = errors; if (errors === _errs37) { if (typeof data16 === "string") { if (!pattern9.test(data16)) { validate63.errors = [{ instancePath: instancePath + "/citation/links/" + i3 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate63.errors = [{ instancePath: instancePath + "/citation/links/" + i3 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid9 = _errs37 === errors; } else { var valid9 = true; } if (valid9) { if (data14.media_type !== undefined) { let data17 = data14.media_type; const _errs39 = errors; if (errors === _errs39) { if (typeof data17 === "string") { if (!pattern3.test(data17)) { validate63.errors = [{ instancePath: instancePath + "/citation/links/" + i3 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate63.errors = [{ instancePath: instancePath + "/citation/links/" + i3 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid9 = _errs39 === errors; } else { var valid9 = true; } if (valid9) { if (data14.text !== undefined) { const _errs41 = errors; if (typeof data14.text !== "string") { validate63.errors = [{ instancePath: instancePath + "/citation/links/" + i3 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid9 = _errs41 === errors; } else { var valid9 = true; } } } } } } } else { validate63.errors = [{ instancePath: instancePath + "/citation/links/" + i3, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid7 = _errs31 === errors; if (!valid7) { break; } } } } else { validate63.errors = [{ instancePath: instancePath + "/citation/links", schemaPath: "#/properties/citation/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid5 = _errs29 === errors; } else { var valid5 = true; } } } } } } else { validate63.errors = [{ instancePath: instancePath + "/citation", schemaPath: "#/properties/citation/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid0 = _errs21 === errors; } else { var valid0 = true; } if (valid0) { if (data.rlinks !== undefined) { let data19 = data.rlinks; const _errs43 = errors; if (errors === _errs43) { if (Array.isArray(data19)) { if (data19.length < 1) { validate63.errors = [{ instancePath: instancePath + "/rlinks", schemaPath: "#/properties/rlinks/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid10 = true; const len4 = data19.length; for (let i4 = 0; i4 < len4; i4++) { let data20 = data19[i4]; const _errs45 = errors; if (errors === _errs45) { if (data20 && typeof data20 == "object" && !Array.isArray(data20)) { let missing4; if ((data20.href === undefined) && (missing4 = "href")) { validate63.errors = [{ instancePath: instancePath + "/rlinks/" + i4, schemaPath: "#/properties/rlinks/items/required", keyword: "required", params: { missingProperty: missing4 }, message: "must have required property '" + missing4 + "'" }]; return false; } else { const _errs47 = errors; for (const key4 in data20) { if (!(((key4 === "href") || (key4 === "media_type")) || (key4 === "hashes"))) { validate63.errors = [{ instancePath: instancePath + "/rlinks/" + i4, schemaPath: "#/properties/rlinks/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key4 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs47 === errors) { if (data20.href !== undefined) { let data21 = data20.href; const _errs48 = errors; if (errors === _errs48) { if (errors === _errs48) { if (typeof data21 === "string") { if (!(formats10.test(data21))) { validate63.errors = [{ instancePath: instancePath + "/rlinks/" + i4 + "/href", schemaPath: "#/properties/rlinks/items/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate63.errors = [{ instancePath: instancePath + "/rlinks/" + i4 + "/href", schemaPath: "#/properties/rlinks/items/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid11 = _errs48 === errors; } else { var valid11 = true; } if (valid11) { if (data20.media_type !== undefined) { let data22 = data20.media_type; const _errs50 = errors; if (errors === _errs50) { if (typeof data22 === "string") { if (!pattern3.test(data22)) { validate63.errors = [{ instancePath: instancePath + "/rlinks/" + i4 + "/media_type", schemaPath: "#/properties/rlinks/items/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate63.errors = [{ instancePath: instancePath + "/rlinks/" + i4 + "/media_type", schemaPath: "#/properties/rlinks/items/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid11 = _errs50 === errors; } else { var valid11 = true; } if (valid11) { if (data20.hashes !== undefined) { let data23 = data20.hashes; const _errs52 = errors; if (errors === _errs52) { if (Array.isArray(data23)) { if (data23.length < 1) { validate63.errors = [{ instancePath: instancePath + "/rlinks/" + i4 + "/hashes", schemaPath: "#/properties/rlinks/items/properties/hashes/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid12 = true; const len5 = data23.length; for (let i5 = 0; i5 < len5; i5++) { let data24 = data23[i5]; const _errs54 = errors; const _errs55 = errors; if (errors === _errs55) { if (data24 && typeof data24 == "object" && !Array.isArray(data24)) { let missing5; if (((data24.value === undefined) && (missing5 = "value")) || ((data24.algorithm === undefined) && (missing5 = "algorithm"))) { validate63.errors = [{ instancePath: instancePath + "/rlinks/" + i4 + "/hashes/" + i5, schemaPath: "#/definitions/hash/required", keyword: "required", params: { missingProperty: missing5 }, message: "must have required property '" + missing5 + "'" }]; return false; } else { const _errs57 = errors; for (const key5 in data24) { if (!((key5 === "algorithm") || (key5 === "value"))) { validate63.errors = [{ instancePath: instancePath + "/rlinks/" + i4 + "/hashes/" + i5, schemaPath: "#/definitions/hash/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key5 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs57 === errors) { if (data24.algorithm !== undefined) { let data25 = data24.algorithm; const _errs58 = errors; if (errors === _errs58) { if (typeof data25 === "string") { if (!pattern3.test(data25)) { validate63.errors = [{ instancePath: instancePath + "/rlinks/" + i4 + "/hashes/" + i5 + "/algorithm", schemaPath: "#/definitions/hash/properties/algorithm/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate63.errors = [{ instancePath: instancePath + "/rlinks/" + i4 + "/hashes/" + i5 + "/algorithm", schemaPath: "#/definitions/hash/properties/algorithm/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid14 = _errs58 === errors; } else { var valid14 = true; } if (valid14) { if (data24.value !== undefined) { const _errs60 = errors; if (typeof data24.value !== "string") { validate63.errors = [{ instancePath: instancePath + "/rlinks/" + i4 + "/hashes/" + i5 + "/value", schemaPath: "#/definitions/hash/properties/value/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid14 = _errs60 === errors; } else { var valid14 = true; } } } } } else { validate63.errors = [{ instancePath: instancePath + "/rlinks/" + i4 + "/hashes/" + i5, schemaPath: "#/definitions/hash/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid12 = _errs54 === errors; if (!valid12) { break; } } } } else { validate63.errors = [{ instancePath: instancePath + "/rlinks/" + i4 + "/hashes", schemaPath: "#/properties/rlinks/items/properties/hashes/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid11 = _errs52 === errors; } else { var valid11 = true; } } } } } } else { validate63.errors = [{ instancePath: instancePath + "/rlinks/" + i4, schemaPath: "#/properties/rlinks/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid10 = _errs45 === errors; if (!valid10) { break; } } } } else { validate63.errors = [{ instancePath: instancePath + "/rlinks", schemaPath: "#/properties/rlinks/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs43 === errors; } else { var valid0 = true; } if (valid0) { if (data.base64 !== undefined) { let data27 = data.base64; const _errs62 = errors; if (errors === _errs62) { if (data27 && typeof data27 == "object" && !Array.isArray(data27)) { let missing6; if ((data27.value === undefined) && (missing6 = "value")) { validate63.errors = [{ instancePath: instancePath + "/base64", schemaPath: "#/properties/base64/required", keyword: "required", params: { missingProperty: missing6 }, message: "must have required property '" + missing6 + "'" }]; return false; } else { const _errs64 = errors; for (const key6 in data27) { if (!(((key6 === "filename") || (key6 === "media_type")) || (key6 === "value"))) { validate63.errors = [{ instancePath: instancePath + "/base64", schemaPath: "#/properties/base64/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key6 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs64 === errors) { if (data27.filename !== undefined) { let data28 = data27.filename; const _errs65 = errors; if (errors === _errs65) { if (errors === _errs65) { if (typeof data28 === "string") { if (!(formats10.test(data28))) { validate63.errors = [{ instancePath: instancePath + "/base64/filename", schemaPath: "#/properties/base64/properties/filename/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate63.errors = [{ instancePath: instancePath + "/base64/filename", schemaPath: "#/properties/base64/properties/filename/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid15 = _errs65 === errors; } else { var valid15 = true; } if (valid15) { if (data27.media_type !== undefined) { let data29 = data27.media_type; const _errs67 = errors; if (errors === _errs67) { if (typeof data29 === "string") { if (!pattern3.test(data29)) { validate63.errors = [{ instancePath: instancePath + "/base64/media_type", schemaPath: "#/properties/base64/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate63.errors = [{ instancePath: instancePath + "/base64/media_type", schemaPath: "#/properties/base64/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid15 = _errs67 === errors; } else { var valid15 = true; } if (valid15) { if (data27.value !== undefined) { const _errs69 = errors; if (typeof data27.value !== "string") { validate63.errors = [{ instancePath: instancePath + "/base64/value", schemaPath: "#/properties/base64/properties/value/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid15 = _errs69 === errors; } else { var valid15 = true; } } } } } } else { validate63.errors = [{ instancePath: instancePath + "/base64", schemaPath: "#/properties/base64/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid0 = _errs62 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs71 = errors; if (typeof data.remarks !== "string") { validate63.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs71 === errors; } else { var valid0 = true; } } } } } } } } } } } } else { validate63.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate63.errors = vErrors; return errors === 0; } function validate62(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/back_matter" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { const _errs1 = errors; for (const key0 in data) { if (!(key0 === "resources")) { validate62.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.resources !== undefined) { let data0 = data.resources; const _errs2 = errors; if (errors === _errs2) { if (Array.isArray(data0)) { if (data0.length < 1) { validate62.errors = [{ instancePath: instancePath + "/resources", schemaPath: "#/properties/resources/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data0.length; for (let i0 = 0; i0 < len0; i0++) { const _errs4 = errors; if (!(validate63(data0[i0], { instancePath: instancePath + "/resources/" + i0, parentData: data0, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors); errors = vErrors.length; } var valid1 = _errs4 === errors; if (!valid1) { break; } } } } else { validate62.errors = [{ instancePath: instancePath + "/resources", schemaPath: "#/properties/resources/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } } } } else { validate62.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate62.errors = vErrors; return errors === 0; } function validate21(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/catalog" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if (((data.uuid === undefined) && (missing0 = "uuid")) || ((data.metadata === undefined) && (missing0 = "metadata"))) { validate21.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!((((((key0 === "uuid") || (key0 === "metadata")) || (key0 === "params")) || (key0 === "controls")) || (key0 === "groups")) || (key0 === "back_matter"))) { validate21.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.uuid !== undefined) { let data0 = data.uuid; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern0.test(data0)) { validate21.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate21.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.metadata !== undefined) { const _errs4 = errors; if (!(validate22(data.metadata, { instancePath: instancePath + "/metadata", parentData: data, parentDataProperty: "metadata", rootData }))) { vErrors = vErrors === null ? validate22.errors : vErrors.concat(validate22.errors); errors = vErrors.length; } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.params !== undefined) { let data2 = data.params; const _errs5 = errors; if (errors === _errs5) { if (Array.isArray(data2)) { if (data2.length < 1) { validate21.errors = [{ instancePath: instancePath + "/params", schemaPath: "#/properties/params/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data2.length; for (let i0 = 0; i0 < len0; i0++) { const _errs7 = errors; if (!(validate44(data2[i0], { instancePath: instancePath + "/params/" + i0, parentData: data2, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate44.errors : vErrors.concat(validate44.errors); errors = vErrors.length; } var valid1 = _errs7 === errors; if (!valid1) { break; } } } } else { validate21.errors = [{ instancePath: instancePath + "/params", schemaPath: "#/properties/params/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs5 === errors; } else { var valid0 = true; } if (valid0) { if (data.controls !== undefined) { let data4 = data.controls; const _errs8 = errors; if (errors === _errs8) { if (Array.isArray(data4)) { if (data4.length < 1) { validate21.errors = [{ instancePath: instancePath + "/controls", schemaPath: "#/properties/controls/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data4.length; for (let i1 = 0; i1 < len1; i1++) { const _errs10 = errors; if (!(validate49(data4[i1], { instancePath: instancePath + "/controls/" + i1, parentData: data4, parentDataProperty: i1, rootData }))) { vErrors = vErrors === null ? validate49.errors : vErrors.concat(validate49.errors); errors = vErrors.length; } var valid2 = _errs10 === errors; if (!valid2) { break; } } } } else { validate21.errors = [{ instancePath: instancePath + "/controls", schemaPath: "#/properties/controls/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs8 === errors; } else { var valid0 = true; } if (valid0) { if (data.groups !== undefined) { let data6 = data.groups; const _errs11 = errors; if (errors === _errs11) { if (Array.isArray(data6)) { if (data6.length < 1) { validate21.errors = [{ instancePath: instancePath + "/groups", schemaPath: "#/properties/groups/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid3 = true; const len2 = data6.length; for (let i2 = 0; i2 < len2; i2++) { const _errs13 = errors; if (!(validate56(data6[i2], { instancePath: instancePath + "/groups/" + i2, parentData: data6, parentDataProperty: i2, rootData }))) { vErrors = vErrors === null ? validate56.errors : vErrors.concat(validate56.errors); errors = vErrors.length; } var valid3 = _errs13 === errors; if (!valid3) { break; } } } } else { validate21.errors = [{ instancePath: instancePath + "/groups", schemaPath: "#/properties/groups/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs11 === errors; } else { var valid0 = true; } if (valid0) { if (data.back_matter !== undefined) { const _errs14 = errors; if (!(validate62(data.back_matter, { instancePath: instancePath + "/back_matter", parentData: data, parentDataProperty: "back_matter", rootData }))) { vErrors = vErrors === null ? validate62.errors : vErrors.concat(validate62.errors); errors = vErrors.length; } var valid0 = _errs14 === errors; } else { var valid0 = true; } } } } } } } } } else { validate21.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate21.errors = vErrors; return errors === 0; } const schema81 = { "title": "Profile", "description": "Each OSCAL profile is defined by a Profile element", "$id": "#/definitions/profile", "type": "object", "properties": { "uuid": { "title": "Catalog Universally Unique Identifier", "description": "A globally unique identifier for this profile instance. This UUID should be changed when this document is revised.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "metadata": { "$ref": "#/definitions/metadata" }, "imports": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/import" } }, "merge": { "$ref": "#/definitions/merge" }, "modify": { "$ref": "#/definitions/modify" }, "back_matter": { "$ref": "#/definitions/back_matter" } }, "required": ["uuid", "metadata", "imports"], "additionalProperties": false }; const schema82 = { "title": "Import resource", "description": "The import designates a catalog, profile, or other resource to be included (referenced and potentially modified) by this profile. The import also identifies which controls to select using the include_all, include_controls, and exclude_controls directives.", "$id": "#/definitions/import", "type": "object", "properties": { "href": { "title": "Catalog or Profile Reference", "description": "A resolvable URL reference to the base catalog or profile that this profile is tailoring.", "type": "string", "format": "uri-reference" }, "include_all": { "$ref": "#/definitions/include_all" }, "include_controls": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/select_control_by_id" } }, "exclude_controls": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/select_control_by_id" } } }, "required": ["href"], "additionalProperties": false }; const schema83 = { "title": "Insert All", "description": "Insert all controls from the imported catalog or profile resources identified in the import directive.", "$id": "#/definitions/include_all", "type": "object", "additionalProperties": false }; const schema84 = { "title": "Select Control", "description": "Used to select a control for inclusion/exclusion based on one or more control identifiers. A set of statement identifiers can be used to target the inclusion/exclusion to only specific control statements providing more granularity over the specific statements that are within the asessment scope.", "$id": "#/definitions/select_control_by_id", "type": "object", "properties": { "control_id": { "title": "Control Identifier Reference", "description": "A reference to a control with a corresponding id value.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "statement_ids": { "type": "array", "minItems": 1, "items": { "title": "Include Specific Statements", "description": "Used to constrain the selection to only specificity identified statements.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" } } }, "required": ["control_id"], "additionalProperties": false }; function validate71(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/import" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((data.href === undefined) && (missing0 = "href")) { validate71.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!((((key0 === "href") || (key0 === "include_all")) || (key0 === "include_controls")) || (key0 === "exclude_controls"))) { validate71.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.href !== undefined) { let data0 = data.href; const _errs2 = errors; if (errors === _errs2) { if (errors === _errs2) { if (typeof data0 === "string") { if (!(formats10.test(data0))) { validate71.errors = [{ instancePath: instancePath + "/href", schemaPath: "#/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate71.errors = [{ instancePath: instancePath + "/href", schemaPath: "#/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.include_all !== undefined) { let data1 = data.include_all; const _errs4 = errors; const _errs5 = errors; if (errors === _errs5) { if (data1 && typeof data1 == "object" && !Array.isArray(data1)) { for (const key1 in data1) { validate71.errors = [{ instancePath: instancePath + "/include_all", schemaPath: "#/definitions/include_all/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } else { validate71.errors = [{ instancePath: instancePath + "/include_all", schemaPath: "#/definitions/include_all/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.include_controls !== undefined) { let data2 = data.include_controls; const _errs8 = errors; if (errors === _errs8) { if (Array.isArray(data2)) { if (data2.length < 1) { validate71.errors = [{ instancePath: instancePath + "/include_controls", schemaPath: "#/properties/include_controls/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len0 = data2.length; for (let i0 = 0; i0 < len0; i0++) { let data3 = data2[i0]; const _errs10 = errors; const _errs11 = errors; if (errors === _errs11) { if (data3 && typeof data3 == "object" && !Array.isArray(data3)) { let missing1; if ((data3.control_id === undefined) && (missing1 = "control_id")) { validate71.errors = [{ instancePath: instancePath + "/include_controls/" + i0, schemaPath: "#/definitions/select_control_by_id/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs13 = errors; for (const key2 in data3) { if (!((key2 === "control_id") || (key2 === "statement_ids"))) { validate71.errors = [{ instancePath: instancePath + "/include_controls/" + i0, schemaPath: "#/definitions/select_control_by_id/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs13 === errors) { if (data3.control_id !== undefined) { let data4 = data3.control_id; const _errs14 = errors; if (errors === _errs14) { if (typeof data4 === "string") { if (!pattern9.test(data4)) { validate71.errors = [{ instancePath: instancePath + "/include_controls/" + i0 + "/control_id", schemaPath: "#/definitions/select_control_by_id/properties/control_id/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate71.errors = [{ instancePath: instancePath + "/include_controls/" + i0 + "/control_id", schemaPath: "#/definitions/select_control_by_id/properties/control_id/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs14 === errors; } else { var valid4 = true; } if (valid4) { if (data3.statement_ids !== undefined) { let data5 = data3.statement_ids; const _errs16 = errors; if (errors === _errs16) { if (Array.isArray(data5)) { if (data5.length < 1) { validate71.errors = [{ instancePath: instancePath + "/include_controls/" + i0 + "/statement_ids", schemaPath: "#/definitions/select_control_by_id/properties/statement_ids/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid5 = true; const len1 = data5.length; for (let i1 = 0; i1 < len1; i1++) { let data6 = data5[i1]; const _errs18 = errors; if (errors === _errs18) { if (typeof data6 === "string") { if (!pattern9.test(data6)) { validate71.errors = [{ instancePath: instancePath + "/include_controls/" + i0 + "/statement_ids/" + i1, schemaPath: "#/definitions/select_control_by_id/properties/statement_ids/items/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate71.errors = [{ instancePath: instancePath + "/include_controls/" + i0 + "/statement_ids/" + i1, schemaPath: "#/definitions/select_control_by_id/properties/statement_ids/items/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid5 = _errs18 === errors; if (!valid5) { break; } } } } else { validate71.errors = [{ instancePath: instancePath + "/include_controls/" + i0 + "/statement_ids", schemaPath: "#/definitions/select_control_by_id/properties/statement_ids/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid4 = _errs16 === errors; } else { var valid4 = true; } } } } } else { validate71.errors = [{ instancePath: instancePath + "/include_controls/" + i0, schemaPath: "#/definitions/select_control_by_id/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs10 === errors; if (!valid2) { break; } } } } else { validate71.errors = [{ instancePath: instancePath + "/include_controls", schemaPath: "#/properties/include_controls/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs8 === errors; } else { var valid0 = true; } if (valid0) { if (data.exclude_controls !== undefined) { let data7 = data.exclude_controls; const _errs20 = errors; if (errors === _errs20) { if (Array.isArray(data7)) { if (data7.length < 1) { validate71.errors = [{ instancePath: instancePath + "/exclude_controls", schemaPath: "#/properties/exclude_controls/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid6 = true; const len2 = data7.length; for (let i2 = 0; i2 < len2; i2++) { let data8 = data7[i2]; const _errs22 = errors; const _errs23 = errors; if (errors === _errs23) { if (data8 && typeof data8 == "object" && !Array.isArray(data8)) { let missing2; if ((data8.control_id === undefined) && (missing2 = "control_id")) { validate71.errors = [{ instancePath: instancePath + "/exclude_controls/" + i2, schemaPath: "#/definitions/select_control_by_id/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" }]; return false; } else { const _errs25 = errors; for (const key3 in data8) { if (!((key3 === "control_id") || (key3 === "statement_ids"))) { validate71.errors = [{ instancePath: instancePath + "/exclude_controls/" + i2, schemaPath: "#/definitions/select_control_by_id/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key3 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs25 === errors) { if (data8.control_id !== undefined) { let data9 = data8.control_id; const _errs26 = errors; if (errors === _errs26) { if (typeof data9 === "string") { if (!pattern9.test(data9)) { validate71.errors = [{ instancePath: instancePath + "/exclude_controls/" + i2 + "/control_id", schemaPath: "#/definitions/select_control_by_id/properties/control_id/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate71.errors = [{ instancePath: instancePath + "/exclude_controls/" + i2 + "/control_id", schemaPath: "#/definitions/select_control_by_id/properties/control_id/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid8 = _errs26 === errors; } else { var valid8 = true; } if (valid8) { if (data8.statement_ids !== undefined) { let data10 = data8.statement_ids; const _errs28 = errors; if (errors === _errs28) { if (Array.isArray(data10)) { if (data10.length < 1) { validate71.errors = [{ instancePath: instancePath + "/exclude_controls/" + i2 + "/statement_ids", schemaPath: "#/definitions/select_control_by_id/properties/statement_ids/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid9 = true; const len3 = data10.length; for (let i3 = 0; i3 < len3; i3++) { let data11 = data10[i3]; const _errs30 = errors; if (errors === _errs30) { if (typeof data11 === "string") { if (!pattern9.test(data11)) { validate71.errors = [{ instancePath: instancePath + "/exclude_controls/" + i2 + "/statement_ids/" + i3, schemaPath: "#/definitions/select_control_by_id/properties/statement_ids/items/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate71.errors = [{ instancePath: instancePath + "/exclude_controls/" + i2 + "/statement_ids/" + i3, schemaPath: "#/definitions/select_control_by_id/properties/statement_ids/items/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid9 = _errs30 === errors; if (!valid9) { break; } } } } else { validate71.errors = [{ instancePath: instancePath + "/exclude_controls/" + i2 + "/statement_ids", schemaPath: "#/definitions/select_control_by_id/properties/statement_ids/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid8 = _errs28 === errors; } else { var valid8 = true; } } } } } else { validate71.errors = [{ instancePath: instancePath + "/exclude_controls/" + i2, schemaPath: "#/definitions/select_control_by_id/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid6 = _errs22 === errors; if (!valid6) { break; } } } } else { validate71.errors = [{ instancePath: instancePath + "/exclude_controls", schemaPath: "#/properties/exclude_controls/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs20 === errors; } else { var valid0 = true; } } } } } } } else { validate71.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate71.errors = vErrors; return errors === 0; } const schema86 = { "title": "Merge controls", "description": "A Merge element merges controls in resolution.", "$id": "#/definitions/merge", "type": "object", "properties": { "combine": { "$ref": "#/definitions/combine" }, "as_is": { "$ref": "#/definitions/as_is" }, "custom": { "$ref": "#/definitions/custom" } }, "additionalProperties": false }; const schema87 = { "title": "Combination rule", "description": "A Combine element defines whether and how to combine multiple (competing) versions of the same control", "$id": "#/definitions/combine", "type": "object", "properties": { "method": { "title": "Combination method", "description": "How clashing controls should be handled", "type": "string", "pattern": "^\\S(.*\\S)?$", "enum": ["use_first", "merge", "keep"] } }, "additionalProperties": false }; const schema88 = { "title": "As is", "description": "An As_is element indicates that the controls should be structured in resolution as they are structured in their source catalogs. It does not contain any elements or attributes.", "$id": "#/definitions/as_is", "type": "boolean" }; const schema89 = { "title": "Custom grouping", "description": "A Custom element frames a structure for embedding represented controls in resolution.", "$id": "#/definitions/custom", "type": "object", "properties": { "groups": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/profile_group" } }, "insert_controls": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/insert_controls" } } }, "additionalProperties": false }; const schema90 = { "title": "Control group", "description": "A group of (selected) controls or of groups of controls", "$id": "#/definitions/profile_group", "type": "object", "properties": { "id": { "title": "Group Identifier", "description": "A unique identifier for a specific group instance that can be used to reference the group within this and in other OSCAL documents. This identifier's uniqueness is document scoped and is intended to be consistent for the same group across minor revisions of the document.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "class": { "title": "Group Class", "description": "A textual label that provides a sub_type or characterization of the group.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "title": { "title": "Group Title", "description": "A name given to the group, which may be used by a tool for display and navigation.", "type": "string" }, "params": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/parameter" } }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "parts": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/part" } }, "groups": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/profile_group" } }, "insert_controls": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/insert_controls" } } }, "required": ["title"], "additionalProperties": false }; const schema92 = { "title": "Select controls", "description": "Specifies which controls to use in the containing context.", "$id": "#/definitions/insert_controls", "type": "object", "properties": { "order": { "title": "Order", "description": "A designation of how a selection of controls in a profile is to be ordered.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$", "enum": ["keep", "ascending", "descending"] }, "include_all": { "$ref": "#/definitions/include_all" }, "include_controls": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/call" } }, "exclude_controls": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/call" } } }, "additionalProperties": false }; const schema94 = { "title": "Call", "description": "Call a control by its ID", "$id": "#/definitions/call", "type": "object", "properties": { "with_child_controls": { "title": "Include contained controls with control", "description": "When a control is included, whether its child (dependent) controls are also included.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$", "enum": ["yes", "no"] }, "with_ids": { "type": "array", "minItems": 1, "items": { "title": "Match Controls by Identifier", "description": "", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" } }, "matching": { "type": "array", "minItems": 1, "items": { "title": "Match Controls by Pattern", "description": "Select controls by (regular expression) match on ID", "type": "object", "properties": { "pattern": { "title": "Pattern", "description": "A glob expression matching the IDs of one or more controls to be selected.", "type": "string", "pattern": "^\\S(.*\\S)?$" } }, "additionalProperties": false } } }, "additionalProperties": false }; function validate79(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/insert_controls" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { const _errs1 = errors; for (const key0 in data) { if (!((((key0 === "order") || (key0 === "include_all")) || (key0 === "include_controls")) || (key0 === "exclude_controls"))) { validate79.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.order !== undefined) { let data0 = data.order; const _errs2 = errors; if (!(((data0 === "keep") || (data0 === "ascending")) || (data0 === "descending"))) { validate79.errors = [{ instancePath: instancePath + "/order", schemaPath: "#/properties/order/enum", keyword: "enum", params: { allowedValues: schema92.properties.order.enum }, message: "must be equal to one of the allowed values" }]; return false; } if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern9.test(data0)) { validate79.errors = [{ instancePath: instancePath + "/order", schemaPath: "#/properties/order/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate79.errors = [{ instancePath: instancePath + "/order", schemaPath: "#/properties/order/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.include_all !== undefined) { let data1 = data.include_all; const _errs4 = errors; const _errs5 = errors; if (errors === _errs5) { if (data1 && typeof data1 == "object" && !Array.isArray(data1)) { for (const key1 in data1) { validate79.errors = [{ instancePath: instancePath + "/include_all", schemaPath: "#/definitions/include_all/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } else { validate79.errors = [{ instancePath: instancePath + "/include_all", schemaPath: "#/definitions/include_all/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.include_controls !== undefined) { let data2 = data.include_controls; const _errs8 = errors; if (errors === _errs8) { if (Array.isArray(data2)) { if (data2.length < 1) { validate79.errors = [{ instancePath: instancePath + "/include_controls", schemaPath: "#/properties/include_controls/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len0 = data2.length; for (let i0 = 0; i0 < len0; i0++) { let data3 = data2[i0]; const _errs10 = errors; const _errs11 = errors; if (errors === _errs11) { if (data3 && typeof data3 == "object" && !Array.isArray(data3)) { const _errs13 = errors; for (const key2 in data3) { if (!(((key2 === "with_child_controls") || (key2 === "with_ids")) || (key2 === "matching"))) { validate79.errors = [{ instancePath: instancePath + "/include_controls/" + i0, schemaPath: "#/definitions/call/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs13 === errors) { if (data3.with_child_controls !== undefined) { let data4 = data3.with_child_controls; const _errs14 = errors; if (!((data4 === "yes") || (data4 === "no"))) { validate79.errors = [{ instancePath: instancePath + "/include_controls/" + i0 + "/with_child_controls", schemaPath: "#/definitions/call/properties/with_child_controls/enum", keyword: "enum", params: { allowedValues: schema94.properties.with_child_controls.enum }, message: "must be equal to one of the allowed values" }]; return false; } if (errors === _errs14) { if (typeof data4 === "string") { if (!pattern9.test(data4)) { validate79.errors = [{ instancePath: instancePath + "/include_controls/" + i0 + "/with_child_controls", schemaPath: "#/definitions/call/properties/with_child_controls/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate79.errors = [{ instancePath: instancePath + "/include_controls/" + i0 + "/with_child_controls", schemaPath: "#/definitions/call/properties/with_child_controls/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs14 === errors; } else { var valid4 = true; } if (valid4) { if (data3.with_ids !== undefined) { let data5 = data3.with_ids; const _errs16 = errors; if (errors === _errs16) { if (Array.isArray(data5)) { if (data5.length < 1) { validate79.errors = [{ instancePath: instancePath + "/include_controls/" + i0 + "/with_ids", schemaPath: "#/definitions/call/properties/with_ids/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid5 = true; const len1 = data5.length; for (let i1 = 0; i1 < len1; i1++) { let data6 = data5[i1]; const _errs18 = errors; if (errors === _errs18) { if (typeof data6 === "string") { if (!pattern9.test(data6)) { validate79.errors = [{ instancePath: instancePath + "/include_controls/" + i0 + "/with_ids/" + i1, schemaPath: "#/definitions/call/properties/with_ids/items/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate79.errors = [{ instancePath: instancePath + "/include_controls/" + i0 + "/with_ids/" + i1, schemaPath: "#/definitions/call/properties/with_ids/items/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid5 = _errs18 === errors; if (!valid5) { break; } } } } else { validate79.errors = [{ instancePath: instancePath + "/include_controls/" + i0 + "/with_ids", schemaPath: "#/definitions/call/properties/with_ids/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid4 = _errs16 === errors; } else { var valid4 = true; } if (valid4) { if (data3.matching !== undefined) { let data7 = data3.matching; const _errs20 = errors; if (errors === _errs20) { if (Array.isArray(data7)) { if (data7.length < 1) { validate79.errors = [{ instancePath: instancePath + "/include_controls/" + i0 + "/matching", schemaPath: "#/definitions/call/properties/matching/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid6 = true; const len2 = data7.length; for (let i2 = 0; i2 < len2; i2++) { let data8 = data7[i2]; const _errs22 = errors; if (errors === _errs22) { if (data8 && typeof data8 == "object" && !Array.isArray(data8)) { const _errs24 = errors; for (const key3 in data8) { if (!(key3 === "pattern")) { validate79.errors = [{ instancePath: instancePath + "/include_controls/" + i0 + "/matching/" + i2, schemaPath: "#/definitions/call/properties/matching/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key3 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs24 === errors) { if (data8.pattern !== undefined) { let data9 = data8.pattern; const _errs25 = errors; if (errors === _errs25) { if (typeof data9 === "string") { if (!pattern3.test(data9)) { validate79.errors = [{ instancePath: instancePath + "/include_controls/" + i0 + "/matching/" + i2 + "/pattern", schemaPath: "#/definitions/call/properties/matching/items/properties/pattern/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate79.errors = [{ instancePath: instancePath + "/include_controls/" + i0 + "/matching/" + i2 + "/pattern", schemaPath: "#/definitions/call/properties/matching/items/properties/pattern/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } } } else { validate79.errors = [{ instancePath: instancePath + "/include_controls/" + i0 + "/matching/" + i2, schemaPath: "#/definitions/call/properties/matching/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid6 = _errs22 === errors; if (!valid6) { break; } } } } else { validate79.errors = [{ instancePath: instancePath + "/include_controls/" + i0 + "/matching", schemaPath: "#/definitions/call/properties/matching/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid4 = _errs20 === errors; } else { var valid4 = true; } } } } } else { validate79.errors = [{ instancePath: instancePath + "/include_controls/" + i0, schemaPath: "#/definitions/call/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs10 === errors; if (!valid2) { break; } } } } else { validate79.errors = [{ instancePath: instancePath + "/include_controls", schemaPath: "#/properties/include_controls/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs8 === errors; } else { var valid0 = true; } if (valid0) { if (data.exclude_controls !== undefined) { let data10 = data.exclude_controls; const _errs27 = errors; if (errors === _errs27) { if (Array.isArray(data10)) { if (data10.length < 1) { validate79.errors = [{ instancePath: instancePath + "/exclude_controls", schemaPath: "#/properties/exclude_controls/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid8 = true; const len3 = data10.length; for (let i3 = 0; i3 < len3; i3++) { let data11 = data10[i3]; const _errs29 = errors; const _errs30 = errors; if (errors === _errs30) { if (data11 && typeof data11 == "object" && !Array.isArray(data11)) { const _errs32 = errors; for (const key4 in data11) { if (!(((key4 === "with_child_controls") || (key4 === "with_ids")) || (key4 === "matching"))) { validate79.errors = [{ instancePath: instancePath + "/exclude_controls/" + i3, schemaPath: "#/definitions/call/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key4 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs32 === errors) { if (data11.with_child_controls !== undefined) { let data12 = data11.with_child_controls; const _errs33 = errors; if (!((data12 === "yes") || (data12 === "no"))) { validate79.errors = [{ instancePath: instancePath + "/exclude_controls/" + i3 + "/with_child_controls", schemaPath: "#/definitions/call/properties/with_child_controls/enum", keyword: "enum", params: { allowedValues: schema94.properties.with_child_controls.enum }, message: "must be equal to one of the allowed values" }]; return false; } if (errors === _errs33) { if (typeof data12 === "string") { if (!pattern9.test(data12)) { validate79.errors = [{ instancePath: instancePath + "/exclude_controls/" + i3 + "/with_child_controls", schemaPath: "#/definitions/call/properties/with_child_controls/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate79.errors = [{ instancePath: instancePath + "/exclude_controls/" + i3 + "/with_child_controls", schemaPath: "#/definitions/call/properties/with_child_controls/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid10 = _errs33 === errors; } else { var valid10 = true; } if (valid10) { if (data11.with_ids !== undefined) { let data13 = data11.with_ids; const _errs35 = errors; if (errors === _errs35) { if (Array.isArray(data13)) { if (data13.length < 1) { validate79.errors = [{ instancePath: instancePath + "/exclude_controls/" + i3 + "/with_ids", schemaPath: "#/definitions/call/properties/with_ids/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid11 = true; const len4 = data13.length; for (let i4 = 0; i4 < len4; i4++) { let data14 = data13[i4]; const _errs37 = errors; if (errors === _errs37) { if (typeof data14 === "string") { if (!pattern9.test(data14)) { validate79.errors = [{ instancePath: instancePath + "/exclude_controls/" + i3 + "/with_ids/" + i4, schemaPath: "#/definitions/call/properties/with_ids/items/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate79.errors = [{ instancePath: instancePath + "/exclude_controls/" + i3 + "/with_ids/" + i4, schemaPath: "#/definitions/call/properties/with_ids/items/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid11 = _errs37 === errors; if (!valid11) { break; } } } } else { validate79.errors = [{ instancePath: instancePath + "/exclude_controls/" + i3 + "/with_ids", schemaPath: "#/definitions/call/properties/with_ids/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid10 = _errs35 === errors; } else { var valid10 = true; } if (valid10) { if (data11.matching !== undefined) { let data15 = data11.matching; const _errs39 = errors; if (errors === _errs39) { if (Array.isArray(data15)) { if (data15.length < 1) { validate79.errors = [{ instancePath: instancePath + "/exclude_controls/" + i3 + "/matching", schemaPath: "#/definitions/call/properties/matching/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid12 = true; const len5 = data15.length; for (let i5 = 0; i5 < len5; i5++) { let data16 = data15[i5]; const _errs41 = errors; if (errors === _errs41) { if (data16 && typeof data16 == "object" && !Array.isArray(data16)) { const _errs43 = errors; for (const key5 in data16) { if (!(key5 === "pattern")) { validate79.errors = [{ instancePath: instancePath + "/exclude_controls/" + i3 + "/matching/" + i5, schemaPath: "#/definitions/call/properties/matching/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key5 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs43 === errors) { if (data16.pattern !== undefined) { let data17 = data16.pattern; const _errs44 = errors; if (errors === _errs44) { if (typeof data17 === "string") { if (!pattern3.test(data17)) { validate79.errors = [{ instancePath: instancePath + "/exclude_controls/" + i3 + "/matching/" + i5 + "/pattern", schemaPath: "#/definitions/call/properties/matching/items/properties/pattern/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate79.errors = [{ instancePath: instancePath + "/exclude_controls/" + i3 + "/matching/" + i5 + "/pattern", schemaPath: "#/definitions/call/properties/matching/items/properties/pattern/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } } } else { validate79.errors = [{ instancePath: instancePath + "/exclude_controls/" + i3 + "/matching/" + i5, schemaPath: "#/definitions/call/properties/matching/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid12 = _errs41 === errors; if (!valid12) { break; } } } } else { validate79.errors = [{ instancePath: instancePath + "/exclude_controls/" + i3 + "/matching", schemaPath: "#/definitions/call/properties/matching/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid10 = _errs39 === errors; } else { var valid10 = true; } } } } } else { validate79.errors = [{ instancePath: instancePath + "/exclude_controls/" + i3, schemaPath: "#/definitions/call/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid8 = _errs29 === errors; if (!valid8) { break; } } } } else { validate79.errors = [{ instancePath: instancePath + "/exclude_controls", schemaPath: "#/properties/exclude_controls/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs27 === errors; } else { var valid0 = true; } } } } } } else { validate79.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate79.errors = vErrors; return errors === 0; } const wrapper3 = { validate: validate75 }; function validate75(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/profile_group" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((data.title === undefined) && (missing0 = "title")) { validate75.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(func8.call(schema90.properties, key0))) { validate75.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.id !== undefined) { let data0 = data.id; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern9.test(data0)) { validate75.errors = [{ instancePath: instancePath + "/id", schemaPath: "#/properties/id/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate75.errors = [{ instancePath: instancePath + "/id", schemaPath: "#/properties/id/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.class !== undefined) { let data1 = data.class; const _errs4 = errors; if (errors === _errs4) { if (typeof data1 === "string") { if (!pattern9.test(data1)) { validate75.errors = [{ instancePath: instancePath + "/class", schemaPath: "#/properties/class/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate75.errors = [{ instancePath: instancePath + "/class", schemaPath: "#/properties/class/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.title !== undefined) { const _errs6 = errors; if (typeof data.title !== "string") { validate75.errors = [{ instancePath: instancePath + "/title", schemaPath: "#/properties/title/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.params !== undefined) { let data3 = data.params; const _errs8 = errors; if (errors === _errs8) { if (Array.isArray(data3)) { if (data3.length < 1) { validate75.errors = [{ instancePath: instancePath + "/params", schemaPath: "#/properties/params/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data3.length; for (let i0 = 0; i0 < len0; i0++) { const _errs10 = errors; if (!(validate44(data3[i0], { instancePath: instancePath + "/params/" + i0, parentData: data3, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate44.errors : vErrors.concat(validate44.errors); errors = vErrors.length; } var valid1 = _errs10 === errors; if (!valid1) { break; } } } } else { validate75.errors = [{ instancePath: instancePath + "/params", schemaPath: "#/properties/params/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs8 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data5 = data.props; const _errs11 = errors; if (errors === _errs11) { if (Array.isArray(data5)) { if (data5.length < 1) { validate75.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data5.length; for (let i1 = 0; i1 < len1; i1++) { const _errs13 = errors; if (!(validate24(data5[i1], { instancePath: instancePath + "/props/" + i1, parentData: data5, parentDataProperty: i1, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid2 = _errs13 === errors; if (!valid2) { break; } } } } else { validate75.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs11 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data7 = data.links; const _errs14 = errors; if (errors === _errs14) { if (Array.isArray(data7)) { if (data7.length < 1) { validate75.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid3 = true; const len2 = data7.length; for (let i2 = 0; i2 < len2; i2++) { let data8 = data7[i2]; const _errs16 = errors; const _errs17 = errors; if (errors === _errs17) { if (data8 && typeof data8 == "object" && !Array.isArray(data8)) { let missing1; if ((data8.href === undefined) && (missing1 = "href")) { validate75.errors = [{ instancePath: instancePath + "/links/" + i2, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs19 = errors; for (const key1 in data8) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate75.errors = [{ instancePath: instancePath + "/links/" + i2, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs19 === errors) { if (data8.href !== undefined) { let data9 = data8.href; const _errs20 = errors; if (errors === _errs20) { if (errors === _errs20) { if (typeof data9 === "string") { if (!(formats10.test(data9))) { validate75.errors = [{ instancePath: instancePath + "/links/" + i2 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate75.errors = [{ instancePath: instancePath + "/links/" + i2 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid5 = _errs20 === errors; } else { var valid5 = true; } if (valid5) { if (data8.rel !== undefined) { let data10 = data8.rel; const _errs22 = errors; if (errors === _errs22) { if (typeof data10 === "string") { if (!pattern9.test(data10)) { validate75.errors = [{ instancePath: instancePath + "/links/" + i2 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate75.errors = [{ instancePath: instancePath + "/links/" + i2 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid5 = _errs22 === errors; } else { var valid5 = true; } if (valid5) { if (data8.media_type !== undefined) { let data11 = data8.media_type; const _errs24 = errors; if (errors === _errs24) { if (typeof data11 === "string") { if (!pattern3.test(data11)) { validate75.errors = [{ instancePath: instancePath + "/links/" + i2 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate75.errors = [{ instancePath: instancePath + "/links/" + i2 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid5 = _errs24 === errors; } else { var valid5 = true; } if (valid5) { if (data8.text !== undefined) { const _errs26 = errors; if (typeof data8.text !== "string") { validate75.errors = [{ instancePath: instancePath + "/links/" + i2 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid5 = _errs26 === errors; } else { var valid5 = true; } } } } } } } else { validate75.errors = [{ instancePath: instancePath + "/links/" + i2, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid3 = _errs16 === errors; if (!valid3) { break; } } } } else { validate75.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs14 === errors; } else { var valid0 = true; } if (valid0) { if (data.parts !== undefined) { let data13 = data.parts; const _errs28 = errors; if (errors === _errs28) { if (Array.isArray(data13)) { if (data13.length < 1) { validate75.errors = [{ instancePath: instancePath + "/parts", schemaPath: "#/properties/parts/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid6 = true; const len3 = data13.length; for (let i3 = 0; i3 < len3; i3++) { const _errs30 = errors; if (!(validate52(data13[i3], { instancePath: instancePath + "/parts/" + i3, parentData: data13, parentDataProperty: i3, rootData }))) { vErrors = vErrors === null ? validate52.errors : vErrors.concat(validate52.errors); errors = vErrors.length; } var valid6 = _errs30 === errors; if (!valid6) { break; } } } } else { validate75.errors = [{ instancePath: instancePath + "/parts", schemaPath: "#/properties/parts/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs28 === errors; } else { var valid0 = true; } if (valid0) { if (data.groups !== undefined) { let data15 = data.groups; const _errs31 = errors; if (errors === _errs31) { if (Array.isArray(data15)) { if (data15.length < 1) { validate75.errors = [{ instancePath: instancePath + "/groups", schemaPath: "#/properties/groups/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid7 = true; const len4 = data15.length; for (let i4 = 0; i4 < len4; i4++) { const _errs33 = errors; if (!(wrapper3.validate(data15[i4], { instancePath: instancePath + "/groups/" + i4, parentData: data15, parentDataProperty: i4, rootData }))) { vErrors = vErrors === null ? wrapper3.validate.errors : vErrors.concat(wrapper3.validate.errors); errors = vErrors.length; } var valid7 = _errs33 === errors; if (!valid7) { break; } } } } else { validate75.errors = [{ instancePath: instancePath + "/groups", schemaPath: "#/properties/groups/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs31 === errors; } else { var valid0 = true; } if (valid0) { if (data.insert_controls !== undefined) { let data17 = data.insert_controls; const _errs34 = errors; if (errors === _errs34) { if (Array.isArray(data17)) { if (data17.length < 1) { validate75.errors = [{ instancePath: instancePath + "/insert_controls", schemaPath: "#/properties/insert_controls/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid8 = true; const len5 = data17.length; for (let i5 = 0; i5 < len5; i5++) { const _errs36 = errors; if (!(validate79(data17[i5], { instancePath: instancePath + "/insert_controls/" + i5, parentData: data17, parentDataProperty: i5, rootData }))) { vErrors = vErrors === null ? validate79.errors : vErrors.concat(validate79.errors); errors = vErrors.length; } var valid8 = _errs36 === errors; if (!valid8) { break; } } } } else { validate75.errors = [{ instancePath: instancePath + "/insert_controls", schemaPath: "#/properties/insert_controls/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs34 === errors; } else { var valid0 = true; } } } } } } } } } } } } else { validate75.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate75.errors = vErrors; return errors === 0; } function validate74(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/custom" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { const _errs1 = errors; for (const key0 in data) { if (!((key0 === "groups") || (key0 === "insert_controls"))) { validate74.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.groups !== undefined) { let data0 = data.groups; const _errs2 = errors; if (errors === _errs2) { if (Array.isArray(data0)) { if (data0.length < 1) { validate74.errors = [{ instancePath: instancePath + "/groups", schemaPath: "#/properties/groups/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data0.length; for (let i0 = 0; i0 < len0; i0++) { const _errs4 = errors; if (!(validate75(data0[i0], { instancePath: instancePath + "/groups/" + i0, parentData: data0, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate75.errors : vErrors.concat(validate75.errors); errors = vErrors.length; } var valid1 = _errs4 === errors; if (!valid1) { break; } } } } else { validate74.errors = [{ instancePath: instancePath + "/groups", schemaPath: "#/properties/groups/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.insert_controls !== undefined) { let data2 = data.insert_controls; const _errs5 = errors; if (errors === _errs5) { if (Array.isArray(data2)) { if (data2.length < 1) { validate74.errors = [{ instancePath: instancePath + "/insert_controls", schemaPath: "#/properties/insert_controls/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data2.length; for (let i1 = 0; i1 < len1; i1++) { const _errs7 = errors; if (!(validate79(data2[i1], { instancePath: instancePath + "/insert_controls/" + i1, parentData: data2, parentDataProperty: i1, rootData }))) { vErrors = vErrors === null ? validate79.errors : vErrors.concat(validate79.errors); errors = vErrors.length; } var valid2 = _errs7 === errors; if (!valid2) { break; } } } } else { validate74.errors = [{ instancePath: instancePath + "/insert_controls", schemaPath: "#/properties/insert_controls/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs5 === errors; } else { var valid0 = true; } } } } else { validate74.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate74.errors = vErrors; return errors === 0; } function validate73(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/merge" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { const _errs1 = errors; for (const key0 in data) { if (!(((key0 === "combine") || (key0 === "as_is")) || (key0 === "custom"))) { validate73.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.combine !== undefined) { let data0 = data.combine; const _errs2 = errors; const _errs3 = errors; if (errors === _errs3) { if (data0 && typeof data0 == "object" && !Array.isArray(data0)) { const _errs5 = errors; for (const key1 in data0) { if (!(key1 === "method")) { validate73.errors = [{ instancePath: instancePath + "/combine", schemaPath: "#/definitions/combine/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs5 === errors) { if (data0.method !== undefined) { let data1 = data0.method; const _errs6 = errors; if (!(((data1 === "use_first") || (data1 === "merge")) || (data1 === "keep"))) { validate73.errors = [{ instancePath: instancePath + "/combine/method", schemaPath: "#/definitions/combine/properties/method/enum", keyword: "enum", params: { allowedValues: schema87.properties.method.enum }, message: "must be equal to one of the allowed values" }]; return false; } if (errors === _errs6) { if (typeof data1 === "string") { if (!pattern3.test(data1)) { validate73.errors = [{ instancePath: instancePath + "/combine/method", schemaPath: "#/definitions/combine/properties/method/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate73.errors = [{ instancePath: instancePath + "/combine/method", schemaPath: "#/definitions/combine/properties/method/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } } } else { validate73.errors = [{ instancePath: instancePath + "/combine", schemaPath: "#/definitions/combine/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.as_is !== undefined) { const _errs8 = errors; if (typeof data.as_is !== "boolean") { validate73.errors = [{ instancePath: instancePath + "/as_is", schemaPath: "#/definitions/as_is/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }]; return false; } var valid0 = _errs8 === errors; } else { var valid0 = true; } if (valid0) { if (data.custom !== undefined) { const _errs11 = errors; if (!(validate74(data.custom, { instancePath: instancePath + "/custom", parentData: data, parentDataProperty: "custom", rootData }))) { vErrors = vErrors === null ? validate74.errors : vErrors.concat(validate74.errors); errors = vErrors.length; } var valid0 = _errs11 === errors; } else { var valid0 = true; } } } } } else { validate73.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate73.errors = vErrors; return errors === 0; } const schema96 = { "title": "Modify controls", "description": "Set parameters or amend controls in resolution", "$id": "#/definitions/modify", "type": "object", "properties": { "set_parameters": { "type": "array", "minItems": 1, "items": { "title": "Parameter Setting", "description": "A parameter setting, to be propagated to points of insertion", "type": "object", "properties": { "param_id": { "title": "Parameter ID", "description": "Indicates the value of the 'id' flag on a target parameter; i.e. which parameter to set", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "class": { "title": "Parameter Class", "description": "A textual label that provides a characterization of the parameter.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "depends_on": { "title": "Depends on", "description": "Another parameter invoking this one", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "label": { "title": "Parameter Label", "description": "A short, placeholder name for the parameter, which can be used as a substitute for a value if no value is assigned.", "type": "string" }, "usage": { "title": "Parameter Usage Description", "description": "Describes the purpose and use of a parameter", "type": "string" }, "constraints": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/parameter_constraint" } }, "guidelines": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/parameter_guideline" } }, "values": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/parameter_value" } }, "select": { "$ref": "#/definitions/parameter_selection" } }, "required": ["param_id"], "additionalProperties": false } }, "alters": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/alter" } } }, "additionalProperties": false }; const schema101 = { "title": "Alteration", "description": "An Alter element specifies changes to be made to an included control when a profile is resolved.", "$id": "#/definitions/alter", "type": "object", "properties": { "control_id": { "title": "Control Identifier Reference", "description": "A reference to a control with a corresponding id value.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "removes": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/remove" } }, "adds": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/add" } } }, "additionalProperties": false }; const schema102 = { "title": "Removal", "description": "Specifies objects to be removed from a control based on specific aspects of the object that must all match.", "$id": "#/definitions/remove", "type": "object", "properties": { "by_name": { "title": "Reference by (assigned) name", "description": "Identify items to remove by matching their assigned name", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "by_class": { "title": "Reference by class", "description": "Identify items to remove by matching their class.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "by_id": { "title": "Reference by ID", "description": "Identify items to remove indicated by their id.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "by_item_name": { "title": "Item Name Reference", "description": "Identify items to remove by the name of the item's information element name, e.g. title or prop", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "by_ns": { "title": "Item Namespace Reference", "description": "Identify items to remove by the item's ns, which is the namespace associated with a part, or prop.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" } }, "additionalProperties": false }; const schema103 = { "title": "Addition", "description": "Specifies contents to be added into controls, in resolution", "$id": "#/definitions/add", "type": "object", "properties": { "position": { "title": "Position", "description": "Where to add the new content with respect to the targeted element (beside it or inside it)", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$", "enum": ["before", "after", "starting", "ending"] }, "by_id": { "title": "Reference by ID", "description": "Target location of the addition.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "title": { "title": "Title Change", "description": "A name given to the control, which may be used by a tool for display and navigation.", "type": "string" }, "params": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/parameter" } }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "parts": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/part" } } }, "additionalProperties": false }; function validate89(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/add" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { const _errs1 = errors; for (const key0 in data) { if (!(((((((key0 === "position") || (key0 === "by_id")) || (key0 === "title")) || (key0 === "params")) || (key0 === "props")) || (key0 === "links")) || (key0 === "parts"))) { validate89.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.position !== undefined) { let data0 = data.position; const _errs2 = errors; if (!((((data0 === "before") || (data0 === "after")) || (data0 === "starting")) || (data0 === "ending"))) { validate89.errors = [{ instancePath: instancePath + "/position", schemaPath: "#/properties/position/enum", keyword: "enum", params: { allowedValues: schema103.properties.position.enum }, message: "must be equal to one of the allowed values" }]; return false; } if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern9.test(data0)) { validate89.errors = [{ instancePath: instancePath + "/position", schemaPath: "#/properties/position/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate89.errors = [{ instancePath: instancePath + "/position", schemaPath: "#/properties/position/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.by_id !== undefined) { let data1 = data.by_id; const _errs4 = errors; if (errors === _errs4) { if (typeof data1 === "string") { if (!pattern9.test(data1)) { validate89.errors = [{ instancePath: instancePath + "/by_id", schemaPath: "#/properties/by_id/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate89.errors = [{ instancePath: instancePath + "/by_id", schemaPath: "#/properties/by_id/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.title !== undefined) { const _errs6 = errors; if (typeof data.title !== "string") { validate89.errors = [{ instancePath: instancePath + "/title", schemaPath: "#/properties/title/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.params !== undefined) { let data3 = data.params; const _errs8 = errors; if (errors === _errs8) { if (Array.isArray(data3)) { if (data3.length < 1) { validate89.errors = [{ instancePath: instancePath + "/params", schemaPath: "#/properties/params/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data3.length; for (let i0 = 0; i0 < len0; i0++) { const _errs10 = errors; if (!(validate44(data3[i0], { instancePath: instancePath + "/params/" + i0, parentData: data3, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate44.errors : vErrors.concat(validate44.errors); errors = vErrors.length; } var valid1 = _errs10 === errors; if (!valid1) { break; } } } } else { validate89.errors = [{ instancePath: instancePath + "/params", schemaPath: "#/properties/params/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs8 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data5 = data.props; const _errs11 = errors; if (errors === _errs11) { if (Array.isArray(data5)) { if (data5.length < 1) { validate89.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data5.length; for (let i1 = 0; i1 < len1; i1++) { const _errs13 = errors; if (!(validate24(data5[i1], { instancePath: instancePath + "/props/" + i1, parentData: data5, parentDataProperty: i1, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid2 = _errs13 === errors; if (!valid2) { break; } } } } else { validate89.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs11 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data7 = data.links; const _errs14 = errors; if (errors === _errs14) { if (Array.isArray(data7)) { if (data7.length < 1) { validate89.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid3 = true; const len2 = data7.length; for (let i2 = 0; i2 < len2; i2++) { let data8 = data7[i2]; const _errs16 = errors; const _errs17 = errors; if (errors === _errs17) { if (data8 && typeof data8 == "object" && !Array.isArray(data8)) { let missing0; if ((data8.href === undefined) && (missing0 = "href")) { validate89.errors = [{ instancePath: instancePath + "/links/" + i2, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs19 = errors; for (const key1 in data8) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate89.errors = [{ instancePath: instancePath + "/links/" + i2, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs19 === errors) { if (data8.href !== undefined) { let data9 = data8.href; const _errs20 = errors; if (errors === _errs20) { if (errors === _errs20) { if (typeof data9 === "string") { if (!(formats10.test(data9))) { validate89.errors = [{ instancePath: instancePath + "/links/" + i2 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate89.errors = [{ instancePath: instancePath + "/links/" + i2 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid5 = _errs20 === errors; } else { var valid5 = true; } if (valid5) { if (data8.rel !== undefined) { let data10 = data8.rel; const _errs22 = errors; if (errors === _errs22) { if (typeof data10 === "string") { if (!pattern9.test(data10)) { validate89.errors = [{ instancePath: instancePath + "/links/" + i2 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate89.errors = [{ instancePath: instancePath + "/links/" + i2 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid5 = _errs22 === errors; } else { var valid5 = true; } if (valid5) { if (data8.media_type !== undefined) { let data11 = data8.media_type; const _errs24 = errors; if (errors === _errs24) { if (typeof data11 === "string") { if (!pattern3.test(data11)) { validate89.errors = [{ instancePath: instancePath + "/links/" + i2 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate89.errors = [{ instancePath: instancePath + "/links/" + i2 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid5 = _errs24 === errors; } else { var valid5 = true; } if (valid5) { if (data8.text !== undefined) { const _errs26 = errors; if (typeof data8.text !== "string") { validate89.errors = [{ instancePath: instancePath + "/links/" + i2 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid5 = _errs26 === errors; } else { var valid5 = true; } } } } } } } else { validate89.errors = [{ instancePath: instancePath + "/links/" + i2, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid3 = _errs16 === errors; if (!valid3) { break; } } } } else { validate89.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs14 === errors; } else { var valid0 = true; } if (valid0) { if (data.parts !== undefined) { let data13 = data.parts; const _errs28 = errors; if (errors === _errs28) { if (Array.isArray(data13)) { if (data13.length < 1) { validate89.errors = [{ instancePath: instancePath + "/parts", schemaPath: "#/properties/parts/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid6 = true; const len3 = data13.length; for (let i3 = 0; i3 < len3; i3++) { const _errs30 = errors; if (!(validate52(data13[i3], { instancePath: instancePath + "/parts/" + i3, parentData: data13, parentDataProperty: i3, rootData }))) { vErrors = vErrors === null ? validate52.errors : vErrors.concat(validate52.errors); errors = vErrors.length; } var valid6 = _errs30 === errors; if (!valid6) { break; } } } } else { validate89.errors = [{ instancePath: instancePath + "/parts", schemaPath: "#/properties/parts/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs28 === errors; } else { var valid0 = true; } } } } } } } } } else { validate89.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate89.errors = vErrors; return errors === 0; } function validate88(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/alter" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { const _errs1 = errors; for (const key0 in data) { if (!(((key0 === "control_id") || (key0 === "removes")) || (key0 === "adds"))) { validate88.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.control_id !== undefined) { let data0 = data.control_id; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern9.test(data0)) { validate88.errors = [{ instancePath: instancePath + "/control_id", schemaPath: "#/properties/control_id/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate88.errors = [{ instancePath: instancePath + "/control_id", schemaPath: "#/properties/control_id/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.removes !== undefined) { let data1 = data.removes; const _errs4 = errors; if (errors === _errs4) { if (Array.isArray(data1)) { if (data1.length < 1) { validate88.errors = [{ instancePath: instancePath + "/removes", schemaPath: "#/properties/removes/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data1.length; for (let i0 = 0; i0 < len0; i0++) { let data2 = data1[i0]; const _errs6 = errors; const _errs7 = errors; if (errors === _errs7) { if (data2 && typeof data2 == "object" && !Array.isArray(data2)) { const _errs9 = errors; for (const key1 in data2) { if (!(((((key1 === "by_name") || (key1 === "by_class")) || (key1 === "by_id")) || (key1 === "by_item_name")) || (key1 === "by_ns"))) { validate88.errors = [{ instancePath: instancePath + "/removes/" + i0, schemaPath: "#/definitions/remove/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs9 === errors) { if (data2.by_name !== undefined) { let data3 = data2.by_name; const _errs10 = errors; if (errors === _errs10) { if (typeof data3 === "string") { if (!pattern9.test(data3)) { validate88.errors = [{ instancePath: instancePath + "/removes/" + i0 + "/by_name", schemaPath: "#/definitions/remove/properties/by_name/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate88.errors = [{ instancePath: instancePath + "/removes/" + i0 + "/by_name", schemaPath: "#/definitions/remove/properties/by_name/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid3 = _errs10 === errors; } else { var valid3 = true; } if (valid3) { if (data2.by_class !== undefined) { let data4 = data2.by_class; const _errs12 = errors; if (errors === _errs12) { if (typeof data4 === "string") { if (!pattern9.test(data4)) { validate88.errors = [{ instancePath: instancePath + "/removes/" + i0 + "/by_class", schemaPath: "#/definitions/remove/properties/by_class/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate88.errors = [{ instancePath: instancePath + "/removes/" + i0 + "/by_class", schemaPath: "#/definitions/remove/properties/by_class/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid3 = _errs12 === errors; } else { var valid3 = true; } if (valid3) { if (data2.by_id !== undefined) { let data5 = data2.by_id; const _errs14 = errors; if (errors === _errs14) { if (typeof data5 === "string") { if (!pattern9.test(data5)) { validate88.errors = [{ instancePath: instancePath + "/removes/" + i0 + "/by_id", schemaPath: "#/definitions/remove/properties/by_id/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate88.errors = [{ instancePath: instancePath + "/removes/" + i0 + "/by_id", schemaPath: "#/definitions/remove/properties/by_id/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid3 = _errs14 === errors; } else { var valid3 = true; } if (valid3) { if (data2.by_item_name !== undefined) { let data6 = data2.by_item_name; const _errs16 = errors; if (errors === _errs16) { if (typeof data6 === "string") { if (!pattern9.test(data6)) { validate88.errors = [{ instancePath: instancePath + "/removes/" + i0 + "/by_item_name", schemaPath: "#/definitions/remove/properties/by_item_name/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate88.errors = [{ instancePath: instancePath + "/removes/" + i0 + "/by_item_name", schemaPath: "#/definitions/remove/properties/by_item_name/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid3 = _errs16 === errors; } else { var valid3 = true; } if (valid3) { if (data2.by_ns !== undefined) { let data7 = data2.by_ns; const _errs18 = errors; if (errors === _errs18) { if (typeof data7 === "string") { if (!pattern9.test(data7)) { validate88.errors = [{ instancePath: instancePath + "/removes/" + i0 + "/by_ns", schemaPath: "#/definitions/remove/properties/by_ns/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate88.errors = [{ instancePath: instancePath + "/removes/" + i0 + "/by_ns", schemaPath: "#/definitions/remove/properties/by_ns/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid3 = _errs18 === errors; } else { var valid3 = true; } } } } } } } else { validate88.errors = [{ instancePath: instancePath + "/removes/" + i0, schemaPath: "#/definitions/remove/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid1 = _errs6 === errors; if (!valid1) { break; } } } } else { validate88.errors = [{ instancePath: instancePath + "/removes", schemaPath: "#/properties/removes/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.adds !== undefined) { let data8 = data.adds; const _errs20 = errors; if (errors === _errs20) { if (Array.isArray(data8)) { if (data8.length < 1) { validate88.errors = [{ instancePath: instancePath + "/adds", schemaPath: "#/properties/adds/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid4 = true; const len1 = data8.length; for (let i1 = 0; i1 < len1; i1++) { const _errs22 = errors; if (!(validate89(data8[i1], { instancePath: instancePath + "/adds/" + i1, parentData: data8, parentDataProperty: i1, rootData }))) { vErrors = vErrors === null ? validate89.errors : vErrors.concat(validate89.errors); errors = vErrors.length; } var valid4 = _errs22 === errors; if (!valid4) { break; } } } } else { validate88.errors = [{ instancePath: instancePath + "/adds", schemaPath: "#/properties/adds/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs20 === errors; } else { var valid0 = true; } } } } } else { validate88.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate88.errors = vErrors; return errors === 0; } function validate85(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/modify" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { const _errs1 = errors; for (const key0 in data) { if (!((key0 === "set_parameters") || (key0 === "alters"))) { validate85.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.set_parameters !== undefined) { let data0 = data.set_parameters; const _errs2 = errors; if (errors === _errs2) { if (Array.isArray(data0)) { if (data0.length < 1) { validate85.errors = [{ instancePath: instancePath + "/set_parameters", schemaPath: "#/properties/set_parameters/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data0.length; for (let i0 = 0; i0 < len0; i0++) { let data1 = data0[i0]; const _errs4 = errors; if (errors === _errs4) { if (data1 && typeof data1 == "object" && !Array.isArray(data1)) { let missing0; if ((data1.param_id === undefined) && (missing0 = "param_id")) { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0, schemaPath: "#/properties/set_parameters/items/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs6 = errors; for (const key1 in data1) { if (!(func8.call(schema96.properties.set_parameters.items.properties, key1))) { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0, schemaPath: "#/properties/set_parameters/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs6 === errors) { if (data1.param_id !== undefined) { let data2 = data1.param_id; const _errs7 = errors; if (errors === _errs7) { if (typeof data2 === "string") { if (!pattern9.test(data2)) { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/param_id", schemaPath: "#/properties/set_parameters/items/properties/param_id/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/param_id", schemaPath: "#/properties/set_parameters/items/properties/param_id/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid2 = _errs7 === errors; } else { var valid2 = true; } if (valid2) { if (data1.class !== undefined) { let data3 = data1.class; const _errs9 = errors; if (errors === _errs9) { if (typeof data3 === "string") { if (!pattern9.test(data3)) { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/class", schemaPath: "#/properties/set_parameters/items/properties/class/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/class", schemaPath: "#/properties/set_parameters/items/properties/class/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid2 = _errs9 === errors; } else { var valid2 = true; } if (valid2) { if (data1.depends_on !== undefined) { let data4 = data1.depends_on; const _errs11 = errors; if (errors === _errs11) { if (typeof data4 === "string") { if (!pattern9.test(data4)) { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/depends_on", schemaPath: "#/properties/set_parameters/items/properties/depends_on/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/depends_on", schemaPath: "#/properties/set_parameters/items/properties/depends_on/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid2 = _errs11 === errors; } else { var valid2 = true; } if (valid2) { if (data1.props !== undefined) { let data5 = data1.props; const _errs13 = errors; if (errors === _errs13) { if (Array.isArray(data5)) { if (data5.length < 1) { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/props", schemaPath: "#/properties/set_parameters/items/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid3 = true; const len1 = data5.length; for (let i1 = 0; i1 < len1; i1++) { const _errs15 = errors; if (!(validate24(data5[i1], { instancePath: instancePath + "/set_parameters/" + i0 + "/props/" + i1, parentData: data5, parentDataProperty: i1, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid3 = _errs15 === errors; if (!valid3) { break; } } } } else { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/props", schemaPath: "#/properties/set_parameters/items/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid2 = _errs13 === errors; } else { var valid2 = true; } if (valid2) { if (data1.links !== undefined) { let data7 = data1.links; const _errs16 = errors; if (errors === _errs16) { if (Array.isArray(data7)) { if (data7.length < 1) { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/links", schemaPath: "#/properties/set_parameters/items/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid4 = true; const len2 = data7.length; for (let i2 = 0; i2 < len2; i2++) { let data8 = data7[i2]; const _errs18 = errors; const _errs19 = errors; if (errors === _errs19) { if (data8 && typeof data8 == "object" && !Array.isArray(data8)) { let missing1; if ((data8.href === undefined) && (missing1 = "href")) { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/links/" + i2, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs21 = errors; for (const key2 in data8) { if (!((((key2 === "href") || (key2 === "rel")) || (key2 === "media_type")) || (key2 === "text"))) { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/links/" + i2, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs21 === errors) { if (data8.href !== undefined) { let data9 = data8.href; const _errs22 = errors; if (errors === _errs22) { if (errors === _errs22) { if (typeof data9 === "string") { if (!(formats10.test(data9))) { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/links/" + i2 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/links/" + i2 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid6 = _errs22 === errors; } else { var valid6 = true; } if (valid6) { if (data8.rel !== undefined) { let data10 = data8.rel; const _errs24 = errors; if (errors === _errs24) { if (typeof data10 === "string") { if (!pattern9.test(data10)) { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/links/" + i2 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/links/" + i2 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid6 = _errs24 === errors; } else { var valid6 = true; } if (valid6) { if (data8.media_type !== undefined) { let data11 = data8.media_type; const _errs26 = errors; if (errors === _errs26) { if (typeof data11 === "string") { if (!pattern3.test(data11)) { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/links/" + i2 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/links/" + i2 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid6 = _errs26 === errors; } else { var valid6 = true; } if (valid6) { if (data8.text !== undefined) { const _errs28 = errors; if (typeof data8.text !== "string") { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/links/" + i2 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid6 = _errs28 === errors; } else { var valid6 = true; } } } } } } } else { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/links/" + i2, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid4 = _errs18 === errors; if (!valid4) { break; } } } } else { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/links", schemaPath: "#/properties/set_parameters/items/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid2 = _errs16 === errors; } else { var valid2 = true; } if (valid2) { if (data1.label !== undefined) { const _errs30 = errors; if (typeof data1.label !== "string") { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/label", schemaPath: "#/properties/set_parameters/items/properties/label/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid2 = _errs30 === errors; } else { var valid2 = true; } if (valid2) { if (data1.usage !== undefined) { const _errs32 = errors; if (typeof data1.usage !== "string") { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/usage", schemaPath: "#/properties/set_parameters/items/properties/usage/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid2 = _errs32 === errors; } else { var valid2 = true; } if (valid2) { if (data1.constraints !== undefined) { let data15 = data1.constraints; const _errs34 = errors; if (errors === _errs34) { if (Array.isArray(data15)) { if (data15.length < 1) { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/constraints", schemaPath: "#/properties/set_parameters/items/properties/constraints/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid7 = true; const len3 = data15.length; for (let i3 = 0; i3 < len3; i3++) { const _errs36 = errors; if (!(validate46(data15[i3], { instancePath: instancePath + "/set_parameters/" + i0 + "/constraints/" + i3, parentData: data15, parentDataProperty: i3, rootData }))) { vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors); errors = vErrors.length; } var valid7 = _errs36 === errors; if (!valid7) { break; } } } } else { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/constraints", schemaPath: "#/properties/set_parameters/items/properties/constraints/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid2 = _errs34 === errors; } else { var valid2 = true; } if (valid2) { if (data1.guidelines !== undefined) { let data17 = data1.guidelines; const _errs37 = errors; if (errors === _errs37) { if (Array.isArray(data17)) { if (data17.length < 1) { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/guidelines", schemaPath: "#/properties/set_parameters/items/properties/guidelines/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid8 = true; const len4 = data17.length; for (let i4 = 0; i4 < len4; i4++) { let data18 = data17[i4]; const _errs39 = errors; const _errs40 = errors; if (errors === _errs40) { if (data18 && typeof data18 == "object" && !Array.isArray(data18)) { let missing2; if ((data18.prose === undefined) && (missing2 = "prose")) { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/guidelines/" + i4, schemaPath: "#/definitions/parameter_guideline/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" }]; return false; } else { const _errs42 = errors; for (const key3 in data18) { if (!(key3 === "prose")) { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/guidelines/" + i4, schemaPath: "#/definitions/parameter_guideline/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key3 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs42 === errors) { if (data18.prose !== undefined) { if (typeof data18.prose !== "string") { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/guidelines/" + i4 + "/prose", schemaPath: "#/definitions/parameter_guideline/properties/prose/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } } } else { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/guidelines/" + i4, schemaPath: "#/definitions/parameter_guideline/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid8 = _errs39 === errors; if (!valid8) { break; } } } } else { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/guidelines", schemaPath: "#/properties/set_parameters/items/properties/guidelines/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid2 = _errs37 === errors; } else { var valid2 = true; } if (valid2) { if (data1.values !== undefined) { let data20 = data1.values; const _errs45 = errors; if (errors === _errs45) { if (Array.isArray(data20)) { if (data20.length < 1) { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/values", schemaPath: "#/properties/set_parameters/items/properties/values/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid11 = true; const len5 = data20.length; for (let i5 = 0; i5 < len5; i5++) { let data21 = data20[i5]; const _errs47 = errors; const _errs48 = errors; if (errors === _errs48) { if (typeof data21 === "string") { if (!pattern3.test(data21)) { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/values/" + i5, schemaPath: "#/definitions/parameter_value/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/values/" + i5, schemaPath: "#/definitions/parameter_value/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid11 = _errs47 === errors; if (!valid11) { break; } } } } else { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/values", schemaPath: "#/properties/set_parameters/items/properties/values/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid2 = _errs45 === errors; } else { var valid2 = true; } if (valid2) { if (data1.select !== undefined) { let data22 = data1.select; const _errs50 = errors; const _errs51 = errors; if (errors === _errs51) { if (data22 && typeof data22 == "object" && !Array.isArray(data22)) { const _errs53 = errors; for (const key4 in data22) { if (!((key4 === "how_many") || (key4 === "choice"))) { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/select", schemaPath: "#/definitions/parameter_selection/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key4 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs53 === errors) { if (data22.how_many !== undefined) { let data23 = data22.how_many; const _errs54 = errors; if (!((data23 === "one") || (data23 === "one_or_more"))) { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/select/how_many", schemaPath: "#/definitions/parameter_selection/properties/how_many/enum", keyword: "enum", params: { allowedValues: schema67.properties.how_many.enum }, message: "must be equal to one of the allowed values" }]; return false; } if (errors === _errs54) { if (typeof data23 === "string") { if (!pattern9.test(data23)) { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/select/how_many", schemaPath: "#/definitions/parameter_selection/properties/how_many/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/select/how_many", schemaPath: "#/definitions/parameter_selection/properties/how_many/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid14 = _errs54 === errors; } else { var valid14 = true; } if (valid14) { if (data22.choice !== undefined) { let data24 = data22.choice; const _errs56 = errors; if (errors === _errs56) { if (Array.isArray(data24)) { if (data24.length < 1) { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/select/choice", schemaPath: "#/definitions/parameter_selection/properties/choice/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid15 = true; const len6 = data24.length; for (let i6 = 0; i6 < len6; i6++) { const _errs58 = errors; if (typeof data24[i6] !== "string") { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/select/choice/" + i6, schemaPath: "#/definitions/parameter_selection/properties/choice/items/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid15 = _errs58 === errors; if (!valid15) { break; } } } } else { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/select/choice", schemaPath: "#/definitions/parameter_selection/properties/choice/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid14 = _errs56 === errors; } else { var valid14 = true; } } } } else { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0 + "/select", schemaPath: "#/definitions/parameter_selection/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs50 === errors; } else { var valid2 = true; } } } } } } } } } } } } } } else { validate85.errors = [{ instancePath: instancePath + "/set_parameters/" + i0, schemaPath: "#/properties/set_parameters/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid1 = _errs4 === errors; if (!valid1) { break; } } } } else { validate85.errors = [{ instancePath: instancePath + "/set_parameters", schemaPath: "#/properties/set_parameters/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.alters !== undefined) { let data26 = data.alters; const _errs60 = errors; if (errors === _errs60) { if (Array.isArray(data26)) { if (data26.length < 1) { validate85.errors = [{ instancePath: instancePath + "/alters", schemaPath: "#/properties/alters/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid16 = true; const len7 = data26.length; for (let i7 = 0; i7 < len7; i7++) { const _errs62 = errors; if (!(validate88(data26[i7], { instancePath: instancePath + "/alters/" + i7, parentData: data26, parentDataProperty: i7, rootData }))) { vErrors = vErrors === null ? validate88.errors : vErrors.concat(validate88.errors); errors = vErrors.length; } var valid16 = _errs62 === errors; if (!valid16) { break; } } } } else { validate85.errors = [{ instancePath: instancePath + "/alters", schemaPath: "#/properties/alters/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs60 === errors; } else { var valid0 = true; } } } } else { validate85.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate85.errors = vErrors; return errors === 0; } function validate69(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/profile" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((((data.uuid === undefined) && (missing0 = "uuid")) || ((data.metadata === undefined) && (missing0 = "metadata"))) || ((data.imports === undefined) && (missing0 = "imports"))) { validate69.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!((((((key0 === "uuid") || (key0 === "metadata")) || (key0 === "imports")) || (key0 === "merge")) || (key0 === "modify")) || (key0 === "back_matter"))) { validate69.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.uuid !== undefined) { let data0 = data.uuid; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern0.test(data0)) { validate69.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate69.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.metadata !== undefined) { const _errs4 = errors; if (!(validate22(data.metadata, { instancePath: instancePath + "/metadata", parentData: data, parentDataProperty: "metadata", rootData }))) { vErrors = vErrors === null ? validate22.errors : vErrors.concat(validate22.errors); errors = vErrors.length; } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.imports !== undefined) { let data2 = data.imports; const _errs5 = errors; if (errors === _errs5) { if (Array.isArray(data2)) { if (data2.length < 1) { validate69.errors = [{ instancePath: instancePath + "/imports", schemaPath: "#/properties/imports/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data2.length; for (let i0 = 0; i0 < len0; i0++) { const _errs7 = errors; if (!(validate71(data2[i0], { instancePath: instancePath + "/imports/" + i0, parentData: data2, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate71.errors : vErrors.concat(validate71.errors); errors = vErrors.length; } var valid1 = _errs7 === errors; if (!valid1) { break; } } } } else { validate69.errors = [{ instancePath: instancePath + "/imports", schemaPath: "#/properties/imports/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs5 === errors; } else { var valid0 = true; } if (valid0) { if (data.merge !== undefined) { const _errs8 = errors; if (!(validate73(data.merge, { instancePath: instancePath + "/merge", parentData: data, parentDataProperty: "merge", rootData }))) { vErrors = vErrors === null ? validate73.errors : vErrors.concat(validate73.errors); errors = vErrors.length; } var valid0 = _errs8 === errors; } else { var valid0 = true; } if (valid0) { if (data.modify !== undefined) { const _errs9 = errors; if (!(validate85(data.modify, { instancePath: instancePath + "/modify", parentData: data, parentDataProperty: "modify", rootData }))) { vErrors = vErrors === null ? validate85.errors : vErrors.concat(validate85.errors); errors = vErrors.length; } var valid0 = _errs9 === errors; } else { var valid0 = true; } if (valid0) { if (data.back_matter !== undefined) { const _errs10 = errors; if (!(validate62(data.back_matter, { instancePath: instancePath + "/back_matter", parentData: data, parentDataProperty: "back_matter", rootData }))) { vErrors = vErrors === null ? validate62.errors : vErrors.concat(validate62.errors); errors = vErrors.length; } var valid0 = _errs10 === errors; } else { var valid0 = true; } } } } } } } } } else { validate69.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate69.errors = vErrors; return errors === 0; } const schema105 = { "title": "Component Definition", "description": "A collection of component descriptions, which may optionally be grouped by capability.", "$id": "#/definitions/component_definition", "type": "object", "properties": { "uuid": { "title": "Component Definition Universally Unique Identifier", "description": "A globally unique identifier for this component definition instance. This UUID should be changed when this document is revised.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "metadata": { "$ref": "#/definitions/metadata" }, "import_component_definitions": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/import_component_definition" } }, "components": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/defined_component" } }, "capabilities": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/capability" } }, "back_matter": { "$ref": "#/definitions/back_matter" } }, "required": ["uuid", "metadata"], "additionalProperties": false }; const schema106 = { "title": "Import Component Definition", "description": "Loads a component definition from another resource.", "$id": "#/definitions/import_component_definition", "type": "object", "properties": { "href": { "title": "Hyperlink Reference", "description": "A link to a resource that defines a set of components and/or capabilities to import into this collection.", "type": "string", "format": "uri-reference" } }, "required": ["href"], "additionalProperties": false }; const schema107 = { "title": "Component", "description": "A defined component that can be part of an implemented system.", "$id": "#/definitions/defined_component", "type": "object", "properties": { "uuid": { "title": "Component Identifier", "description": "The unique identifier for the component.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "type": { "$id": "defined_component_type", "title": "Component Type", "description": "A category describing the purpose of the component.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "title": { "title": "Component Title", "description": "A human readable name for the component.", "type": "string" }, "description": { "title": "Component Description", "description": "A description of the component, including information about its function.", "type": "string" }, "purpose": { "title": "Purpose", "description": "A summary of the technological or business purpose of the component.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "responsible_roles": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_role" } }, "protocols": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/protocol" } }, "control_implementations": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/component_definition_control_implementation" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "type", "title", "description"], "additionalProperties": false }; const schema109 = { "title": "Responsible Role", "description": "A reference to one or more roles with responsibility for performing a function relative to the containing object.", "$id": "#/definitions/responsible_role", "type": "object", "properties": { "role_id": { "title": "Responsible Role ID", "description": "The role that is responsible for the business function.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "party_uuids": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/party_uuid" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["role_id"], "additionalProperties": false }; function validate102(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/responsible_role" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((data.role_id === undefined) && (missing0 = "role_id")) { validate102.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(((((key0 === "role_id") || (key0 === "props")) || (key0 === "links")) || (key0 === "party_uuids")) || (key0 === "remarks"))) { validate102.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.role_id !== undefined) { let data0 = data.role_id; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern9.test(data0)) { validate102.errors = [{ instancePath: instancePath + "/role_id", schemaPath: "#/properties/role_id/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate102.errors = [{ instancePath: instancePath + "/role_id", schemaPath: "#/properties/role_id/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data1 = data.props; const _errs4 = errors; if (errors === _errs4) { if (Array.isArray(data1)) { if (data1.length < 1) { validate102.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data1.length; for (let i0 = 0; i0 < len0; i0++) { const _errs6 = errors; if (!(validate24(data1[i0], { instancePath: instancePath + "/props/" + i0, parentData: data1, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs6 === errors; if (!valid1) { break; } } } } else { validate102.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data3 = data.links; const _errs7 = errors; if (errors === _errs7) { if (Array.isArray(data3)) { if (data3.length < 1) { validate102.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data3.length; for (let i1 = 0; i1 < len1; i1++) { let data4 = data3[i1]; const _errs9 = errors; const _errs10 = errors; if (errors === _errs10) { if (data4 && typeof data4 == "object" && !Array.isArray(data4)) { let missing1; if ((data4.href === undefined) && (missing1 = "href")) { validate102.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs12 = errors; for (const key1 in data4) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate102.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs12 === errors) { if (data4.href !== undefined) { let data5 = data4.href; const _errs13 = errors; if (errors === _errs13) { if (errors === _errs13) { if (typeof data5 === "string") { if (!(formats10.test(data5))) { validate102.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate102.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid4 = _errs13 === errors; } else { var valid4 = true; } if (valid4) { if (data4.rel !== undefined) { let data6 = data4.rel; const _errs15 = errors; if (errors === _errs15) { if (typeof data6 === "string") { if (!pattern9.test(data6)) { validate102.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate102.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs15 === errors; } else { var valid4 = true; } if (valid4) { if (data4.media_type !== undefined) { let data7 = data4.media_type; const _errs17 = errors; if (errors === _errs17) { if (typeof data7 === "string") { if (!pattern3.test(data7)) { validate102.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate102.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs17 === errors; } else { var valid4 = true; } if (valid4) { if (data4.text !== undefined) { const _errs19 = errors; if (typeof data4.text !== "string") { validate102.errors = [{ instancePath: instancePath + "/links/" + i1 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid4 = _errs19 === errors; } else { var valid4 = true; } } } } } } } else { validate102.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs9 === errors; if (!valid2) { break; } } } } else { validate102.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs7 === errors; } else { var valid0 = true; } if (valid0) { if (data.party_uuids !== undefined) { let data9 = data.party_uuids; const _errs21 = errors; if (errors === _errs21) { if (Array.isArray(data9)) { if (data9.length < 1) { validate102.errors = [{ instancePath: instancePath + "/party_uuids", schemaPath: "#/properties/party_uuids/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid5 = true; const len2 = data9.length; for (let i2 = 0; i2 < len2; i2++) { let data10 = data9[i2]; const _errs23 = errors; const _errs24 = errors; if (errors === _errs24) { if (typeof data10 === "string") { if (!pattern0.test(data10)) { validate102.errors = [{ instancePath: instancePath + "/party_uuids/" + i2, schemaPath: "#/definitions/party_uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate102.errors = [{ instancePath: instancePath + "/party_uuids/" + i2, schemaPath: "#/definitions/party_uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid5 = _errs23 === errors; if (!valid5) { break; } } } } else { validate102.errors = [{ instancePath: instancePath + "/party_uuids", schemaPath: "#/properties/party_uuids/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs21 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs26 = errors; if (typeof data.remarks !== "string") { validate102.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs26 === errors; } else { var valid0 = true; } } } } } } } } else { validate102.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate102.errors = vErrors; return errors === 0; } const schema113 = { "title": "Service Protocol Information", "description": "Information about the protocol used to provide a service.", "$id": "#/definitions/protocol", "type": "object", "properties": { "uuid": { "title": "Service Protocol Information Universally Unique Identifier", "description": "A globally unique identifier that can be used to reference this service protocol entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "name": { "title": "Protocol Name", "description": "The common name of the protocol, which should be the appropriate \"service name\" from the IANA Service Name and Transport Protocol Port Number Registry.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "title": { "title": "Protocol Title", "description": "A human readable name for the protocol (e.g., Transport Layer Security).", "type": "string" }, "port_ranges": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/port_range" } } }, "required": ["name"], "additionalProperties": false }; const schema114 = { "title": "Port Range", "description": "Where applicable this is the IPv4 port range on which the service operates.", "$id": "#/definitions/port_range", "type": "object", "properties": { "start": { "title": "Start", "description": "Indicates the starting port number in a port range", "type": "integer", "multipleOf": 1, "minimum": 0 }, "end": { "title": "End", "description": "Indicates the ending port number in a port range", "type": "integer", "multipleOf": 1, "minimum": 0 }, "transport": { "title": "Transport", "description": "Indicates the transport type.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$", "enum": ["TCP", "UDP"] } }, "additionalProperties": false }; function validate105(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/protocol" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((data.name === undefined) && (missing0 = "name")) { validate105.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!((((key0 === "uuid") || (key0 === "name")) || (key0 === "title")) || (key0 === "port_ranges"))) { validate105.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.uuid !== undefined) { let data0 = data.uuid; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern0.test(data0)) { validate105.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate105.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.name !== undefined) { let data1 = data.name; const _errs4 = errors; if (errors === _errs4) { if (typeof data1 === "string") { if (!pattern3.test(data1)) { validate105.errors = [{ instancePath: instancePath + "/name", schemaPath: "#/properties/name/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate105.errors = [{ instancePath: instancePath + "/name", schemaPath: "#/properties/name/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.title !== undefined) { const _errs6 = errors; if (typeof data.title !== "string") { validate105.errors = [{ instancePath: instancePath + "/title", schemaPath: "#/properties/title/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.port_ranges !== undefined) { let data3 = data.port_ranges; const _errs8 = errors; if (errors === _errs8) { if (Array.isArray(data3)) { if (data3.length < 1) { validate105.errors = [{ instancePath: instancePath + "/port_ranges", schemaPath: "#/properties/port_ranges/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data3.length; for (let i0 = 0; i0 < len0; i0++) { let data4 = data3[i0]; const _errs10 = errors; const _errs11 = errors; if (errors === _errs11) { if (data4 && typeof data4 == "object" && !Array.isArray(data4)) { const _errs13 = errors; for (const key1 in data4) { if (!(((key1 === "start") || (key1 === "end")) || (key1 === "transport"))) { validate105.errors = [{ instancePath: instancePath + "/port_ranges/" + i0, schemaPath: "#/definitions/port_range/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs13 === errors) { if (data4.start !== undefined) { let data5 = data4.start; const _errs14 = errors; if (!(((typeof data5 == "number") && (!(data5 % 1) && !isNaN(data5))) && (isFinite(data5)))) { validate105.errors = [{ instancePath: instancePath + "/port_ranges/" + i0 + "/start", schemaPath: "#/definitions/port_range/properties/start/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } if (errors === _errs14) { if ((typeof data5 == "number") && (isFinite(data5))) { if (data5 < 0 || isNaN(data5)) { validate105.errors = [{ instancePath: instancePath + "/port_ranges/" + i0 + "/start", schemaPath: "#/definitions/port_range/properties/start/minimum", keyword: "minimum", params: { comparison: ">=", limit: 0 }, message: "must be >= 0" }]; return false; } else { let res0; if ((1 === 0 || (res0 = data5 / 1, res0 !== parseInt(res0)))) { validate105.errors = [{ instancePath: instancePath + "/port_ranges/" + i0 + "/start", schemaPath: "#/definitions/port_range/properties/start/multipleOf", keyword: "multipleOf", params: { multipleOf: 1 }, message: "must be multiple of 1" }]; return false; } } } } var valid3 = _errs14 === errors; } else { var valid3 = true; } if (valid3) { if (data4.end !== undefined) { let data6 = data4.end; const _errs16 = errors; if (!(((typeof data6 == "number") && (!(data6 % 1) && !isNaN(data6))) && (isFinite(data6)))) { validate105.errors = [{ instancePath: instancePath + "/port_ranges/" + i0 + "/end", schemaPath: "#/definitions/port_range/properties/end/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } if (errors === _errs16) { if ((typeof data6 == "number") && (isFinite(data6))) { if (data6 < 0 || isNaN(data6)) { validate105.errors = [{ instancePath: instancePath + "/port_ranges/" + i0 + "/end", schemaPath: "#/definitions/port_range/properties/end/minimum", keyword: "minimum", params: { comparison: ">=", limit: 0 }, message: "must be >= 0" }]; return false; } else { let res1; if ((1 === 0 || (res1 = data6 / 1, res1 !== parseInt(res1)))) { validate105.errors = [{ instancePath: instancePath + "/port_ranges/" + i0 + "/end", schemaPath: "#/definitions/port_range/properties/end/multipleOf", keyword: "multipleOf", params: { multipleOf: 1 }, message: "must be multiple of 1" }]; return false; } } } } var valid3 = _errs16 === errors; } else { var valid3 = true; } if (valid3) { if (data4.transport !== undefined) { let data7 = data4.transport; const _errs18 = errors; if (!((data7 === "TCP") || (data7 === "UDP"))) { validate105.errors = [{ instancePath: instancePath + "/port_ranges/" + i0 + "/transport", schemaPath: "#/definitions/port_range/properties/transport/enum", keyword: "enum", params: { allowedValues: schema114.properties.transport.enum }, message: "must be equal to one of the allowed values" }]; return false; } if (errors === _errs18) { if (typeof data7 === "string") { if (!pattern9.test(data7)) { validate105.errors = [{ instancePath: instancePath + "/port_ranges/" + i0 + "/transport", schemaPath: "#/definitions/port_range/properties/transport/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate105.errors = [{ instancePath: instancePath + "/port_ranges/" + i0 + "/transport", schemaPath: "#/definitions/port_range/properties/transport/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid3 = _errs18 === errors; } else { var valid3 = true; } } } } } else { validate105.errors = [{ instancePath: instancePath + "/port_ranges/" + i0, schemaPath: "#/definitions/port_range/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid1 = _errs10 === errors; if (!valid1) { break; } } } } else { validate105.errors = [{ instancePath: instancePath + "/port_ranges", schemaPath: "#/properties/port_ranges/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs8 === errors; } else { var valid0 = true; } } } } } } } else { validate105.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate105.errors = vErrors; return errors === 0; } const schema115 = { "title": "Control Implementation Set", "description": "Defines how the component or capability supports a set of controls.", "$id": "#/definitions/component_definition_control_implementation", "type": "object", "properties": { "uuid": { "title": "Control Implementation Set Identifier", "description": "A unique identifier for the set of implemented controls.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "source": { "title": "Source Resource Reference", "description": "A reference to an OSCAL catalog or profile providing the referenced control or subcontrol definition.", "type": "string", "format": "uri-reference" }, "description": { "title": "Control Implementation Description", "description": "A description of how the specified set of controls are implemented for the containing component or capability.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "set_parameters": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/set_parameter" } }, "implemented_requirements": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/implemented_requirement" } } }, "required": ["uuid", "source", "description", "implemented_requirements"], "additionalProperties": false }; const schema117 = { "title": "Set Parameter Value", "description": "Identifies the parameter that will be set by the enclosed value.", "$id": "#/definitions/set_parameter", "type": "object", "properties": { "param_id": { "title": "Parameter ID", "description": "A reference to a parameter within a control, who's catalog has been imported into the current implementation context.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "values": { "type": "array", "minItems": 1, "items": { "title": "Parameter Value", "description": "A parameter value or set of values.", "type": "string", "pattern": "^\\S(.*\\S)?$" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["param_id", "values"], "additionalProperties": false }; function validate109(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/set_parameter" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if (((data.param_id === undefined) && (missing0 = "param_id")) || ((data.values === undefined) && (missing0 = "values"))) { validate109.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(((key0 === "param_id") || (key0 === "values")) || (key0 === "remarks"))) { validate109.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.param_id !== undefined) { let data0 = data.param_id; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern9.test(data0)) { validate109.errors = [{ instancePath: instancePath + "/param_id", schemaPath: "#/properties/param_id/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate109.errors = [{ instancePath: instancePath + "/param_id", schemaPath: "#/properties/param_id/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.values !== undefined) { let data1 = data.values; const _errs4 = errors; if (errors === _errs4) { if (Array.isArray(data1)) { if (data1.length < 1) { validate109.errors = [{ instancePath: instancePath + "/values", schemaPath: "#/properties/values/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data1.length; for (let i0 = 0; i0 < len0; i0++) { let data2 = data1[i0]; const _errs6 = errors; if (errors === _errs6) { if (typeof data2 === "string") { if (!pattern3.test(data2)) { validate109.errors = [{ instancePath: instancePath + "/values/" + i0, schemaPath: "#/properties/values/items/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate109.errors = [{ instancePath: instancePath + "/values/" + i0, schemaPath: "#/properties/values/items/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid1 = _errs6 === errors; if (!valid1) { break; } } } } else { validate109.errors = [{ instancePath: instancePath + "/values", schemaPath: "#/properties/values/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs8 = errors; if (typeof data.remarks !== "string") { validate109.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs8 === errors; } else { var valid0 = true; } } } } } } else { validate109.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate109.errors = vErrors; return errors === 0; } const schema119 = { "title": "Control_based Requirement", "description": "Describes how the system satisfies an individual control.", "$id": "#/definitions/implemented_requirement", "type": "object", "properties": { "uuid": { "title": "Control Requirement Universally Unique Identifier", "description": "A globally unique identifier that can be used to reference this control requirement entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "control_id": { "title": "Control Identifier Reference", "description": "A reference to a control with a corresponding id value.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "set_parameters": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/set_parameter" } }, "responsible_roles": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_role" } }, "statements": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/statement" } }, "by_components": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/by_component" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "control_id"], "additionalProperties": false }; const schema121 = { "title": "Specific Control Statement", "description": "Identifies which statements within a control are addressed.", "$id": "#/definitions/statement", "type": "object", "properties": { "statement_id": { "title": "Control Statement Reference", "description": "A reference to a control statement by its identifier", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "uuid": { "title": "Control Statement Reference Universally Unique Identifier", "description": "A globally unique identifier that can be used to reference this control statement entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "responsible_roles": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_role" } }, "by_components": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/by_component" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["statement_id", "uuid"], "additionalProperties": false }; const schema123 = { "title": "Component Control Implementation", "description": "Defines how the referenced component implements a set of controls.", "$id": "#/definitions/by_component", "type": "object", "properties": { "component_uuid": { "title": "Component Universally Unique Identifier Reference", "description": "A reference to the component that is implementing a given control or control statement.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "uuid": { "title": "By_Component Universally Unique Identifier", "description": "A globally unique identifier that can be used to reference this by_component entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "description": { "title": "Control Implementation Description", "description": "An implementation statement that describes how a control or a control statement is implemented within the referenced system component.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "set_parameters": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/set_parameter" } }, "implementation_status": { "$ref": "#/definitions/implementation_status" }, "export": { "title": "Export", "description": "Identifies content intended for external consumption, such as with leveraged organizations.", "type": "object", "properties": { "description": { "title": "Control Implementation Export Description", "description": "An implementation statement that describes the aspects of the control or control statement implementation that can be available to another system leveraging this system.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "provided": { "type": "array", "minItems": 1, "items": { "title": "Provided Control Implementation", "description": "Describes a capability which may be inherited by a leveraging system.", "type": "object", "properties": { "uuid": { "title": "Provided Universally Unique Identifier", "description": "A globally unique identifier that can be used to reference this provided entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "description": { "title": "Provided Control Implementation Description", "description": "An implementation statement that describes the aspects of the control or control statement implementation that can be provided to another system leveraging this system.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "responsible_roles": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_role" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "description"], "additionalProperties": false } }, "responsibilities": { "type": "array", "minItems": 1, "items": { "title": "Control Implementation Responsibility", "description": "Describes a control implementation responsibility imposed on a leveraging system.", "type": "object", "properties": { "uuid": { "title": "Responsibility Universally Unique Identifier", "description": "A globally unique identifier that can be used to reference this responsibility entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "provided_uuid": { "title": "Provided UUID", "description": "Identifies a 'provided' assembly associated with this assembly.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "description": { "title": "Control Implementation Responsibility Description", "description": "An implementation statement that describes the aspects of the control or control statement implementation that a leveraging system must implement to satisfy the control provided by a leveraged system.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "responsible_roles": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_role" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "description"], "additionalProperties": false } }, "remarks": { "$ref": "#/definitions/remarks" } }, "additionalProperties": false }, "inherited": { "type": "array", "minItems": 1, "items": { "title": "Inherited Control Implementation", "description": "Describes a control implementation inherited by a leveraging system.", "type": "object", "properties": { "uuid": { "title": "Inherited Universally Unique Identifier", "description": "A globally unique identifier that can be used to reference this inherited entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "provided_uuid": { "title": "Provided UUID", "description": "Identifies a 'provided' assembly associated with this assembly.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "description": { "title": "Inherited Control Implementation Description", "description": "An implementation statement that describes the aspects of a control or control statement implementation that a leveraging system is inheriting from a leveraged system.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "responsible_roles": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_role" } } }, "required": ["uuid", "description"], "additionalProperties": false } }, "satisfied": { "type": "array", "minItems": 1, "items": { "title": "Satisfied Control Implementation Responsibility", "description": "Describes how this system satisfies a responsibility imposed by a leveraged system.", "type": "object", "properties": { "uuid": { "title": "Satisfied Universally Unique Identifier", "description": "A globally unique identifier that can be used to reference this satisfied entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "responsibility_uuid": { "title": "Provided UUID", "description": "Identifies a 'provided' assembly associated with this assembly.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "description": { "title": "Satisfied Control Implementation Responsibility Description", "description": "An implementation statement that describes the aspects of a control or control statement implementation that a leveraging system is implementing based on a requirement from a leveraged system.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "responsible_roles": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_role" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "description"], "additionalProperties": false } }, "responsible_roles": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_role" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["component_uuid", "uuid", "description"], "additionalProperties": false }; const schema125 = { "title": "Implementation Status", "description": "Indicates the degree to which the a given control is implemented.", "$id": "#/definitions/implementation_status", "type": "object", "properties": { "state": { "title": "Implementation State", "description": "Identifies the implementation status of the control or control objective.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["state"], "additionalProperties": false }; function validate121(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/implementation_status" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((data.state === undefined) && (missing0 = "state")) { validate121.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!((key0 === "state") || (key0 === "remarks"))) { validate121.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.state !== undefined) { let data0 = data.state; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern9.test(data0)) { validate121.errors = [{ instancePath: instancePath + "/state", schemaPath: "#/properties/state/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate121.errors = [{ instancePath: instancePath + "/state", schemaPath: "#/properties/state/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs4 = errors; if (typeof data.remarks !== "string") { validate121.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs4 === errors; } else { var valid0 = true; } } } } } else { validate121.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate121.errors = vErrors; return errors === 0; } function validate118(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/by_component" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((((data.component_uuid === undefined) && (missing0 = "component_uuid")) || ((data.uuid === undefined) && (missing0 = "uuid"))) || ((data.description === undefined) && (missing0 = "description"))) { validate118.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(func8.call(schema123.properties, key0))) { validate118.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.component_uuid !== undefined) { let data0 = data.component_uuid; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern0.test(data0)) { validate118.errors = [{ instancePath: instancePath + "/component_uuid", schemaPath: "#/properties/component_uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate118.errors = [{ instancePath: instancePath + "/component_uuid", schemaPath: "#/properties/component_uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.uuid !== undefined) { let data1 = data.uuid; const _errs4 = errors; if (errors === _errs4) { if (typeof data1 === "string") { if (!pattern0.test(data1)) { validate118.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate118.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.description !== undefined) { const _errs6 = errors; if (typeof data.description !== "string") { validate118.errors = [{ instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data3 = data.props; const _errs8 = errors; if (errors === _errs8) { if (Array.isArray(data3)) { if (data3.length < 1) { validate118.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data3.length; for (let i0 = 0; i0 < len0; i0++) { const _errs10 = errors; if (!(validate24(data3[i0], { instancePath: instancePath + "/props/" + i0, parentData: data3, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs10 === errors; if (!valid1) { break; } } } } else { validate118.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs8 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data5 = data.links; const _errs11 = errors; if (errors === _errs11) { if (Array.isArray(data5)) { if (data5.length < 1) { validate118.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data5.length; for (let i1 = 0; i1 < len1; i1++) { let data6 = data5[i1]; const _errs13 = errors; const _errs14 = errors; if (errors === _errs14) { if (data6 && typeof data6 == "object" && !Array.isArray(data6)) { let missing1; if ((data6.href === undefined) && (missing1 = "href")) { validate118.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs16 = errors; for (const key1 in data6) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate118.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs16 === errors) { if (data6.href !== undefined) { let data7 = data6.href; const _errs17 = errors; if (errors === _errs17) { if (errors === _errs17) { if (typeof data7 === "string") { if (!(formats10.test(data7))) { validate118.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate118.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid4 = _errs17 === errors; } else { var valid4 = true; } if (valid4) { if (data6.rel !== undefined) { let data8 = data6.rel; const _errs19 = errors; if (errors === _errs19) { if (typeof data8 === "string") { if (!pattern9.test(data8)) { validate118.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate118.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs19 === errors; } else { var valid4 = true; } if (valid4) { if (data6.media_type !== undefined) { let data9 = data6.media_type; const _errs21 = errors; if (errors === _errs21) { if (typeof data9 === "string") { if (!pattern3.test(data9)) { validate118.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate118.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs21 === errors; } else { var valid4 = true; } if (valid4) { if (data6.text !== undefined) { const _errs23 = errors; if (typeof data6.text !== "string") { validate118.errors = [{ instancePath: instancePath + "/links/" + i1 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid4 = _errs23 === errors; } else { var valid4 = true; } } } } } } } else { validate118.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs13 === errors; if (!valid2) { break; } } } } else { validate118.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs11 === errors; } else { var valid0 = true; } if (valid0) { if (data.set_parameters !== undefined) { let data11 = data.set_parameters; const _errs25 = errors; if (errors === _errs25) { if (Array.isArray(data11)) { if (data11.length < 1) { validate118.errors = [{ instancePath: instancePath + "/set_parameters", schemaPath: "#/properties/set_parameters/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid5 = true; const len2 = data11.length; for (let i2 = 0; i2 < len2; i2++) { const _errs27 = errors; if (!(validate109(data11[i2], { instancePath: instancePath + "/set_parameters/" + i2, parentData: data11, parentDataProperty: i2, rootData }))) { vErrors = vErrors === null ? validate109.errors : vErrors.concat(validate109.errors); errors = vErrors.length; } var valid5 = _errs27 === errors; if (!valid5) { break; } } } } else { validate118.errors = [{ instancePath: instancePath + "/set_parameters", schemaPath: "#/properties/set_parameters/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs25 === errors; } else { var valid0 = true; } if (valid0) { if (data.implementation_status !== undefined) { const _errs28 = errors; if (!(validate121(data.implementation_status, { instancePath: instancePath + "/implementation_status", parentData: data, parentDataProperty: "implementation_status", rootData }))) { vErrors = vErrors === null ? validate121.errors : vErrors.concat(validate121.errors); errors = vErrors.length; } var valid0 = _errs28 === errors; } else { var valid0 = true; } if (valid0) { if (data.export !== undefined) { let data14 = data.export; const _errs29 = errors; if (errors === _errs29) { if (data14 && typeof data14 == "object" && !Array.isArray(data14)) { const _errs31 = errors; for (const key2 in data14) { if (!((((((key2 === "description") || (key2 === "props")) || (key2 === "links")) || (key2 === "provided")) || (key2 === "responsibilities")) || (key2 === "remarks"))) { validate118.errors = [{ instancePath: instancePath + "/export", schemaPath: "#/properties/export/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs31 === errors) { if (data14.description !== undefined) { const _errs32 = errors; if (typeof data14.description !== "string") { validate118.errors = [{ instancePath: instancePath + "/export/description", schemaPath: "#/properties/export/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid6 = _errs32 === errors; } else { var valid6 = true; } if (valid6) { if (data14.props !== undefined) { let data16 = data14.props; const _errs34 = errors; if (errors === _errs34) { if (Array.isArray(data16)) { if (data16.length < 1) { validate118.errors = [{ instancePath: instancePath + "/export/props", schemaPath: "#/properties/export/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid7 = true; const len3 = data16.length; for (let i3 = 0; i3 < len3; i3++) { const _errs36 = errors; if (!(validate24(data16[i3], { instancePath: instancePath + "/export/props/" + i3, parentData: data16, parentDataProperty: i3, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid7 = _errs36 === errors; if (!valid7) { break; } } } } else { validate118.errors = [{ instancePath: instancePath + "/export/props", schemaPath: "#/properties/export/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid6 = _errs34 === errors; } else { var valid6 = true; } if (valid6) { if (data14.links !== undefined) { let data18 = data14.links; const _errs37 = errors; if (errors === _errs37) { if (Array.isArray(data18)) { if (data18.length < 1) { validate118.errors = [{ instancePath: instancePath + "/export/links", schemaPath: "#/properties/export/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid8 = true; const len4 = data18.length; for (let i4 = 0; i4 < len4; i4++) { let data19 = data18[i4]; const _errs39 = errors; const _errs40 = errors; if (errors === _errs40) { if (data19 && typeof data19 == "object" && !Array.isArray(data19)) { let missing2; if ((data19.href === undefined) && (missing2 = "href")) { validate118.errors = [{ instancePath: instancePath + "/export/links/" + i4, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" }]; return false; } else { const _errs42 = errors; for (const key3 in data19) { if (!((((key3 === "href") || (key3 === "rel")) || (key3 === "media_type")) || (key3 === "text"))) { validate118.errors = [{ instancePath: instancePath + "/export/links/" + i4, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key3 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs42 === errors) { if (data19.href !== undefined) { let data20 = data19.href; const _errs43 = errors; if (errors === _errs43) { if (errors === _errs43) { if (typeof data20 === "string") { if (!(formats10.test(data20))) { validate118.errors = [{ instancePath: instancePath + "/export/links/" + i4 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate118.errors = [{ instancePath: instancePath + "/export/links/" + i4 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid10 = _errs43 === errors; } else { var valid10 = true; } if (valid10) { if (data19.rel !== undefined) { let data21 = data19.rel; const _errs45 = errors; if (errors === _errs45) { if (typeof data21 === "string") { if (!pattern9.test(data21)) { validate118.errors = [{ instancePath: instancePath + "/export/links/" + i4 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate118.errors = [{ instancePath: instancePath + "/export/links/" + i4 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid10 = _errs45 === errors; } else { var valid10 = true; } if (valid10) { if (data19.media_type !== undefined) { let data22 = data19.media_type; const _errs47 = errors; if (errors === _errs47) { if (typeof data22 === "string") { if (!pattern3.test(data22)) { validate118.errors = [{ instancePath: instancePath + "/export/links/" + i4 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate118.errors = [{ instancePath: instancePath + "/export/links/" + i4 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid10 = _errs47 === errors; } else { var valid10 = true; } if (valid10) { if (data19.text !== undefined) { const _errs49 = errors; if (typeof data19.text !== "string") { validate118.errors = [{ instancePath: instancePath + "/export/links/" + i4 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid10 = _errs49 === errors; } else { var valid10 = true; } } } } } } } else { validate118.errors = [{ instancePath: instancePath + "/export/links/" + i4, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid8 = _errs39 === errors; if (!valid8) { break; } } } } else { validate118.errors = [{ instancePath: instancePath + "/export/links", schemaPath: "#/properties/export/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid6 = _errs37 === errors; } else { var valid6 = true; } if (valid6) { if (data14.provided !== undefined) { let data24 = data14.provided; const _errs51 = errors; if (errors === _errs51) { if (Array.isArray(data24)) { if (data24.length < 1) { validate118.errors = [{ instancePath: instancePath + "/export/provided", schemaPath: "#/properties/export/properties/provided/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid11 = true; const len5 = data24.length; for (let i5 = 0; i5 < len5; i5++) { let data25 = data24[i5]; const _errs53 = errors; if (errors === _errs53) { if (data25 && typeof data25 == "object" && !Array.isArray(data25)) { let missing3; if (((data25.uuid === undefined) && (missing3 = "uuid")) || ((data25.description === undefined) && (missing3 = "description"))) { validate118.errors = [{ instancePath: instancePath + "/export/provided/" + i5, schemaPath: "#/properties/export/properties/provided/items/required", keyword: "required", params: { missingProperty: missing3 }, message: "must have required property '" + missing3 + "'" }]; return false; } else { const _errs55 = errors; for (const key4 in data25) { if (!((((((key4 === "uuid") || (key4 === "description")) || (key4 === "props")) || (key4 === "links")) || (key4 === "responsible_roles")) || (key4 === "remarks"))) { validate118.errors = [{ instancePath: instancePath + "/export/provided/" + i5, schemaPath: "#/properties/export/properties/provided/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key4 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs55 === errors) { if (data25.uuid !== undefined) { let data26 = data25.uuid; const _errs56 = errors; if (errors === _errs56) { if (typeof data26 === "string") { if (!pattern0.test(data26)) { validate118.errors = [{ instancePath: instancePath + "/export/provided/" + i5 + "/uuid", schemaPath: "#/properties/export/properties/provided/items/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate118.errors = [{ instancePath: instancePath + "/export/provided/" + i5 + "/uuid", schemaPath: "#/properties/export/properties/provided/items/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid12 = _errs56 === errors; } else { var valid12 = true; } if (valid12) { if (data25.description !== undefined) { const _errs58 = errors; if (typeof data25.description !== "string") { validate118.errors = [{ instancePath: instancePath + "/export/provided/" + i5 + "/description", schemaPath: "#/properties/export/properties/provided/items/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid12 = _errs58 === errors; } else { var valid12 = true; } if (valid12) { if (data25.props !== undefined) { let data28 = data25.props; const _errs60 = errors; if (errors === _errs60) { if (Array.isArray(data28)) { if (data28.length < 1) { validate118.errors = [{ instancePath: instancePath + "/export/provided/" + i5 + "/props", schemaPath: "#/properties/export/properties/provided/items/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid13 = true; const len6 = data28.length; for (let i6 = 0; i6 < len6; i6++) { const _errs62 = errors; if (!(validate24(data28[i6], { instancePath: instancePath + "/export/provided/" + i5 + "/props/" + i6, parentData: data28, parentDataProperty: i6, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid13 = _errs62 === errors; if (!valid13) { break; } } } } else { validate118.errors = [{ instancePath: instancePath + "/export/provided/" + i5 + "/props", schemaPath: "#/properties/export/properties/provided/items/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid12 = _errs60 === errors; } else { var valid12 = true; } if (valid12) { if (data25.links !== undefined) { let data30 = data25.links; const _errs63 = errors; if (errors === _errs63) { if (Array.isArray(data30)) { if (data30.length < 1) { validate118.errors = [{ instancePath: instancePath + "/export/provided/" + i5 + "/links", schemaPath: "#/properties/export/properties/provided/items/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid14 = true; const len7 = data30.length; for (let i7 = 0; i7 < len7; i7++) { let data31 = data30[i7]; const _errs65 = errors; const _errs66 = errors; if (errors === _errs66) { if (data31 && typeof data31 == "object" && !Array.isArray(data31)) { let missing4; if ((data31.href === undefined) && (missing4 = "href")) { validate118.errors = [{ instancePath: instancePath + "/export/provided/" + i5 + "/links/" + i7, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing4 }, message: "must have required property '" + missing4 + "'" }]; return false; } else { const _errs68 = errors; for (const key5 in data31) { if (!((((key5 === "href") || (key5 === "rel")) || (key5 === "media_type")) || (key5 === "text"))) { validate118.errors = [{ instancePath: instancePath + "/export/provided/" + i5 + "/links/" + i7, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key5 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs68 === errors) { if (data31.href !== undefined) { let data32 = data31.href; const _errs69 = errors; if (errors === _errs69) { if (errors === _errs69) { if (typeof data32 === "string") { if (!(formats10.test(data32))) { validate118.errors = [{ instancePath: instancePath + "/export/provided/" + i5 + "/links/" + i7 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate118.errors = [{ instancePath: instancePath + "/export/provided/" + i5 + "/links/" + i7 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid16 = _errs69 === errors; } else { var valid16 = true; } if (valid16) { if (data31.rel !== undefined) { let data33 = data31.rel; const _errs71 = errors; if (errors === _errs71) { if (typeof data33 === "string") { if (!pattern9.test(data33)) { validate118.errors = [{ instancePath: instancePath + "/export/provided/" + i5 + "/links/" + i7 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate118.errors = [{ instancePath: instancePath + "/export/provided/" + i5 + "/links/" + i7 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid16 = _errs71 === errors; } else { var valid16 = true; } if (valid16) { if (data31.media_type !== undefined) { let data34 = data31.media_type; const _errs73 = errors; if (errors === _errs73) { if (typeof data34 === "string") { if (!pattern3.test(data34)) { validate118.errors = [{ instancePath: instancePath + "/export/provided/" + i5 + "/links/" + i7 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate118.errors = [{ instancePath: instancePath + "/export/provided/" + i5 + "/links/" + i7 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid16 = _errs73 === errors; } else { var valid16 = true; } if (valid16) { if (data31.text !== undefined) { const _errs75 = errors; if (typeof data31.text !== "string") { validate118.errors = [{ instancePath: instancePath + "/export/provided/" + i5 + "/links/" + i7 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid16 = _errs75 === errors; } else { var valid16 = true; } } } } } } } else { validate118.errors = [{ instancePath: instancePath + "/export/provided/" + i5 + "/links/" + i7, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid14 = _errs65 === errors; if (!valid14) { break; } } } } else { validate118.errors = [{ instancePath: instancePath + "/export/provided/" + i5 + "/links", schemaPath: "#/properties/export/properties/provided/items/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid12 = _errs63 === errors; } else { var valid12 = true; } if (valid12) { if (data25.responsible_roles !== undefined) { let data36 = data25.responsible_roles; const _errs77 = errors; if (errors === _errs77) { if (Array.isArray(data36)) { if (data36.length < 1) { validate118.errors = [{ instancePath: instancePath + "/export/provided/" + i5 + "/responsible_roles", schemaPath: "#/properties/export/properties/provided/items/properties/responsible_roles/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid17 = true; const len8 = data36.length; for (let i8 = 0; i8 < len8; i8++) { const _errs79 = errors; if (!(validate102(data36[i8], { instancePath: instancePath + "/export/provided/" + i5 + "/responsible_roles/" + i8, parentData: data36, parentDataProperty: i8, rootData }))) { vErrors = vErrors === null ? validate102.errors : vErrors.concat(validate102.errors); errors = vErrors.length; } var valid17 = _errs79 === errors; if (!valid17) { break; } } } } else { validate118.errors = [{ instancePath: instancePath + "/export/provided/" + i5 + "/responsible_roles", schemaPath: "#/properties/export/properties/provided/items/properties/responsible_roles/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid12 = _errs77 === errors; } else { var valid12 = true; } if (valid12) { if (data25.remarks !== undefined) { const _errs80 = errors; if (typeof data25.remarks !== "string") { validate118.errors = [{ instancePath: instancePath + "/export/provided/" + i5 + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid12 = _errs80 === errors; } else { var valid12 = true; } } } } } } } } } else { validate118.errors = [{ instancePath: instancePath + "/export/provided/" + i5, schemaPath: "#/properties/export/properties/provided/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid11 = _errs53 === errors; if (!valid11) { break; } } } } else { validate118.errors = [{ instancePath: instancePath + "/export/provided", schemaPath: "#/properties/export/properties/provided/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid6 = _errs51 === errors; } else { var valid6 = true; } if (valid6) { if (data14.responsibilities !== undefined) { let data39 = data14.responsibilities; const _errs83 = errors; if (errors === _errs83) { if (Array.isArray(data39)) { if (data39.length < 1) { validate118.errors = [{ instancePath: instancePath + "/export/responsibilities", schemaPath: "#/properties/export/properties/responsibilities/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid19 = true; const len9 = data39.length; for (let i9 = 0; i9 < len9; i9++) { let data40 = data39[i9]; const _errs85 = errors; if (errors === _errs85) { if (data40 && typeof data40 == "object" && !Array.isArray(data40)) { let missing5; if (((data40.uuid === undefined) && (missing5 = "uuid")) || ((data40.description === undefined) && (missing5 = "description"))) { validate118.errors = [{ instancePath: instancePath + "/export/responsibilities/" + i9, schemaPath: "#/properties/export/properties/responsibilities/items/required", keyword: "required", params: { missingProperty: missing5 }, message: "must have required property '" + missing5 + "'" }]; return false; } else { const _errs87 = errors; for (const key6 in data40) { if (!(((((((key6 === "uuid") || (key6 === "provided_uuid")) || (key6 === "description")) || (key6 === "props")) || (key6 === "links")) || (key6 === "responsible_roles")) || (key6 === "remarks"))) { validate118.errors = [{ instancePath: instancePath + "/export/responsibilities/" + i9, schemaPath: "#/properties/export/properties/responsibilities/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key6 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs87 === errors) { if (data40.uuid !== undefined) { let data41 = data40.uuid; const _errs88 = errors; if (errors === _errs88) { if (typeof data41 === "string") { if (!pattern0.test(data41)) { validate118.errors = [{ instancePath: instancePath + "/export/responsibilities/" + i9 + "/uuid", schemaPath: "#/properties/export/properties/responsibilities/items/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate118.errors = [{ instancePath: instancePath + "/export/responsibilities/" + i9 + "/uuid", schemaPath: "#/properties/export/properties/responsibilities/items/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid20 = _errs88 === errors; } else { var valid20 = true; } if (valid20) { if (data40.provided_uuid !== undefined) { let data42 = data40.provided_uuid; const _errs90 = errors; if (errors === _errs90) { if (typeof data42 === "string") { if (!pattern0.test(data42)) { validate118.errors = [{ instancePath: instancePath + "/export/responsibilities/" + i9 + "/provided_uuid", schemaPath: "#/properties/export/properties/responsibilities/items/properties/provided_uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate118.errors = [{ instancePath: instancePath + "/export/responsibilities/" + i9 + "/provided_uuid", schemaPath: "#/properties/export/properties/responsibilities/items/properties/provided_uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid20 = _errs90 === errors; } else { var valid20 = true; } if (valid20) { if (data40.description !== undefined) { const _errs92 = errors; if (typeof data40.description !== "string") { validate118.errors = [{ instancePath: instancePath + "/export/responsibilities/" + i9 + "/description", schemaPath: "#/properties/export/properties/responsibilities/items/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid20 = _errs92 === errors; } else { var valid20 = true; } if (valid20) { if (data40.props !== undefined) { let data44 = data40.props; const _errs94 = errors; if (errors === _errs94) { if (Array.isArray(data44)) { if (data44.length < 1) { validate118.errors = [{ instancePath: instancePath + "/export/responsibilities/" + i9 + "/props", schemaPath: "#/properties/export/properties/responsibilities/items/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid21 = true; const len10 = data44.length; for (let i10 = 0; i10 < len10; i10++) { const _errs96 = errors; if (!(validate24(data44[i10], { instancePath: instancePath + "/export/responsibilities/" + i9 + "/props/" + i10, parentData: data44, parentDataProperty: i10, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid21 = _errs96 === errors; if (!valid21) { break; } } } } else { validate118.errors = [{ instancePath: instancePath + "/export/responsibilities/" + i9 + "/props", schemaPath: "#/properties/export/properties/responsibilities/items/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid20 = _errs94 === errors; } else { var valid20 = true; } if (valid20) { if (data40.links !== undefined) { let data46 = data40.links; const _errs97 = errors; if (errors === _errs97) { if (Array.isArray(data46)) { if (data46.length < 1) { validate118.errors = [{ instancePath: instancePath + "/export/responsibilities/" + i9 + "/links", schemaPath: "#/properties/export/properties/responsibilities/items/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid22 = true; const len11 = data46.length; for (let i11 = 0; i11 < len11; i11++) { let data47 = data46[i11]; const _errs99 = errors; const _errs100 = errors; if (errors === _errs100) { if (data47 && typeof data47 == "object" && !Array.isArray(data47)) { let missing6; if ((data47.href === undefined) && (missing6 = "href")) { validate118.errors = [{ instancePath: instancePath + "/export/responsibilities/" + i9 + "/links/" + i11, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing6 }, message: "must have required property '" + missing6 + "'" }]; return false; } else { const _errs102 = errors; for (const key7 in data47) { if (!((((key7 === "href") || (key7 === "rel")) || (key7 === "media_type")) || (key7 === "text"))) { validate118.errors = [{ instancePath: instancePath + "/export/responsibilities/" + i9 + "/links/" + i11, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key7 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs102 === errors) { if (data47.href !== undefined) { let data48 = data47.href; const _errs103 = errors; if (errors === _errs103) { if (errors === _errs103) { if (typeof data48 === "string") { if (!(formats10.test(data48))) { validate118.errors = [{ instancePath: instancePath + "/export/responsibilities/" + i9 + "/links/" + i11 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate118.errors = [{ instancePath: instancePath + "/export/responsibilities/" + i9 + "/links/" + i11 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid24 = _errs103 === errors; } else { var valid24 = true; } if (valid24) { if (data47.rel !== undefined) { let data49 = data47.rel; const _errs105 = errors; if (errors === _errs105) { if (typeof data49 === "string") { if (!pattern9.test(data49)) { validate118.errors = [{ instancePath: instancePath + "/export/responsibilities/" + i9 + "/links/" + i11 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate118.errors = [{ instancePath: instancePath + "/export/responsibilities/" + i9 + "/links/" + i11 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid24 = _errs105 === errors; } else { var valid24 = true; } if (valid24) { if (data47.media_type !== undefined) { let data50 = data47.media_type; const _errs107 = errors; if (errors === _errs107) { if (typeof data50 === "string") { if (!pattern3.test(data50)) { validate118.errors = [{ instancePath: instancePath + "/export/responsibilities/" + i9 + "/links/" + i11 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate118.errors = [{ instancePath: instancePath + "/export/responsibilities/" + i9 + "/links/" + i11 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid24 = _errs107 === errors; } else { var valid24 = true; } if (valid24) { if (data47.text !== undefined) { const _errs109 = errors; if (typeof data47.text !== "string") { validate118.errors = [{ instancePath: instancePath + "/export/responsibilities/" + i9 + "/links/" + i11 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid24 = _errs109 === errors; } else { var valid24 = true; } } } } } } } else { validate118.errors = [{ instancePath: instancePath + "/export/responsibilities/" + i9 + "/links/" + i11, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid22 = _errs99 === errors; if (!valid22) { break; } } } } else { validate118.errors = [{ instancePath: instancePath + "/export/responsibilities/" + i9 + "/links", schemaPath: "#/properties/export/properties/responsibilities/items/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid20 = _errs97 === errors; } else { var valid20 = true; } if (valid20) { if (data40.responsible_roles !== undefined) { let data52 = data40.responsible_roles; const _errs111 = errors; if (errors === _errs111) { if (Array.isArray(data52)) { if (data52.length < 1) { validate118.errors = [{ instancePath: instancePath + "/export/responsibilities/" + i9 + "/responsible_roles", schemaPath: "#/properties/export/properties/responsibilities/items/properties/responsible_roles/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid25 = true; const len12 = data52.length; for (let i12 = 0; i12 < len12; i12++) { const _errs113 = errors; if (!(validate102(data52[i12], { instancePath: instancePath + "/export/responsibilities/" + i9 + "/responsible_roles/" + i12, parentData: data52, parentDataProperty: i12, rootData }))) { vErrors = vErrors === null ? validate102.errors : vErrors.concat(validate102.errors); errors = vErrors.length; } var valid25 = _errs113 === errors; if (!valid25) { break; } } } } else { validate118.errors = [{ instancePath: instancePath + "/export/responsibilities/" + i9 + "/responsible_roles", schemaPath: "#/properties/export/properties/responsibilities/items/properties/responsible_roles/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid20 = _errs111 === errors; } else { var valid20 = true; } if (valid20) { if (data40.remarks !== undefined) { const _errs114 = errors; if (typeof data40.remarks !== "string") { validate118.errors = [{ instancePath: instancePath + "/export/responsibilities/" + i9 + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid20 = _errs114 === errors; } else { var valid20 = true; } } } } } } } } } } else { validate118.errors = [{ instancePath: instancePath + "/export/responsibilities/" + i9, schemaPath: "#/properties/export/properties/responsibilities/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid19 = _errs85 === errors; if (!valid19) { break; } } } } else { validate118.errors = [{ instancePath: instancePath + "/export/responsibilities", schemaPath: "#/properties/export/properties/responsibilities/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid6 = _errs83 === errors; } else { var valid6 = true; } if (valid6) { if (data14.remarks !== undefined) { const _errs117 = errors; if (typeof data14.remarks !== "string") { validate118.errors = [{ instancePath: instancePath + "/export/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid6 = _errs117 === errors; } else { var valid6 = true; } } } } } } } } else { validate118.errors = [{ instancePath: instancePath + "/export", schemaPath: "#/properties/export/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid0 = _errs29 === errors; } else { var valid0 = true; } if (valid0) { if (data.inherited !== undefined) { let data56 = data.inherited; const _errs120 = errors; if (errors === _errs120) { if (Array.isArray(data56)) { if (data56.length < 1) { validate118.errors = [{ instancePath: instancePath + "/inherited", schemaPath: "#/properties/inherited/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid28 = true; const len13 = data56.length; for (let i13 = 0; i13 < len13; i13++) { let data57 = data56[i13]; const _errs122 = errors; if (errors === _errs122) { if (data57 && typeof data57 == "object" && !Array.isArray(data57)) { let missing7; if (((data57.uuid === undefined) && (missing7 = "uuid")) || ((data57.description === undefined) && (missing7 = "description"))) { validate118.errors = [{ instancePath: instancePath + "/inherited/" + i13, schemaPath: "#/properties/inherited/items/required", keyword: "required", params: { missingProperty: missing7 }, message: "must have required property '" + missing7 + "'" }]; return false; } else { const _errs124 = errors; for (const key8 in data57) { if (!((((((key8 === "uuid") || (key8 === "provided_uuid")) || (key8 === "description")) || (key8 === "props")) || (key8 === "links")) || (key8 === "responsible_roles"))) { validate118.errors = [{ instancePath: instancePath + "/inherited/" + i13, schemaPath: "#/properties/inherited/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key8 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs124 === errors) { if (data57.uuid !== undefined) { let data58 = data57.uuid; const _errs125 = errors; if (errors === _errs125) { if (typeof data58 === "string") { if (!pattern0.test(data58)) { validate118.errors = [{ instancePath: instancePath + "/inherited/" + i13 + "/uuid", schemaPath: "#/properties/inherited/items/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate118.errors = [{ instancePath: instancePath + "/inherited/" + i13 + "/uuid", schemaPath: "#/properties/inherited/items/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid29 = _errs125 === errors; } else { var valid29 = true; } if (valid29) { if (data57.provided_uuid !== undefined) { let data59 = data57.provided_uuid; const _errs127 = errors; if (errors === _errs127) { if (typeof data59 === "string") { if (!pattern0.test(data59)) { validate118.errors = [{ instancePath: instancePath + "/inherited/" + i13 + "/provided_uuid", schemaPath: "#/properties/inherited/items/properties/provided_uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate118.errors = [{ instancePath: instancePath + "/inherited/" + i13 + "/provided_uuid", schemaPath: "#/properties/inherited/items/properties/provided_uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid29 = _errs127 === errors; } else { var valid29 = true; } if (valid29) { if (data57.description !== undefined) { const _errs129 = errors; if (typeof data57.description !== "string") { validate118.errors = [{ instancePath: instancePath + "/inherited/" + i13 + "/description", schemaPath: "#/properties/inherited/items/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid29 = _errs129 === errors; } else { var valid29 = true; } if (valid29) { if (data57.props !== undefined) { let data61 = data57.props; const _errs131 = errors; if (errors === _errs131) { if (Array.isArray(data61)) { if (data61.length < 1) { validate118.errors = [{ instancePath: instancePath + "/inherited/" + i13 + "/props", schemaPath: "#/properties/inherited/items/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid30 = true; const len14 = data61.length; for (let i14 = 0; i14 < len14; i14++) { const _errs133 = errors; if (!(validate24(data61[i14], { instancePath: instancePath + "/inherited/" + i13 + "/props/" + i14, parentData: data61, parentDataProperty: i14, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid30 = _errs133 === errors; if (!valid30) { break; } } } } else { validate118.errors = [{ instancePath: instancePath + "/inherited/" + i13 + "/props", schemaPath: "#/properties/inherited/items/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid29 = _errs131 === errors; } else { var valid29 = true; } if (valid29) { if (data57.links !== undefined) { let data63 = data57.links; const _errs134 = errors; if (errors === _errs134) { if (Array.isArray(data63)) { if (data63.length < 1) { validate118.errors = [{ instancePath: instancePath + "/inherited/" + i13 + "/links", schemaPath: "#/properties/inherited/items/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid31 = true; const len15 = data63.length; for (let i15 = 0; i15 < len15; i15++) { let data64 = data63[i15]; const _errs136 = errors; const _errs137 = errors; if (errors === _errs137) { if (data64 && typeof data64 == "object" && !Array.isArray(data64)) { let missing8; if ((data64.href === undefined) && (missing8 = "href")) { validate118.errors = [{ instancePath: instancePath + "/inherited/" + i13 + "/links/" + i15, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing8 }, message: "must have required property '" + missing8 + "'" }]; return false; } else { const _errs139 = errors; for (const key9 in data64) { if (!((((key9 === "href") || (key9 === "rel")) || (key9 === "media_type")) || (key9 === "text"))) { validate118.errors = [{ instancePath: instancePath + "/inherited/" + i13 + "/links/" + i15, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key9 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs139 === errors) { if (data64.href !== undefined) { let data65 = data64.href; const _errs140 = errors; if (errors === _errs140) { if (errors === _errs140) { if (typeof data65 === "string") { if (!(formats10.test(data65))) { validate118.errors = [{ instancePath: instancePath + "/inherited/" + i13 + "/links/" + i15 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate118.errors = [{ instancePath: instancePath + "/inherited/" + i13 + "/links/" + i15 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid33 = _errs140 === errors; } else { var valid33 = true; } if (valid33) { if (data64.rel !== undefined) { let data66 = data64.rel; const _errs142 = errors; if (errors === _errs142) { if (typeof data66 === "string") { if (!pattern9.test(data66)) { validate118.errors = [{ instancePath: instancePath + "/inherited/" + i13 + "/links/" + i15 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate118.errors = [{ instancePath: instancePath + "/inherited/" + i13 + "/links/" + i15 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid33 = _errs142 === errors; } else { var valid33 = true; } if (valid33) { if (data64.media_type !== undefined) { let data67 = data64.media_type; const _errs144 = errors; if (errors === _errs144) { if (typeof data67 === "string") { if (!pattern3.test(data67)) { validate118.errors = [{ instancePath: instancePath + "/inherited/" + i13 + "/links/" + i15 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate118.errors = [{ instancePath: instancePath + "/inherited/" + i13 + "/links/" + i15 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid33 = _errs144 === errors; } else { var valid33 = true; } if (valid33) { if (data64.text !== undefined) { const _errs146 = errors; if (typeof data64.text !== "string") { validate118.errors = [{ instancePath: instancePath + "/inherited/" + i13 + "/links/" + i15 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid33 = _errs146 === errors; } else { var valid33 = true; } } } } } } } else { validate118.errors = [{ instancePath: instancePath + "/inherited/" + i13 + "/links/" + i15, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid31 = _errs136 === errors; if (!valid31) { break; } } } } else { validate118.errors = [{ instancePath: instancePath + "/inherited/" + i13 + "/links", schemaPath: "#/properties/inherited/items/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid29 = _errs134 === errors; } else { var valid29 = true; } if (valid29) { if (data57.responsible_roles !== undefined) { let data69 = data57.responsible_roles; const _errs148 = errors; if (errors === _errs148) { if (Array.isArray(data69)) { if (data69.length < 1) { validate118.errors = [{ instancePath: instancePath + "/inherited/" + i13 + "/responsible_roles", schemaPath: "#/properties/inherited/items/properties/responsible_roles/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid34 = true; const len16 = data69.length; for (let i16 = 0; i16 < len16; i16++) { const _errs150 = errors; if (!(validate102(data69[i16], { instancePath: instancePath + "/inherited/" + i13 + "/responsible_roles/" + i16, parentData: data69, parentDataProperty: i16, rootData }))) { vErrors = vErrors === null ? validate102.errors : vErrors.concat(validate102.errors); errors = vErrors.length; } var valid34 = _errs150 === errors; if (!valid34) { break; } } } } else { validate118.errors = [{ instancePath: instancePath + "/inherited/" + i13 + "/responsible_roles", schemaPath: "#/properties/inherited/items/properties/responsible_roles/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid29 = _errs148 === errors; } else { var valid29 = true; } } } } } } } } } else { validate118.errors = [{ instancePath: instancePath + "/inherited/" + i13, schemaPath: "#/properties/inherited/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid28 = _errs122 === errors; if (!valid28) { break; } } } } else { validate118.errors = [{ instancePath: instancePath + "/inherited", schemaPath: "#/properties/inherited/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs120 === errors; } else { var valid0 = true; } if (valid0) { if (data.satisfied !== undefined) { let data71 = data.satisfied; const _errs151 = errors; if (errors === _errs151) { if (Array.isArray(data71)) { if (data71.length < 1) { validate118.errors = [{ instancePath: instancePath + "/satisfied", schemaPath: "#/properties/satisfied/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid35 = true; const len17 = data71.length; for (let i17 = 0; i17 < len17; i17++) { let data72 = data71[i17]; const _errs153 = errors; if (errors === _errs153) { if (data72 && typeof data72 == "object" && !Array.isArray(data72)) { let missing9; if (((data72.uuid === undefined) && (missing9 = "uuid")) || ((data72.description === undefined) && (missing9 = "description"))) { validate118.errors = [{ instancePath: instancePath + "/satisfied/" + i17, schemaPath: "#/properties/satisfied/items/required", keyword: "required", params: { missingProperty: missing9 }, message: "must have required property '" + missing9 + "'" }]; return false; } else { const _errs155 = errors; for (const key10 in data72) { if (!(((((((key10 === "uuid") || (key10 === "responsibility_uuid")) || (key10 === "description")) || (key10 === "props")) || (key10 === "links")) || (key10 === "responsible_roles")) || (key10 === "remarks"))) { validate118.errors = [{ instancePath: instancePath + "/satisfied/" + i17, schemaPath: "#/properties/satisfied/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key10 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs155 === errors) { if (data72.uuid !== undefined) { let data73 = data72.uuid; const _errs156 = errors; if (errors === _errs156) { if (typeof data73 === "string") { if (!pattern0.test(data73)) { validate118.errors = [{ instancePath: instancePath + "/satisfied/" + i17 + "/uuid", schemaPath: "#/properties/satisfied/items/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate118.errors = [{ instancePath: instancePath + "/satisfied/" + i17 + "/uuid", schemaPath: "#/properties/satisfied/items/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid36 = _errs156 === errors; } else { var valid36 = true; } if (valid36) { if (data72.responsibility_uuid !== undefined) { let data74 = data72.responsibility_uuid; const _errs158 = errors; if (errors === _errs158) { if (typeof data74 === "string") { if (!pattern0.test(data74)) { validate118.errors = [{ instancePath: instancePath + "/satisfied/" + i17 + "/responsibility_uuid", schemaPath: "#/properties/satisfied/items/properties/responsibility_uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate118.errors = [{ instancePath: instancePath + "/satisfied/" + i17 + "/responsibility_uuid", schemaPath: "#/properties/satisfied/items/properties/responsibility_uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid36 = _errs158 === errors; } else { var valid36 = true; } if (valid36) { if (data72.description !== undefined) { const _errs160 = errors; if (typeof data72.description !== "string") { validate118.errors = [{ instancePath: instancePath + "/satisfied/" + i17 + "/description", schemaPath: "#/properties/satisfied/items/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid36 = _errs160 === errors; } else { var valid36 = true; } if (valid36) { if (data72.props !== undefined) { let data76 = data72.props; const _errs162 = errors; if (errors === _errs162) { if (Array.isArray(data76)) { if (data76.length < 1) { validate118.errors = [{ instancePath: instancePath + "/satisfied/" + i17 + "/props", schemaPath: "#/properties/satisfied/items/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid37 = true; const len18 = data76.length; for (let i18 = 0; i18 < len18; i18++) { const _errs164 = errors; if (!(validate24(data76[i18], { instancePath: instancePath + "/satisfied/" + i17 + "/props/" + i18, parentData: data76, parentDataProperty: i18, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid37 = _errs164 === errors; if (!valid37) { break; } } } } else { validate118.errors = [{ instancePath: instancePath + "/satisfied/" + i17 + "/props", schemaPath: "#/properties/satisfied/items/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid36 = _errs162 === errors; } else { var valid36 = true; } if (valid36) { if (data72.links !== undefined) { let data78 = data72.links; const _errs165 = errors; if (errors === _errs165) { if (Array.isArray(data78)) { if (data78.length < 1) { validate118.errors = [{ instancePath: instancePath + "/satisfied/" + i17 + "/links", schemaPath: "#/properties/satisfied/items/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid38 = true; const len19 = data78.length; for (let i19 = 0; i19 < len19; i19++) { let data79 = data78[i19]; const _errs167 = errors; const _errs168 = errors; if (errors === _errs168) { if (data79 && typeof data79 == "object" && !Array.isArray(data79)) { let missing10; if ((data79.href === undefined) && (missing10 = "href")) { validate118.errors = [{ instancePath: instancePath + "/satisfied/" + i17 + "/links/" + i19, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing10 }, message: "must have required property '" + missing10 + "'" }]; return false; } else { const _errs170 = errors; for (const key11 in data79) { if (!((((key11 === "href") || (key11 === "rel")) || (key11 === "media_type")) || (key11 === "text"))) { validate118.errors = [{ instancePath: instancePath + "/satisfied/" + i17 + "/links/" + i19, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key11 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs170 === errors) { if (data79.href !== undefined) { let data80 = data79.href; const _errs171 = errors; if (errors === _errs171) { if (errors === _errs171) { if (typeof data80 === "string") { if (!(formats10.test(data80))) { validate118.errors = [{ instancePath: instancePath + "/satisfied/" + i17 + "/links/" + i19 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate118.errors = [{ instancePath: instancePath + "/satisfied/" + i17 + "/links/" + i19 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid40 = _errs171 === errors; } else { var valid40 = true; } if (valid40) { if (data79.rel !== undefined) { let data81 = data79.rel; const _errs173 = errors; if (errors === _errs173) { if (typeof data81 === "string") { if (!pattern9.test(data81)) { validate118.errors = [{ instancePath: instancePath + "/satisfied/" + i17 + "/links/" + i19 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate118.errors = [{ instancePath: instancePath + "/satisfied/" + i17 + "/links/" + i19 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid40 = _errs173 === errors; } else { var valid40 = true; } if (valid40) { if (data79.media_type !== undefined) { let data82 = data79.media_type; const _errs175 = errors; if (errors === _errs175) { if (typeof data82 === "string") { if (!pattern3.test(data82)) { validate118.errors = [{ instancePath: instancePath + "/satisfied/" + i17 + "/links/" + i19 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate118.errors = [{ instancePath: instancePath + "/satisfied/" + i17 + "/links/" + i19 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid40 = _errs175 === errors; } else { var valid40 = true; } if (valid40) { if (data79.text !== undefined) { const _errs177 = errors; if (typeof data79.text !== "string") { validate118.errors = [{ instancePath: instancePath + "/satisfied/" + i17 + "/links/" + i19 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid40 = _errs177 === errors; } else { var valid40 = true; } } } } } } } else { validate118.errors = [{ instancePath: instancePath + "/satisfied/" + i17 + "/links/" + i19, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid38 = _errs167 === errors; if (!valid38) { break; } } } } else { validate118.errors = [{ instancePath: instancePath + "/satisfied/" + i17 + "/links", schemaPath: "#/properties/satisfied/items/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid36 = _errs165 === errors; } else { var valid36 = true; } if (valid36) { if (data72.responsible_roles !== undefined) { let data84 = data72.responsible_roles; const _errs179 = errors; if (errors === _errs179) { if (Array.isArray(data84)) { if (data84.length < 1) { validate118.errors = [{ instancePath: instancePath + "/satisfied/" + i17 + "/responsible_roles", schemaPath: "#/properties/satisfied/items/properties/responsible_roles/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid41 = true; const len20 = data84.length; for (let i20 = 0; i20 < len20; i20++) { const _errs181 = errors; if (!(validate102(data84[i20], { instancePath: instancePath + "/satisfied/" + i17 + "/responsible_roles/" + i20, parentData: data84, parentDataProperty: i20, rootData }))) { vErrors = vErrors === null ? validate102.errors : vErrors.concat(validate102.errors); errors = vErrors.length; } var valid41 = _errs181 === errors; if (!valid41) { break; } } } } else { validate118.errors = [{ instancePath: instancePath + "/satisfied/" + i17 + "/responsible_roles", schemaPath: "#/properties/satisfied/items/properties/responsible_roles/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid36 = _errs179 === errors; } else { var valid36 = true; } if (valid36) { if (data72.remarks !== undefined) { const _errs182 = errors; if (typeof data72.remarks !== "string") { validate118.errors = [{ instancePath: instancePath + "/satisfied/" + i17 + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid36 = _errs182 === errors; } else { var valid36 = true; } } } } } } } } } } else { validate118.errors = [{ instancePath: instancePath + "/satisfied/" + i17, schemaPath: "#/properties/satisfied/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid35 = _errs153 === errors; if (!valid35) { break; } } } } else { validate118.errors = [{ instancePath: instancePath + "/satisfied", schemaPath: "#/properties/satisfied/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs151 === errors; } else { var valid0 = true; } if (valid0) { if (data.responsible_roles !== undefined) { let data87 = data.responsible_roles; const _errs185 = errors; if (errors === _errs185) { if (Array.isArray(data87)) { if (data87.length < 1) { validate118.errors = [{ instancePath: instancePath + "/responsible_roles", schemaPath: "#/properties/responsible_roles/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid43 = true; const len21 = data87.length; for (let i21 = 0; i21 < len21; i21++) { const _errs187 = errors; if (!(validate102(data87[i21], { instancePath: instancePath + "/responsible_roles/" + i21, parentData: data87, parentDataProperty: i21, rootData }))) { vErrors = vErrors === null ? validate102.errors : vErrors.concat(validate102.errors); errors = vErrors.length; } var valid43 = _errs187 === errors; if (!valid43) { break; } } } } else { validate118.errors = [{ instancePath: instancePath + "/responsible_roles", schemaPath: "#/properties/responsible_roles/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs185 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs188 = errors; if (typeof data.remarks !== "string") { validate118.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs188 === errors; } else { var valid0 = true; } } } } } } } } } } } } } } } else { validate118.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate118.errors = vErrors; return errors === 0; } function validate115(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/statement" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if (((data.statement_id === undefined) && (missing0 = "statement_id")) || ((data.uuid === undefined) && (missing0 = "uuid"))) { validate115.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(((((((key0 === "statement_id") || (key0 === "uuid")) || (key0 === "props")) || (key0 === "links")) || (key0 === "responsible_roles")) || (key0 === "by_components")) || (key0 === "remarks"))) { validate115.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.statement_id !== undefined) { let data0 = data.statement_id; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern9.test(data0)) { validate115.errors = [{ instancePath: instancePath + "/statement_id", schemaPath: "#/properties/statement_id/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate115.errors = [{ instancePath: instancePath + "/statement_id", schemaPath: "#/properties/statement_id/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.uuid !== undefined) { let data1 = data.uuid; const _errs4 = errors; if (errors === _errs4) { if (typeof data1 === "string") { if (!pattern0.test(data1)) { validate115.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate115.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data2 = data.props; const _errs6 = errors; if (errors === _errs6) { if (Array.isArray(data2)) { if (data2.length < 1) { validate115.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data2.length; for (let i0 = 0; i0 < len0; i0++) { const _errs8 = errors; if (!(validate24(data2[i0], { instancePath: instancePath + "/props/" + i0, parentData: data2, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs8 === errors; if (!valid1) { break; } } } } else { validate115.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data4 = data.links; const _errs9 = errors; if (errors === _errs9) { if (Array.isArray(data4)) { if (data4.length < 1) { validate115.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data4.length; for (let i1 = 0; i1 < len1; i1++) { let data5 = data4[i1]; const _errs11 = errors; const _errs12 = errors; if (errors === _errs12) { if (data5 && typeof data5 == "object" && !Array.isArray(data5)) { let missing1; if ((data5.href === undefined) && (missing1 = "href")) { validate115.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs14 = errors; for (const key1 in data5) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate115.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs14 === errors) { if (data5.href !== undefined) { let data6 = data5.href; const _errs15 = errors; if (errors === _errs15) { if (errors === _errs15) { if (typeof data6 === "string") { if (!(formats10.test(data6))) { validate115.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate115.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid4 = _errs15 === errors; } else { var valid4 = true; } if (valid4) { if (data5.rel !== undefined) { let data7 = data5.rel; const _errs17 = errors; if (errors === _errs17) { if (typeof data7 === "string") { if (!pattern9.test(data7)) { validate115.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate115.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs17 === errors; } else { var valid4 = true; } if (valid4) { if (data5.media_type !== undefined) { let data8 = data5.media_type; const _errs19 = errors; if (errors === _errs19) { if (typeof data8 === "string") { if (!pattern3.test(data8)) { validate115.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate115.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs19 === errors; } else { var valid4 = true; } if (valid4) { if (data5.text !== undefined) { const _errs21 = errors; if (typeof data5.text !== "string") { validate115.errors = [{ instancePath: instancePath + "/links/" + i1 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid4 = _errs21 === errors; } else { var valid4 = true; } } } } } } } else { validate115.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs11 === errors; if (!valid2) { break; } } } } else { validate115.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs9 === errors; } else { var valid0 = true; } if (valid0) { if (data.responsible_roles !== undefined) { let data10 = data.responsible_roles; const _errs23 = errors; if (errors === _errs23) { if (Array.isArray(data10)) { if (data10.length < 1) { validate115.errors = [{ instancePath: instancePath + "/responsible_roles", schemaPath: "#/properties/responsible_roles/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid5 = true; const len2 = data10.length; for (let i2 = 0; i2 < len2; i2++) { const _errs25 = errors; if (!(validate102(data10[i2], { instancePath: instancePath + "/responsible_roles/" + i2, parentData: data10, parentDataProperty: i2, rootData }))) { vErrors = vErrors === null ? validate102.errors : vErrors.concat(validate102.errors); errors = vErrors.length; } var valid5 = _errs25 === errors; if (!valid5) { break; } } } } else { validate115.errors = [{ instancePath: instancePath + "/responsible_roles", schemaPath: "#/properties/responsible_roles/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs23 === errors; } else { var valid0 = true; } if (valid0) { if (data.by_components !== undefined) { let data12 = data.by_components; const _errs26 = errors; if (errors === _errs26) { if (Array.isArray(data12)) { if (data12.length < 1) { validate115.errors = [{ instancePath: instancePath + "/by_components", schemaPath: "#/properties/by_components/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid6 = true; const len3 = data12.length; for (let i3 = 0; i3 < len3; i3++) { const _errs28 = errors; if (!(validate118(data12[i3], { instancePath: instancePath + "/by_components/" + i3, parentData: data12, parentDataProperty: i3, rootData }))) { vErrors = vErrors === null ? validate118.errors : vErrors.concat(validate118.errors); errors = vErrors.length; } var valid6 = _errs28 === errors; if (!valid6) { break; } } } } else { validate115.errors = [{ instancePath: instancePath + "/by_components", schemaPath: "#/properties/by_components/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs26 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs29 = errors; if (typeof data.remarks !== "string") { validate115.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs29 === errors; } else { var valid0 = true; } } } } } } } } } } else { validate115.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate115.errors = vErrors; return errors === 0; } function validate111(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/implemented_requirement" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if (((data.uuid === undefined) && (missing0 = "uuid")) || ((data.control_id === undefined) && (missing0 = "control_id"))) { validate111.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(func8.call(schema119.properties, key0))) { validate111.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.uuid !== undefined) { let data0 = data.uuid; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern0.test(data0)) { validate111.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate111.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.control_id !== undefined) { let data1 = data.control_id; const _errs4 = errors; if (errors === _errs4) { if (typeof data1 === "string") { if (!pattern9.test(data1)) { validate111.errors = [{ instancePath: instancePath + "/control_id", schemaPath: "#/properties/control_id/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate111.errors = [{ instancePath: instancePath + "/control_id", schemaPath: "#/properties/control_id/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data2 = data.props; const _errs6 = errors; if (errors === _errs6) { if (Array.isArray(data2)) { if (data2.length < 1) { validate111.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data2.length; for (let i0 = 0; i0 < len0; i0++) { const _errs8 = errors; if (!(validate24(data2[i0], { instancePath: instancePath + "/props/" + i0, parentData: data2, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs8 === errors; if (!valid1) { break; } } } } else { validate111.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data4 = data.links; const _errs9 = errors; if (errors === _errs9) { if (Array.isArray(data4)) { if (data4.length < 1) { validate111.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data4.length; for (let i1 = 0; i1 < len1; i1++) { let data5 = data4[i1]; const _errs11 = errors; const _errs12 = errors; if (errors === _errs12) { if (data5 && typeof data5 == "object" && !Array.isArray(data5)) { let missing1; if ((data5.href === undefined) && (missing1 = "href")) { validate111.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs14 = errors; for (const key1 in data5) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate111.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs14 === errors) { if (data5.href !== undefined) { let data6 = data5.href; const _errs15 = errors; if (errors === _errs15) { if (errors === _errs15) { if (typeof data6 === "string") { if (!(formats10.test(data6))) { validate111.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate111.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid4 = _errs15 === errors; } else { var valid4 = true; } if (valid4) { if (data5.rel !== undefined) { let data7 = data5.rel; const _errs17 = errors; if (errors === _errs17) { if (typeof data7 === "string") { if (!pattern9.test(data7)) { validate111.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate111.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs17 === errors; } else { var valid4 = true; } if (valid4) { if (data5.media_type !== undefined) { let data8 = data5.media_type; const _errs19 = errors; if (errors === _errs19) { if (typeof data8 === "string") { if (!pattern3.test(data8)) { validate111.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate111.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs19 === errors; } else { var valid4 = true; } if (valid4) { if (data5.text !== undefined) { const _errs21 = errors; if (typeof data5.text !== "string") { validate111.errors = [{ instancePath: instancePath + "/links/" + i1 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid4 = _errs21 === errors; } else { var valid4 = true; } } } } } } } else { validate111.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs11 === errors; if (!valid2) { break; } } } } else { validate111.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs9 === errors; } else { var valid0 = true; } if (valid0) { if (data.set_parameters !== undefined) { let data10 = data.set_parameters; const _errs23 = errors; if (errors === _errs23) { if (Array.isArray(data10)) { if (data10.length < 1) { validate111.errors = [{ instancePath: instancePath + "/set_parameters", schemaPath: "#/properties/set_parameters/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid5 = true; const len2 = data10.length; for (let i2 = 0; i2 < len2; i2++) { const _errs25 = errors; if (!(validate109(data10[i2], { instancePath: instancePath + "/set_parameters/" + i2, parentData: data10, parentDataProperty: i2, rootData }))) { vErrors = vErrors === null ? validate109.errors : vErrors.concat(validate109.errors); errors = vErrors.length; } var valid5 = _errs25 === errors; if (!valid5) { break; } } } } else { validate111.errors = [{ instancePath: instancePath + "/set_parameters", schemaPath: "#/properties/set_parameters/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs23 === errors; } else { var valid0 = true; } if (valid0) { if (data.responsible_roles !== undefined) { let data12 = data.responsible_roles; const _errs26 = errors; if (errors === _errs26) { if (Array.isArray(data12)) { if (data12.length < 1) { validate111.errors = [{ instancePath: instancePath + "/responsible_roles", schemaPath: "#/properties/responsible_roles/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid6 = true; const len3 = data12.length; for (let i3 = 0; i3 < len3; i3++) { const _errs28 = errors; if (!(validate102(data12[i3], { instancePath: instancePath + "/responsible_roles/" + i3, parentData: data12, parentDataProperty: i3, rootData }))) { vErrors = vErrors === null ? validate102.errors : vErrors.concat(validate102.errors); errors = vErrors.length; } var valid6 = _errs28 === errors; if (!valid6) { break; } } } } else { validate111.errors = [{ instancePath: instancePath + "/responsible_roles", schemaPath: "#/properties/responsible_roles/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs26 === errors; } else { var valid0 = true; } if (valid0) { if (data.statements !== undefined) { let data14 = data.statements; const _errs29 = errors; if (errors === _errs29) { if (Array.isArray(data14)) { if (data14.length < 1) { validate111.errors = [{ instancePath: instancePath + "/statements", schemaPath: "#/properties/statements/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid7 = true; const len4 = data14.length; for (let i4 = 0; i4 < len4; i4++) { const _errs31 = errors; if (!(validate115(data14[i4], { instancePath: instancePath + "/statements/" + i4, parentData: data14, parentDataProperty: i4, rootData }))) { vErrors = vErrors === null ? validate115.errors : vErrors.concat(validate115.errors); errors = vErrors.length; } var valid7 = _errs31 === errors; if (!valid7) { break; } } } } else { validate111.errors = [{ instancePath: instancePath + "/statements", schemaPath: "#/properties/statements/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs29 === errors; } else { var valid0 = true; } if (valid0) { if (data.by_components !== undefined) { let data16 = data.by_components; const _errs32 = errors; if (errors === _errs32) { if (Array.isArray(data16)) { if (data16.length < 1) { validate111.errors = [{ instancePath: instancePath + "/by_components", schemaPath: "#/properties/by_components/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid8 = true; const len5 = data16.length; for (let i5 = 0; i5 < len5; i5++) { const _errs34 = errors; if (!(validate118(data16[i5], { instancePath: instancePath + "/by_components/" + i5, parentData: data16, parentDataProperty: i5, rootData }))) { vErrors = vErrors === null ? validate118.errors : vErrors.concat(validate118.errors); errors = vErrors.length; } var valid8 = _errs34 === errors; if (!valid8) { break; } } } } else { validate111.errors = [{ instancePath: instancePath + "/by_components", schemaPath: "#/properties/by_components/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs32 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs35 = errors; if (typeof data.remarks !== "string") { validate111.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs35 === errors; } else { var valid0 = true; } } } } } } } } } } } } else { validate111.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate111.errors = vErrors; return errors === 0; } function validate107(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/component_definition_control_implementation" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if (((((data.uuid === undefined) && (missing0 = "uuid")) || ((data.source === undefined) && (missing0 = "source"))) || ((data.description === undefined) && (missing0 = "description"))) || ((data.implemented_requirements === undefined) && (missing0 = "implemented_requirements"))) { validate107.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(((((((key0 === "uuid") || (key0 === "source")) || (key0 === "description")) || (key0 === "props")) || (key0 === "links")) || (key0 === "set_parameters")) || (key0 === "implemented_requirements"))) { validate107.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.uuid !== undefined) { let data0 = data.uuid; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern0.test(data0)) { validate107.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate107.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.source !== undefined) { let data1 = data.source; const _errs4 = errors; if (errors === _errs4) { if (errors === _errs4) { if (typeof data1 === "string") { if (!(formats10.test(data1))) { validate107.errors = [{ instancePath: instancePath + "/source", schemaPath: "#/properties/source/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate107.errors = [{ instancePath: instancePath + "/source", schemaPath: "#/properties/source/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.description !== undefined) { const _errs6 = errors; if (typeof data.description !== "string") { validate107.errors = [{ instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data3 = data.props; const _errs8 = errors; if (errors === _errs8) { if (Array.isArray(data3)) { if (data3.length < 1) { validate107.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data3.length; for (let i0 = 0; i0 < len0; i0++) { const _errs10 = errors; if (!(validate24(data3[i0], { instancePath: instancePath + "/props/" + i0, parentData: data3, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs10 === errors; if (!valid1) { break; } } } } else { validate107.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs8 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data5 = data.links; const _errs11 = errors; if (errors === _errs11) { if (Array.isArray(data5)) { if (data5.length < 1) { validate107.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data5.length; for (let i1 = 0; i1 < len1; i1++) { let data6 = data5[i1]; const _errs13 = errors; const _errs14 = errors; if (errors === _errs14) { if (data6 && typeof data6 == "object" && !Array.isArray(data6)) { let missing1; if ((data6.href === undefined) && (missing1 = "href")) { validate107.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs16 = errors; for (const key1 in data6) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate107.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs16 === errors) { if (data6.href !== undefined) { let data7 = data6.href; const _errs17 = errors; if (errors === _errs17) { if (errors === _errs17) { if (typeof data7 === "string") { if (!(formats10.test(data7))) { validate107.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate107.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid4 = _errs17 === errors; } else { var valid4 = true; } if (valid4) { if (data6.rel !== undefined) { let data8 = data6.rel; const _errs19 = errors; if (errors === _errs19) { if (typeof data8 === "string") { if (!pattern9.test(data8)) { validate107.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate107.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs19 === errors; } else { var valid4 = true; } if (valid4) { if (data6.media_type !== undefined) { let data9 = data6.media_type; const _errs21 = errors; if (errors === _errs21) { if (typeof data9 === "string") { if (!pattern3.test(data9)) { validate107.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate107.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs21 === errors; } else { var valid4 = true; } if (valid4) { if (data6.text !== undefined) { const _errs23 = errors; if (typeof data6.text !== "string") { validate107.errors = [{ instancePath: instancePath + "/links/" + i1 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid4 = _errs23 === errors; } else { var valid4 = true; } } } } } } } else { validate107.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs13 === errors; if (!valid2) { break; } } } } else { validate107.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs11 === errors; } else { var valid0 = true; } if (valid0) { if (data.set_parameters !== undefined) { let data11 = data.set_parameters; const _errs25 = errors; if (errors === _errs25) { if (Array.isArray(data11)) { if (data11.length < 1) { validate107.errors = [{ instancePath: instancePath + "/set_parameters", schemaPath: "#/properties/set_parameters/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid5 = true; const len2 = data11.length; for (let i2 = 0; i2 < len2; i2++) { const _errs27 = errors; if (!(validate109(data11[i2], { instancePath: instancePath + "/set_parameters/" + i2, parentData: data11, parentDataProperty: i2, rootData }))) { vErrors = vErrors === null ? validate109.errors : vErrors.concat(validate109.errors); errors = vErrors.length; } var valid5 = _errs27 === errors; if (!valid5) { break; } } } } else { validate107.errors = [{ instancePath: instancePath + "/set_parameters", schemaPath: "#/properties/set_parameters/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs25 === errors; } else { var valid0 = true; } if (valid0) { if (data.implemented_requirements !== undefined) { let data13 = data.implemented_requirements; const _errs28 = errors; if (errors === _errs28) { if (Array.isArray(data13)) { if (data13.length < 1) { validate107.errors = [{ instancePath: instancePath + "/implemented_requirements", schemaPath: "#/properties/implemented_requirements/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid6 = true; const len3 = data13.length; for (let i3 = 0; i3 < len3; i3++) { const _errs30 = errors; if (!(validate111(data13[i3], { instancePath: instancePath + "/implemented_requirements/" + i3, parentData: data13, parentDataProperty: i3, rootData }))) { vErrors = vErrors === null ? validate111.errors : vErrors.concat(validate111.errors); errors = vErrors.length; } var valid6 = _errs30 === errors; if (!valid6) { break; } } } } else { validate107.errors = [{ instancePath: instancePath + "/implemented_requirements", schemaPath: "#/properties/implemented_requirements/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs28 === errors; } else { var valid0 = true; } } } } } } } } } } else { validate107.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate107.errors = vErrors; return errors === 0; } function validate100(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/defined_component" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if (((((data.uuid === undefined) && (missing0 = "uuid")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.title === undefined) && (missing0 = "title"))) || ((data.description === undefined) && (missing0 = "description"))) { validate100.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(func8.call(schema107.properties, key0))) { validate100.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.uuid !== undefined) { let data0 = data.uuid; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern0.test(data0)) { validate100.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate100.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.type !== undefined) { let data1 = data.type; const _errs4 = errors; if (errors === _errs4) { if (typeof data1 === "string") { if (!pattern3.test(data1)) { validate100.errors = [{ instancePath: instancePath + "/type", schemaPath: "#/properties/type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate100.errors = [{ instancePath: instancePath + "/type", schemaPath: "#/properties/type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.title !== undefined) { const _errs6 = errors; if (typeof data.title !== "string") { validate100.errors = [{ instancePath: instancePath + "/title", schemaPath: "#/properties/title/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.description !== undefined) { const _errs8 = errors; if (typeof data.description !== "string") { validate100.errors = [{ instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs8 === errors; } else { var valid0 = true; } if (valid0) { if (data.purpose !== undefined) { const _errs10 = errors; if (typeof data.purpose !== "string") { validate100.errors = [{ instancePath: instancePath + "/purpose", schemaPath: "#/properties/purpose/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs10 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data5 = data.props; const _errs12 = errors; if (errors === _errs12) { if (Array.isArray(data5)) { if (data5.length < 1) { validate100.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data5.length; for (let i0 = 0; i0 < len0; i0++) { const _errs14 = errors; if (!(validate24(data5[i0], { instancePath: instancePath + "/props/" + i0, parentData: data5, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs14 === errors; if (!valid1) { break; } } } } else { validate100.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs12 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data7 = data.links; const _errs15 = errors; if (errors === _errs15) { if (Array.isArray(data7)) { if (data7.length < 1) { validate100.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data7.length; for (let i1 = 0; i1 < len1; i1++) { let data8 = data7[i1]; const _errs17 = errors; const _errs18 = errors; if (errors === _errs18) { if (data8 && typeof data8 == "object" && !Array.isArray(data8)) { let missing1; if ((data8.href === undefined) && (missing1 = "href")) { validate100.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs20 = errors; for (const key1 in data8) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate100.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs20 === errors) { if (data8.href !== undefined) { let data9 = data8.href; const _errs21 = errors; if (errors === _errs21) { if (errors === _errs21) { if (typeof data9 === "string") { if (!(formats10.test(data9))) { validate100.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate100.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid4 = _errs21 === errors; } else { var valid4 = true; } if (valid4) { if (data8.rel !== undefined) { let data10 = data8.rel; const _errs23 = errors; if (errors === _errs23) { if (typeof data10 === "string") { if (!pattern9.test(data10)) { validate100.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate100.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs23 === errors; } else { var valid4 = true; } if (valid4) { if (data8.media_type !== undefined) { let data11 = data8.media_type; const _errs25 = errors; if (errors === _errs25) { if (typeof data11 === "string") { if (!pattern3.test(data11)) { validate100.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate100.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs25 === errors; } else { var valid4 = true; } if (valid4) { if (data8.text !== undefined) { const _errs27 = errors; if (typeof data8.text !== "string") { validate100.errors = [{ instancePath: instancePath + "/links/" + i1 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid4 = _errs27 === errors; } else { var valid4 = true; } } } } } } } else { validate100.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs17 === errors; if (!valid2) { break; } } } } else { validate100.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs15 === errors; } else { var valid0 = true; } if (valid0) { if (data.responsible_roles !== undefined) { let data13 = data.responsible_roles; const _errs29 = errors; if (errors === _errs29) { if (Array.isArray(data13)) { if (data13.length < 1) { validate100.errors = [{ instancePath: instancePath + "/responsible_roles", schemaPath: "#/properties/responsible_roles/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid5 = true; const len2 = data13.length; for (let i2 = 0; i2 < len2; i2++) { const _errs31 = errors; if (!(validate102(data13[i2], { instancePath: instancePath + "/responsible_roles/" + i2, parentData: data13, parentDataProperty: i2, rootData }))) { vErrors = vErrors === null ? validate102.errors : vErrors.concat(validate102.errors); errors = vErrors.length; } var valid5 = _errs31 === errors; if (!valid5) { break; } } } } else { validate100.errors = [{ instancePath: instancePath + "/responsible_roles", schemaPath: "#/properties/responsible_roles/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs29 === errors; } else { var valid0 = true; } if (valid0) { if (data.protocols !== undefined) { let data15 = data.protocols; const _errs32 = errors; if (errors === _errs32) { if (Array.isArray(data15)) { if (data15.length < 1) { validate100.errors = [{ instancePath: instancePath + "/protocols", schemaPath: "#/properties/protocols/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid6 = true; const len3 = data15.length; for (let i3 = 0; i3 < len3; i3++) { const _errs34 = errors; if (!(validate105(data15[i3], { instancePath: instancePath + "/protocols/" + i3, parentData: data15, parentDataProperty: i3, rootData }))) { vErrors = vErrors === null ? validate105.errors : vErrors.concat(validate105.errors); errors = vErrors.length; } var valid6 = _errs34 === errors; if (!valid6) { break; } } } } else { validate100.errors = [{ instancePath: instancePath + "/protocols", schemaPath: "#/properties/protocols/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs32 === errors; } else { var valid0 = true; } if (valid0) { if (data.control_implementations !== undefined) { let data17 = data.control_implementations; const _errs35 = errors; if (errors === _errs35) { if (Array.isArray(data17)) { if (data17.length < 1) { validate100.errors = [{ instancePath: instancePath + "/control_implementations", schemaPath: "#/properties/control_implementations/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid7 = true; const len4 = data17.length; for (let i4 = 0; i4 < len4; i4++) { const _errs37 = errors; if (!(validate107(data17[i4], { instancePath: instancePath + "/control_implementations/" + i4, parentData: data17, parentDataProperty: i4, rootData }))) { vErrors = vErrors === null ? validate107.errors : vErrors.concat(validate107.errors); errors = vErrors.length; } var valid7 = _errs37 === errors; if (!valid7) { break; } } } } else { validate100.errors = [{ instancePath: instancePath + "/control_implementations", schemaPath: "#/properties/control_implementations/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs35 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs38 = errors; if (typeof data.remarks !== "string") { validate100.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs38 === errors; } else { var valid0 = true; } } } } } } } } } } } } } } else { validate100.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate100.errors = vErrors; return errors === 0; } const schema140 = { "title": "Capability", "description": "A grouping of other components and/or capabilities.", "$id": "#/definitions/capability", "type": "object", "properties": { "uuid": { "title": "Capability Identifier", "description": "A unique identifier for a capability.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "name": { "title": "Capability Name", "description": "The capability's human_readable name.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "description": { "title": "Capability Description", "description": "A summary of the capability.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "incorporates_components": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/incorporates_component" } }, "control_implementations": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/control_implementation" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "name", "description"], "additionalProperties": false }; const schema142 = { "title": "Incorporates Component", "description": "TBD", "$id": "#/definitions/incorporates_component", "type": "object", "properties": { "component_uuid": { "title": "Component Reference", "description": "A reference to a component by its identifier", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "description": { "title": "Component Description", "description": "A description of the component, including information about its function.", "type": "string" } }, "required": ["component_uuid", "description"], "additionalProperties": false }; const schema143 = { "title": "Control Implementation", "description": "Describes how the system satisfies a set of controls.", "$id": "#/definitions/control_implementation", "type": "object", "properties": { "description": { "title": "Control Implementation Description", "description": "A statement describing important things to know about how this set of control satisfaction documentation is approached.", "type": "string" }, "set_parameters": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/set_parameter" } }, "implemented_requirements": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/implemented_requirement" } } }, "required": ["description", "implemented_requirements"], "additionalProperties": false }; function validate141(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/control_implementation" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if (((data.description === undefined) && (missing0 = "description")) || ((data.implemented_requirements === undefined) && (missing0 = "implemented_requirements"))) { validate141.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(((key0 === "description") || (key0 === "set_parameters")) || (key0 === "implemented_requirements"))) { validate141.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.description !== undefined) { const _errs2 = errors; if (typeof data.description !== "string") { validate141.errors = [{ instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.set_parameters !== undefined) { let data1 = data.set_parameters; const _errs4 = errors; if (errors === _errs4) { if (Array.isArray(data1)) { if (data1.length < 1) { validate141.errors = [{ instancePath: instancePath + "/set_parameters", schemaPath: "#/properties/set_parameters/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data1.length; for (let i0 = 0; i0 < len0; i0++) { const _errs6 = errors; if (!(validate109(data1[i0], { instancePath: instancePath + "/set_parameters/" + i0, parentData: data1, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate109.errors : vErrors.concat(validate109.errors); errors = vErrors.length; } var valid1 = _errs6 === errors; if (!valid1) { break; } } } } else { validate141.errors = [{ instancePath: instancePath + "/set_parameters", schemaPath: "#/properties/set_parameters/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.implemented_requirements !== undefined) { let data3 = data.implemented_requirements; const _errs7 = errors; if (errors === _errs7) { if (Array.isArray(data3)) { if (data3.length < 1) { validate141.errors = [{ instancePath: instancePath + "/implemented_requirements", schemaPath: "#/properties/implemented_requirements/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data3.length; for (let i1 = 0; i1 < len1; i1++) { const _errs9 = errors; if (!(validate111(data3[i1], { instancePath: instancePath + "/implemented_requirements/" + i1, parentData: data3, parentDataProperty: i1, rootData }))) { vErrors = vErrors === null ? validate111.errors : vErrors.concat(validate111.errors); errors = vErrors.length; } var valid2 = _errs9 === errors; if (!valid2) { break; } } } } else { validate141.errors = [{ instancePath: instancePath + "/implemented_requirements", schemaPath: "#/properties/implemented_requirements/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs7 === errors; } else { var valid0 = true; } } } } } } else { validate141.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate141.errors = vErrors; return errors === 0; } function validate139(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/capability" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((((data.uuid === undefined) && (missing0 = "uuid")) || ((data.name === undefined) && (missing0 = "name"))) || ((data.description === undefined) && (missing0 = "description"))) { validate139.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!((((((((key0 === "uuid") || (key0 === "name")) || (key0 === "description")) || (key0 === "props")) || (key0 === "links")) || (key0 === "incorporates_components")) || (key0 === "control_implementations")) || (key0 === "remarks"))) { validate139.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.uuid !== undefined) { let data0 = data.uuid; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern0.test(data0)) { validate139.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate139.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.name !== undefined) { let data1 = data.name; const _errs4 = errors; if (errors === _errs4) { if (typeof data1 === "string") { if (!pattern3.test(data1)) { validate139.errors = [{ instancePath: instancePath + "/name", schemaPath: "#/properties/name/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate139.errors = [{ instancePath: instancePath + "/name", schemaPath: "#/properties/name/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.description !== undefined) { const _errs6 = errors; if (typeof data.description !== "string") { validate139.errors = [{ instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data3 = data.props; const _errs8 = errors; if (errors === _errs8) { if (Array.isArray(data3)) { if (data3.length < 1) { validate139.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data3.length; for (let i0 = 0; i0 < len0; i0++) { const _errs10 = errors; if (!(validate24(data3[i0], { instancePath: instancePath + "/props/" + i0, parentData: data3, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs10 === errors; if (!valid1) { break; } } } } else { validate139.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs8 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data5 = data.links; const _errs11 = errors; if (errors === _errs11) { if (Array.isArray(data5)) { if (data5.length < 1) { validate139.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data5.length; for (let i1 = 0; i1 < len1; i1++) { let data6 = data5[i1]; const _errs13 = errors; const _errs14 = errors; if (errors === _errs14) { if (data6 && typeof data6 == "object" && !Array.isArray(data6)) { let missing1; if ((data6.href === undefined) && (missing1 = "href")) { validate139.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs16 = errors; for (const key1 in data6) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate139.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs16 === errors) { if (data6.href !== undefined) { let data7 = data6.href; const _errs17 = errors; if (errors === _errs17) { if (errors === _errs17) { if (typeof data7 === "string") { if (!(formats10.test(data7))) { validate139.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate139.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid4 = _errs17 === errors; } else { var valid4 = true; } if (valid4) { if (data6.rel !== undefined) { let data8 = data6.rel; const _errs19 = errors; if (errors === _errs19) { if (typeof data8 === "string") { if (!pattern9.test(data8)) { validate139.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate139.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs19 === errors; } else { var valid4 = true; } if (valid4) { if (data6.media_type !== undefined) { let data9 = data6.media_type; const _errs21 = errors; if (errors === _errs21) { if (typeof data9 === "string") { if (!pattern3.test(data9)) { validate139.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate139.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs21 === errors; } else { var valid4 = true; } if (valid4) { if (data6.text !== undefined) { const _errs23 = errors; if (typeof data6.text !== "string") { validate139.errors = [{ instancePath: instancePath + "/links/" + i1 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid4 = _errs23 === errors; } else { var valid4 = true; } } } } } } } else { validate139.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs13 === errors; if (!valid2) { break; } } } } else { validate139.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs11 === errors; } else { var valid0 = true; } if (valid0) { if (data.incorporates_components !== undefined) { let data11 = data.incorporates_components; const _errs25 = errors; if (errors === _errs25) { if (Array.isArray(data11)) { if (data11.length < 1) { validate139.errors = [{ instancePath: instancePath + "/incorporates_components", schemaPath: "#/properties/incorporates_components/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid5 = true; const len2 = data11.length; for (let i2 = 0; i2 < len2; i2++) { let data12 = data11[i2]; const _errs27 = errors; const _errs28 = errors; if (errors === _errs28) { if (data12 && typeof data12 == "object" && !Array.isArray(data12)) { let missing2; if (((data12.component_uuid === undefined) && (missing2 = "component_uuid")) || ((data12.description === undefined) && (missing2 = "description"))) { validate139.errors = [{ instancePath: instancePath + "/incorporates_components/" + i2, schemaPath: "#/definitions/incorporates_component/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" }]; return false; } else { const _errs30 = errors; for (const key2 in data12) { if (!((key2 === "component_uuid") || (key2 === "description"))) { validate139.errors = [{ instancePath: instancePath + "/incorporates_components/" + i2, schemaPath: "#/definitions/incorporates_component/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs30 === errors) { if (data12.component_uuid !== undefined) { let data13 = data12.component_uuid; const _errs31 = errors; if (errors === _errs31) { if (typeof data13 === "string") { if (!pattern0.test(data13)) { validate139.errors = [{ instancePath: instancePath + "/incorporates_components/" + i2 + "/component_uuid", schemaPath: "#/definitions/incorporates_component/properties/component_uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate139.errors = [{ instancePath: instancePath + "/incorporates_components/" + i2 + "/component_uuid", schemaPath: "#/definitions/incorporates_component/properties/component_uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid7 = _errs31 === errors; } else { var valid7 = true; } if (valid7) { if (data12.description !== undefined) { const _errs33 = errors; if (typeof data12.description !== "string") { validate139.errors = [{ instancePath: instancePath + "/incorporates_components/" + i2 + "/description", schemaPath: "#/definitions/incorporates_component/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid7 = _errs33 === errors; } else { var valid7 = true; } } } } } else { validate139.errors = [{ instancePath: instancePath + "/incorporates_components/" + i2, schemaPath: "#/definitions/incorporates_component/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid5 = _errs27 === errors; if (!valid5) { break; } } } } else { validate139.errors = [{ instancePath: instancePath + "/incorporates_components", schemaPath: "#/properties/incorporates_components/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs25 === errors; } else { var valid0 = true; } if (valid0) { if (data.control_implementations !== undefined) { let data15 = data.control_implementations; const _errs35 = errors; if (errors === _errs35) { if (Array.isArray(data15)) { if (data15.length < 1) { validate139.errors = [{ instancePath: instancePath + "/control_implementations", schemaPath: "#/properties/control_implementations/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid8 = true; const len3 = data15.length; for (let i3 = 0; i3 < len3; i3++) { const _errs37 = errors; if (!(validate141(data15[i3], { instancePath: instancePath + "/control_implementations/" + i3, parentData: data15, parentDataProperty: i3, rootData }))) { vErrors = vErrors === null ? validate141.errors : vErrors.concat(validate141.errors); errors = vErrors.length; } var valid8 = _errs37 === errors; if (!valid8) { break; } } } } else { validate139.errors = [{ instancePath: instancePath + "/control_implementations", schemaPath: "#/properties/control_implementations/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs35 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs38 = errors; if (typeof data.remarks !== "string") { validate139.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs38 === errors; } else { var valid0 = true; } } } } } } } } } } } else { validate139.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate139.errors = vErrors; return errors === 0; } function validate98(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/component_definition" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if (((data.uuid === undefined) && (missing0 = "uuid")) || ((data.metadata === undefined) && (missing0 = "metadata"))) { validate98.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!((((((key0 === "uuid") || (key0 === "metadata")) || (key0 === "import_component_definitions")) || (key0 === "components")) || (key0 === "capabilities")) || (key0 === "back_matter"))) { validate98.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.uuid !== undefined) { let data0 = data.uuid; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern0.test(data0)) { validate98.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate98.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.metadata !== undefined) { const _errs4 = errors; if (!(validate22(data.metadata, { instancePath: instancePath + "/metadata", parentData: data, parentDataProperty: "metadata", rootData }))) { vErrors = vErrors === null ? validate22.errors : vErrors.concat(validate22.errors); errors = vErrors.length; } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.import_component_definitions !== undefined) { let data2 = data.import_component_definitions; const _errs5 = errors; if (errors === _errs5) { if (Array.isArray(data2)) { if (data2.length < 1) { validate98.errors = [{ instancePath: instancePath + "/import_component_definitions", schemaPath: "#/properties/import_component_definitions/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data2.length; for (let i0 = 0; i0 < len0; i0++) { let data3 = data2[i0]; const _errs7 = errors; const _errs8 = errors; if (errors === _errs8) { if (data3 && typeof data3 == "object" && !Array.isArray(data3)) { let missing1; if ((data3.href === undefined) && (missing1 = "href")) { validate98.errors = [{ instancePath: instancePath + "/import_component_definitions/" + i0, schemaPath: "#/definitions/import_component_definition/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs10 = errors; for (const key1 in data3) { if (!(key1 === "href")) { validate98.errors = [{ instancePath: instancePath + "/import_component_definitions/" + i0, schemaPath: "#/definitions/import_component_definition/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs10 === errors) { if (data3.href !== undefined) { let data4 = data3.href; const _errs11 = errors; if (errors === _errs11) { if (errors === _errs11) { if (typeof data4 === "string") { if (!(formats10.test(data4))) { validate98.errors = [{ instancePath: instancePath + "/import_component_definitions/" + i0 + "/href", schemaPath: "#/definitions/import_component_definition/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate98.errors = [{ instancePath: instancePath + "/import_component_definitions/" + i0 + "/href", schemaPath: "#/definitions/import_component_definition/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } } } } } else { validate98.errors = [{ instancePath: instancePath + "/import_component_definitions/" + i0, schemaPath: "#/definitions/import_component_definition/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid1 = _errs7 === errors; if (!valid1) { break; } } } } else { validate98.errors = [{ instancePath: instancePath + "/import_component_definitions", schemaPath: "#/properties/import_component_definitions/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs5 === errors; } else { var valid0 = true; } if (valid0) { if (data.components !== undefined) { let data5 = data.components; const _errs13 = errors; if (errors === _errs13) { if (Array.isArray(data5)) { if (data5.length < 1) { validate98.errors = [{ instancePath: instancePath + "/components", schemaPath: "#/properties/components/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid4 = true; const len1 = data5.length; for (let i1 = 0; i1 < len1; i1++) { const _errs15 = errors; if (!(validate100(data5[i1], { instancePath: instancePath + "/components/" + i1, parentData: data5, parentDataProperty: i1, rootData }))) { vErrors = vErrors === null ? validate100.errors : vErrors.concat(validate100.errors); errors = vErrors.length; } var valid4 = _errs15 === errors; if (!valid4) { break; } } } } else { validate98.errors = [{ instancePath: instancePath + "/components", schemaPath: "#/properties/components/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs13 === errors; } else { var valid0 = true; } if (valid0) { if (data.capabilities !== undefined) { let data7 = data.capabilities; const _errs16 = errors; if (errors === _errs16) { if (Array.isArray(data7)) { if (data7.length < 1) { validate98.errors = [{ instancePath: instancePath + "/capabilities", schemaPath: "#/properties/capabilities/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid5 = true; const len2 = data7.length; for (let i2 = 0; i2 < len2; i2++) { const _errs18 = errors; if (!(validate139(data7[i2], { instancePath: instancePath + "/capabilities/" + i2, parentData: data7, parentDataProperty: i2, rootData }))) { vErrors = vErrors === null ? validate139.errors : vErrors.concat(validate139.errors); errors = vErrors.length; } var valid5 = _errs18 === errors; if (!valid5) { break; } } } } else { validate98.errors = [{ instancePath: instancePath + "/capabilities", schemaPath: "#/properties/capabilities/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs16 === errors; } else { var valid0 = true; } if (valid0) { if (data.back_matter !== undefined) { const _errs19 = errors; if (!(validate62(data.back_matter, { instancePath: instancePath + "/back_matter", parentData: data, parentDataProperty: "back_matter", rootData }))) { vErrors = vErrors === null ? validate62.errors : vErrors.concat(validate62.errors); errors = vErrors.length; } var valid0 = _errs19 === errors; } else { var valid0 = true; } } } } } } } } } else { validate98.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate98.errors = vErrors; return errors === 0; } const schema145 = { "title": "System Security Plan (SSP)", "description": "A system security plan, such as those described in NIST SP 800_18", "$id": "#/definitions/system_security_plan", "type": "object", "properties": { "uuid": { "title": "System Security Plan Universally Unique Identifier", "description": "A globally unique identifier for this catalog instance. This UUID should be changed when this document is revised.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "metadata": { "$ref": "#/definitions/metadata" }, "import_profile": { "$ref": "#/definitions/import_profile" }, "system_characteristics": { "$ref": "#/definitions/system_characteristics" }, "system_implementation": { "$ref": "#/definitions/system_implementation" }, "control_implementation": { "$ref": "#/definitions/control_implementation" }, "back_matter": { "$ref": "#/definitions/back_matter" } }, "required": ["uuid", "metadata", "import_profile", "system_characteristics", "system_implementation", "control_implementation"], "additionalProperties": false }; const schema146 = { "title": "Import Profile", "description": "Used to import the OSCAL profile representing the system's control baseline.", "$id": "#/definitions/import_profile", "type": "object", "properties": { "href": { "title": "Profile Reference", "description": "A resolvable URL reference to the profile to use as the system's control baseline.", "type": "string", "format": "uri-reference" }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["href"], "additionalProperties": false }; function validate150(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/import_profile" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((data.href === undefined) && (missing0 = "href")) { validate150.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!((key0 === "href") || (key0 === "remarks"))) { validate150.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.href !== undefined) { let data0 = data.href; const _errs2 = errors; if (errors === _errs2) { if (errors === _errs2) { if (typeof data0 === "string") { if (!(formats10.test(data0))) { validate150.errors = [{ instancePath: instancePath + "/href", schemaPath: "#/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate150.errors = [{ instancePath: instancePath + "/href", schemaPath: "#/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs4 = errors; if (typeof data.remarks !== "string") { validate150.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs4 === errors; } else { var valid0 = true; } } } } } else { validate150.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate150.errors = vErrors; return errors === 0; } const schema148 = { "title": "System Characteristics", "description": "Contains the characteristics of the system, such as its name, purpose, and security impact level.", "$id": "#/definitions/system_characteristics", "type": "object", "properties": { "system_ids": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/system_id" } }, "system_name": { "title": "System Name _ Full", "description": "The full name of the system.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "system_name_short": { "title": "System Name _ Short", "description": "A short name for the system, such as an acronym, that is suitable for display in a data table or summary list.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "description": { "title": "System Description", "description": "A summary of the system.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "date_authorized": { "$ref": "#/definitions/date_authorized" }, "security_sensitivity_level": { "title": "Security Sensitivity Level", "description": "The overall information system sensitivity categorization, such as defined by FIPS_199.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "system_information": { "$ref": "#/definitions/system_information" }, "security_impact_level": { "$ref": "#/definitions/security_impact_level" }, "status": { "$ref": "#/definitions/status" }, "authorization_boundary": { "$ref": "#/definitions/authorization_boundary" }, "network_architecture": { "$ref": "#/definitions/network_architecture" }, "data_flow": { "$ref": "#/definitions/data_flow" }, "responsible_parties": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_party" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["system_ids", "system_name", "description", "security_sensitivity_level", "system_information", "security_impact_level", "status", "authorization_boundary"], "additionalProperties": false }; const schema149 = { "title": "System Identification", "description": "A unique identifier for the system described by this system security plan.", "$id": "#/definitions/system_id", "type": "object", "properties": { "identifier_type": { "title": "Identification System Type", "description": "Identifies the identification system from which the provided identifier was assigned.", "type": "string", "format": "uri" }, "id": { "type": "string" } }, "required": ["id"], "additionalProperties": false }; const schema151 = { "title": "System Authorization Date", "description": "The date the system received its authorization.", "$id": "#/definitions/date_authorized", "type": "string", "format": "date", "pattern": "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))(Z|[+-][0-9]{2}:[0-9]{2})?$" }; const schema167 = { "title": "Security Impact Level", "description": "The overall level of expected impact resulting from unauthorized disclosure, modification, or loss of access to information.", "$id": "#/definitions/security_impact_level", "type": "object", "properties": { "security_objective_confidentiality": { "title": "Security Objective: Confidentiality", "description": "A target_level of confidentiality for the system, based on the sensitivity of information within the system.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "security_objective_integrity": { "title": "Security Objective: Integrity", "description": "A target_level of integrity for the system, based on the sensitivity of information within the system.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "security_objective_availability": { "title": "Security Objective: Availability", "description": "A target_level of availability for the system, based on the sensitivity of information within the system.", "type": "string", "pattern": "^\\S(.*\\S)?$" } }, "required": ["security_objective_confidentiality", "security_objective_integrity", "security_objective_availability"], "additionalProperties": false }; const formats92 = { "_items": ["require(\"ajv-formats/dist/formats\").", { "str": "fullFormats" }, ""] }.date; const pattern164 = new RegExp("^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))(Z|[+-][0-9]{2}:[0-9]{2})?$", "u"); const schema152 = { "title": "System Information", "description": "Contains details about all information types that are stored, processed, or transmitted by the system, such as privacy information, and those defined in NIST SP 800_60.", "$id": "#/definitions/system_information", "type": "object", "properties": { "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "information_types": { "type": "array", "minItems": 1, "items": { "title": "Information Type", "description": "Contains details about one information type that is stored, processed, or transmitted by the system, such as privacy information, and those defined in NIST SP 800_60.", "type": "object", "properties": { "uuid": { "title": "Information Type Universally Unique Identifier", "description": "A globally unique identifier that can be used to reference this information type entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "title": { "title": "title field", "description": "A human readable name for the information type. This title should be meaningful within the context of the system.", "type": "string" }, "description": { "title": "Information Type Description", "description": "A summary of how this information type is used within the system.", "type": "string" }, "categorizations": { "type": "array", "minItems": 1, "items": { "title": "Information Type Categorization", "description": "A set of information type identifiers qualified by the given identification system used, such as NIST SP 800_60.", "type": "object", "properties": { "system": { "title": "Information Type Identification System", "description": "Specifies the information type identification system used.", "type": "string", "format": "uri" }, "information_type_ids": { "type": "array", "minItems": 1, "items": { "title": "Information Type Systematized Identifier", "description": "An identifier qualified by the given identification system used, such as NIST SP 800_60.", "type": "string", "pattern": "^\\S(.*\\S)?$" } } }, "required": ["system"], "additionalProperties": false } }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "confidentiality_impact": { "title": "Confidentiality Impact Level", "description": "The expected level of impact resulting from the unauthorized disclosure of the described information.", "type": "object", "properties": { "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "base": { "$ref": "#/definitions/base" }, "selected": { "$ref": "#/definitions/selected" }, "adjustment_justification": { "$ref": "#/definitions/adjustment_justification" } }, "required": ["base"], "additionalProperties": false }, "integrity_impact": { "title": "Integrity Impact Level", "description": "The expected level of impact resulting from the unauthorized modification of the described information.", "type": "object", "properties": { "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "base": { "$ref": "#/definitions/base" }, "selected": { "$ref": "#/definitions/selected" }, "adjustment_justification": { "$ref": "#/definitions/adjustment_justification" } }, "required": ["base"], "additionalProperties": false }, "availability_impact": { "title": "Availability Impact Level", "description": "The expected level of impact resulting from the disruption of access to or use of the described information or the information system.", "type": "object", "properties": { "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "base": { "$ref": "#/definitions/base" }, "selected": { "$ref": "#/definitions/selected" }, "adjustment_justification": { "$ref": "#/definitions/adjustment_justification" } }, "required": ["base"], "additionalProperties": false } }, "required": ["title", "description", "confidentiality_impact", "integrity_impact", "availability_impact"], "additionalProperties": false } } }, "required": ["information_types"], "additionalProperties": false }; const schema156 = { "title": "Base Level (Confidentiality, Integrity, or Availability)", "description": "The prescribed base (Confidentiality, Integrity, or Availability) security impact level.", "$id": "#/definitions/base", "type": "string", "pattern": "^\\S(.*\\S)?$" }; const schema157 = { "title": "Selected Level (Confidentiality, Integrity, or Availability)", "description": "The selected (Confidentiality, Integrity, or Availability) security impact level.", "$id": "#/definitions/selected", "type": "string", "pattern": "^\\S(.*\\S)?$" }; const schema158 = { "title": "Adjustment Justification", "description": "If the selected security level is different from the base security level, this contains the justification for the change.", "$id": "#/definitions/adjustment_justification", "type": "string" }; function validate154(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/system_information" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((data.information_types === undefined) && (missing0 = "information_types")) { validate154.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(((key0 === "props") || (key0 === "links")) || (key0 === "information_types"))) { validate154.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.props !== undefined) { let data0 = data.props; const _errs2 = errors; if (errors === _errs2) { if (Array.isArray(data0)) { if (data0.length < 1) { validate154.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data0.length; for (let i0 = 0; i0 < len0; i0++) { const _errs4 = errors; if (!(validate24(data0[i0], { instancePath: instancePath + "/props/" + i0, parentData: data0, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs4 === errors; if (!valid1) { break; } } } } else { validate154.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data2 = data.links; const _errs5 = errors; if (errors === _errs5) { if (Array.isArray(data2)) { if (data2.length < 1) { validate154.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data2.length; for (let i1 = 0; i1 < len1; i1++) { let data3 = data2[i1]; const _errs7 = errors; const _errs8 = errors; if (errors === _errs8) { if (data3 && typeof data3 == "object" && !Array.isArray(data3)) { let missing1; if ((data3.href === undefined) && (missing1 = "href")) { validate154.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs10 = errors; for (const key1 in data3) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate154.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs10 === errors) { if (data3.href !== undefined) { let data4 = data3.href; const _errs11 = errors; if (errors === _errs11) { if (errors === _errs11) { if (typeof data4 === "string") { if (!(formats10.test(data4))) { validate154.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate154.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid4 = _errs11 === errors; } else { var valid4 = true; } if (valid4) { if (data3.rel !== undefined) { let data5 = data3.rel; const _errs13 = errors; if (errors === _errs13) { if (typeof data5 === "string") { if (!pattern9.test(data5)) { validate154.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate154.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs13 === errors; } else { var valid4 = true; } if (valid4) { if (data3.media_type !== undefined) { let data6 = data3.media_type; const _errs15 = errors; if (errors === _errs15) { if (typeof data6 === "string") { if (!pattern3.test(data6)) { validate154.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate154.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs15 === errors; } else { var valid4 = true; } if (valid4) { if (data3.text !== undefined) { const _errs17 = errors; if (typeof data3.text !== "string") { validate154.errors = [{ instancePath: instancePath + "/links/" + i1 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid4 = _errs17 === errors; } else { var valid4 = true; } } } } } } } else { validate154.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs7 === errors; if (!valid2) { break; } } } } else { validate154.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs5 === errors; } else { var valid0 = true; } if (valid0) { if (data.information_types !== undefined) { let data8 = data.information_types; const _errs19 = errors; if (errors === _errs19) { if (Array.isArray(data8)) { if (data8.length < 1) { validate154.errors = [{ instancePath: instancePath + "/information_types", schemaPath: "#/properties/information_types/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid5 = true; const len2 = data8.length; for (let i2 = 0; i2 < len2; i2++) { let data9 = data8[i2]; const _errs21 = errors; if (errors === _errs21) { if (data9 && typeof data9 == "object" && !Array.isArray(data9)) { let missing2; if ((((((data9.title === undefined) && (missing2 = "title")) || ((data9.description === undefined) && (missing2 = "description"))) || ((data9.confidentiality_impact === undefined) && (missing2 = "confidentiality_impact"))) || ((data9.integrity_impact === undefined) && (missing2 = "integrity_impact"))) || ((data9.availability_impact === undefined) && (missing2 = "availability_impact"))) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2, schemaPath: "#/properties/information_types/items/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" }]; return false; } else { const _errs23 = errors; for (const key2 in data9) { if (!(func8.call(schema152.properties.information_types.items.properties, key2))) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2, schemaPath: "#/properties/information_types/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs23 === errors) { if (data9.uuid !== undefined) { let data10 = data9.uuid; const _errs24 = errors; if (errors === _errs24) { if (typeof data10 === "string") { if (!pattern0.test(data10)) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/uuid", schemaPath: "#/properties/information_types/items/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/uuid", schemaPath: "#/properties/information_types/items/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid6 = _errs24 === errors; } else { var valid6 = true; } if (valid6) { if (data9.title !== undefined) { const _errs26 = errors; if (typeof data9.title !== "string") { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/title", schemaPath: "#/properties/information_types/items/properties/title/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid6 = _errs26 === errors; } else { var valid6 = true; } if (valid6) { if (data9.description !== undefined) { const _errs28 = errors; if (typeof data9.description !== "string") { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/description", schemaPath: "#/properties/information_types/items/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid6 = _errs28 === errors; } else { var valid6 = true; } if (valid6) { if (data9.categorizations !== undefined) { let data13 = data9.categorizations; const _errs30 = errors; if (errors === _errs30) { if (Array.isArray(data13)) { if (data13.length < 1) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/categorizations", schemaPath: "#/properties/information_types/items/properties/categorizations/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid7 = true; const len3 = data13.length; for (let i3 = 0; i3 < len3; i3++) { let data14 = data13[i3]; const _errs32 = errors; if (errors === _errs32) { if (data14 && typeof data14 == "object" && !Array.isArray(data14)) { let missing3; if ((data14.system === undefined) && (missing3 = "system")) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/categorizations/" + i3, schemaPath: "#/properties/information_types/items/properties/categorizations/items/required", keyword: "required", params: { missingProperty: missing3 }, message: "must have required property '" + missing3 + "'" }]; return false; } else { const _errs34 = errors; for (const key3 in data14) { if (!((key3 === "system") || (key3 === "information_type_ids"))) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/categorizations/" + i3, schemaPath: "#/properties/information_types/items/properties/categorizations/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key3 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs34 === errors) { if (data14.system !== undefined) { let data15 = data14.system; const _errs35 = errors; if (errors === _errs35) { if (errors === _errs35) { if (typeof data15 === "string") { if (!(formats8(data15))) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/categorizations/" + i3 + "/system", schemaPath: "#/properties/information_types/items/properties/categorizations/items/properties/system/format", keyword: "format", params: { format: "uri" }, message: "must match format \"" + "uri" + "\"" }]; return false; } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/categorizations/" + i3 + "/system", schemaPath: "#/properties/information_types/items/properties/categorizations/items/properties/system/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid8 = _errs35 === errors; } else { var valid8 = true; } if (valid8) { if (data14.information_type_ids !== undefined) { let data16 = data14.information_type_ids; const _errs37 = errors; if (errors === _errs37) { if (Array.isArray(data16)) { if (data16.length < 1) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/categorizations/" + i3 + "/information_type_ids", schemaPath: "#/properties/information_types/items/properties/categorizations/items/properties/information_type_ids/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid9 = true; const len4 = data16.length; for (let i4 = 0; i4 < len4; i4++) { let data17 = data16[i4]; const _errs39 = errors; if (errors === _errs39) { if (typeof data17 === "string") { if (!pattern3.test(data17)) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/categorizations/" + i3 + "/information_type_ids/" + i4, schemaPath: "#/properties/information_types/items/properties/categorizations/items/properties/information_type_ids/items/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/categorizations/" + i3 + "/information_type_ids/" + i4, schemaPath: "#/properties/information_types/items/properties/categorizations/items/properties/information_type_ids/items/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid9 = _errs39 === errors; if (!valid9) { break; } } } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/categorizations/" + i3 + "/information_type_ids", schemaPath: "#/properties/information_types/items/properties/categorizations/items/properties/information_type_ids/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid8 = _errs37 === errors; } else { var valid8 = true; } } } } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/categorizations/" + i3, schemaPath: "#/properties/information_types/items/properties/categorizations/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid7 = _errs32 === errors; if (!valid7) { break; } } } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/categorizations", schemaPath: "#/properties/information_types/items/properties/categorizations/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid6 = _errs30 === errors; } else { var valid6 = true; } if (valid6) { if (data9.props !== undefined) { let data18 = data9.props; const _errs41 = errors; if (errors === _errs41) { if (Array.isArray(data18)) { if (data18.length < 1) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/props", schemaPath: "#/properties/information_types/items/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid10 = true; const len5 = data18.length; for (let i5 = 0; i5 < len5; i5++) { const _errs43 = errors; if (!(validate24(data18[i5], { instancePath: instancePath + "/information_types/" + i2 + "/props/" + i5, parentData: data18, parentDataProperty: i5, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid10 = _errs43 === errors; if (!valid10) { break; } } } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/props", schemaPath: "#/properties/information_types/items/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid6 = _errs41 === errors; } else { var valid6 = true; } if (valid6) { if (data9.links !== undefined) { let data20 = data9.links; const _errs44 = errors; if (errors === _errs44) { if (Array.isArray(data20)) { if (data20.length < 1) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/links", schemaPath: "#/properties/information_types/items/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid11 = true; const len6 = data20.length; for (let i6 = 0; i6 < len6; i6++) { let data21 = data20[i6]; const _errs46 = errors; const _errs47 = errors; if (errors === _errs47) { if (data21 && typeof data21 == "object" && !Array.isArray(data21)) { let missing4; if ((data21.href === undefined) && (missing4 = "href")) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/links/" + i6, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing4 }, message: "must have required property '" + missing4 + "'" }]; return false; } else { const _errs49 = errors; for (const key4 in data21) { if (!((((key4 === "href") || (key4 === "rel")) || (key4 === "media_type")) || (key4 === "text"))) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/links/" + i6, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key4 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs49 === errors) { if (data21.href !== undefined) { let data22 = data21.href; const _errs50 = errors; if (errors === _errs50) { if (errors === _errs50) { if (typeof data22 === "string") { if (!(formats10.test(data22))) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/links/" + i6 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/links/" + i6 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid13 = _errs50 === errors; } else { var valid13 = true; } if (valid13) { if (data21.rel !== undefined) { let data23 = data21.rel; const _errs52 = errors; if (errors === _errs52) { if (typeof data23 === "string") { if (!pattern9.test(data23)) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/links/" + i6 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/links/" + i6 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid13 = _errs52 === errors; } else { var valid13 = true; } if (valid13) { if (data21.media_type !== undefined) { let data24 = data21.media_type; const _errs54 = errors; if (errors === _errs54) { if (typeof data24 === "string") { if (!pattern3.test(data24)) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/links/" + i6 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/links/" + i6 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid13 = _errs54 === errors; } else { var valid13 = true; } if (valid13) { if (data21.text !== undefined) { const _errs56 = errors; if (typeof data21.text !== "string") { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/links/" + i6 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid13 = _errs56 === errors; } else { var valid13 = true; } } } } } } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/links/" + i6, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid11 = _errs46 === errors; if (!valid11) { break; } } } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/links", schemaPath: "#/properties/information_types/items/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid6 = _errs44 === errors; } else { var valid6 = true; } if (valid6) { if (data9.confidentiality_impact !== undefined) { let data26 = data9.confidentiality_impact; const _errs58 = errors; if (errors === _errs58) { if (data26 && typeof data26 == "object" && !Array.isArray(data26)) { let missing5; if ((data26.base === undefined) && (missing5 = "base")) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/confidentiality_impact", schemaPath: "#/properties/information_types/items/properties/confidentiality_impact/required", keyword: "required", params: { missingProperty: missing5 }, message: "must have required property '" + missing5 + "'" }]; return false; } else { const _errs60 = errors; for (const key5 in data26) { if (!(((((key5 === "props") || (key5 === "links")) || (key5 === "base")) || (key5 === "selected")) || (key5 === "adjustment_justification"))) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/confidentiality_impact", schemaPath: "#/properties/information_types/items/properties/confidentiality_impact/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key5 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs60 === errors) { if (data26.props !== undefined) { let data27 = data26.props; const _errs61 = errors; if (errors === _errs61) { if (Array.isArray(data27)) { if (data27.length < 1) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/confidentiality_impact/props", schemaPath: "#/properties/information_types/items/properties/confidentiality_impact/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid15 = true; const len7 = data27.length; for (let i7 = 0; i7 < len7; i7++) { const _errs63 = errors; if (!(validate24(data27[i7], { instancePath: instancePath + "/information_types/" + i2 + "/confidentiality_impact/props/" + i7, parentData: data27, parentDataProperty: i7, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid15 = _errs63 === errors; if (!valid15) { break; } } } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/confidentiality_impact/props", schemaPath: "#/properties/information_types/items/properties/confidentiality_impact/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid14 = _errs61 === errors; } else { var valid14 = true; } if (valid14) { if (data26.links !== undefined) { let data29 = data26.links; const _errs64 = errors; if (errors === _errs64) { if (Array.isArray(data29)) { if (data29.length < 1) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/confidentiality_impact/links", schemaPath: "#/properties/information_types/items/properties/confidentiality_impact/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid16 = true; const len8 = data29.length; for (let i8 = 0; i8 < len8; i8++) { let data30 = data29[i8]; const _errs66 = errors; const _errs67 = errors; if (errors === _errs67) { if (data30 && typeof data30 == "object" && !Array.isArray(data30)) { let missing6; if ((data30.href === undefined) && (missing6 = "href")) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/confidentiality_impact/links/" + i8, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing6 }, message: "must have required property '" + missing6 + "'" }]; return false; } else { const _errs69 = errors; for (const key6 in data30) { if (!((((key6 === "href") || (key6 === "rel")) || (key6 === "media_type")) || (key6 === "text"))) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/confidentiality_impact/links/" + i8, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key6 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs69 === errors) { if (data30.href !== undefined) { let data31 = data30.href; const _errs70 = errors; if (errors === _errs70) { if (errors === _errs70) { if (typeof data31 === "string") { if (!(formats10.test(data31))) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/confidentiality_impact/links/" + i8 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/confidentiality_impact/links/" + i8 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid18 = _errs70 === errors; } else { var valid18 = true; } if (valid18) { if (data30.rel !== undefined) { let data32 = data30.rel; const _errs72 = errors; if (errors === _errs72) { if (typeof data32 === "string") { if (!pattern9.test(data32)) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/confidentiality_impact/links/" + i8 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/confidentiality_impact/links/" + i8 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid18 = _errs72 === errors; } else { var valid18 = true; } if (valid18) { if (data30.media_type !== undefined) { let data33 = data30.media_type; const _errs74 = errors; if (errors === _errs74) { if (typeof data33 === "string") { if (!pattern3.test(data33)) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/confidentiality_impact/links/" + i8 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/confidentiality_impact/links/" + i8 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid18 = _errs74 === errors; } else { var valid18 = true; } if (valid18) { if (data30.text !== undefined) { const _errs76 = errors; if (typeof data30.text !== "string") { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/confidentiality_impact/links/" + i8 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid18 = _errs76 === errors; } else { var valid18 = true; } } } } } } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/confidentiality_impact/links/" + i8, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid16 = _errs66 === errors; if (!valid16) { break; } } } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/confidentiality_impact/links", schemaPath: "#/properties/information_types/items/properties/confidentiality_impact/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid14 = _errs64 === errors; } else { var valid14 = true; } if (valid14) { if (data26.base !== undefined) { let data35 = data26.base; const _errs78 = errors; const _errs79 = errors; if (errors === _errs79) { if (typeof data35 === "string") { if (!pattern3.test(data35)) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/confidentiality_impact/base", schemaPath: "#/definitions/base/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/confidentiality_impact/base", schemaPath: "#/definitions/base/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid14 = _errs78 === errors; } else { var valid14 = true; } if (valid14) { if (data26.selected !== undefined) { let data36 = data26.selected; const _errs81 = errors; const _errs82 = errors; if (errors === _errs82) { if (typeof data36 === "string") { if (!pattern3.test(data36)) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/confidentiality_impact/selected", schemaPath: "#/definitions/selected/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/confidentiality_impact/selected", schemaPath: "#/definitions/selected/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid14 = _errs81 === errors; } else { var valid14 = true; } if (valid14) { if (data26.adjustment_justification !== undefined) { const _errs84 = errors; if (typeof data26.adjustment_justification !== "string") { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/confidentiality_impact/adjustment_justification", schemaPath: "#/definitions/adjustment_justification/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid14 = _errs84 === errors; } else { var valid14 = true; } } } } } } } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/confidentiality_impact", schemaPath: "#/properties/information_types/items/properties/confidentiality_impact/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid6 = _errs58 === errors; } else { var valid6 = true; } if (valid6) { if (data9.integrity_impact !== undefined) { let data38 = data9.integrity_impact; const _errs87 = errors; if (errors === _errs87) { if (data38 && typeof data38 == "object" && !Array.isArray(data38)) { let missing7; if ((data38.base === undefined) && (missing7 = "base")) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/integrity_impact", schemaPath: "#/properties/information_types/items/properties/integrity_impact/required", keyword: "required", params: { missingProperty: missing7 }, message: "must have required property '" + missing7 + "'" }]; return false; } else { const _errs89 = errors; for (const key7 in data38) { if (!(((((key7 === "props") || (key7 === "links")) || (key7 === "base")) || (key7 === "selected")) || (key7 === "adjustment_justification"))) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/integrity_impact", schemaPath: "#/properties/information_types/items/properties/integrity_impact/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key7 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs89 === errors) { if (data38.props !== undefined) { let data39 = data38.props; const _errs90 = errors; if (errors === _errs90) { if (Array.isArray(data39)) { if (data39.length < 1) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/integrity_impact/props", schemaPath: "#/properties/information_types/items/properties/integrity_impact/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid23 = true; const len9 = data39.length; for (let i9 = 0; i9 < len9; i9++) { const _errs92 = errors; if (!(validate24(data39[i9], { instancePath: instancePath + "/information_types/" + i2 + "/integrity_impact/props/" + i9, parentData: data39, parentDataProperty: i9, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid23 = _errs92 === errors; if (!valid23) { break; } } } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/integrity_impact/props", schemaPath: "#/properties/information_types/items/properties/integrity_impact/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid22 = _errs90 === errors; } else { var valid22 = true; } if (valid22) { if (data38.links !== undefined) { let data41 = data38.links; const _errs93 = errors; if (errors === _errs93) { if (Array.isArray(data41)) { if (data41.length < 1) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/integrity_impact/links", schemaPath: "#/properties/information_types/items/properties/integrity_impact/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid24 = true; const len10 = data41.length; for (let i10 = 0; i10 < len10; i10++) { let data42 = data41[i10]; const _errs95 = errors; const _errs96 = errors; if (errors === _errs96) { if (data42 && typeof data42 == "object" && !Array.isArray(data42)) { let missing8; if ((data42.href === undefined) && (missing8 = "href")) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/integrity_impact/links/" + i10, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing8 }, message: "must have required property '" + missing8 + "'" }]; return false; } else { const _errs98 = errors; for (const key8 in data42) { if (!((((key8 === "href") || (key8 === "rel")) || (key8 === "media_type")) || (key8 === "text"))) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/integrity_impact/links/" + i10, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key8 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs98 === errors) { if (data42.href !== undefined) { let data43 = data42.href; const _errs99 = errors; if (errors === _errs99) { if (errors === _errs99) { if (typeof data43 === "string") { if (!(formats10.test(data43))) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/integrity_impact/links/" + i10 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/integrity_impact/links/" + i10 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid26 = _errs99 === errors; } else { var valid26 = true; } if (valid26) { if (data42.rel !== undefined) { let data44 = data42.rel; const _errs101 = errors; if (errors === _errs101) { if (typeof data44 === "string") { if (!pattern9.test(data44)) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/integrity_impact/links/" + i10 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/integrity_impact/links/" + i10 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid26 = _errs101 === errors; } else { var valid26 = true; } if (valid26) { if (data42.media_type !== undefined) { let data45 = data42.media_type; const _errs103 = errors; if (errors === _errs103) { if (typeof data45 === "string") { if (!pattern3.test(data45)) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/integrity_impact/links/" + i10 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/integrity_impact/links/" + i10 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid26 = _errs103 === errors; } else { var valid26 = true; } if (valid26) { if (data42.text !== undefined) { const _errs105 = errors; if (typeof data42.text !== "string") { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/integrity_impact/links/" + i10 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid26 = _errs105 === errors; } else { var valid26 = true; } } } } } } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/integrity_impact/links/" + i10, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid24 = _errs95 === errors; if (!valid24) { break; } } } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/integrity_impact/links", schemaPath: "#/properties/information_types/items/properties/integrity_impact/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid22 = _errs93 === errors; } else { var valid22 = true; } if (valid22) { if (data38.base !== undefined) { let data47 = data38.base; const _errs107 = errors; const _errs108 = errors; if (errors === _errs108) { if (typeof data47 === "string") { if (!pattern3.test(data47)) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/integrity_impact/base", schemaPath: "#/definitions/base/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/integrity_impact/base", schemaPath: "#/definitions/base/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid22 = _errs107 === errors; } else { var valid22 = true; } if (valid22) { if (data38.selected !== undefined) { let data48 = data38.selected; const _errs110 = errors; const _errs111 = errors; if (errors === _errs111) { if (typeof data48 === "string") { if (!pattern3.test(data48)) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/integrity_impact/selected", schemaPath: "#/definitions/selected/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/integrity_impact/selected", schemaPath: "#/definitions/selected/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid22 = _errs110 === errors; } else { var valid22 = true; } if (valid22) { if (data38.adjustment_justification !== undefined) { const _errs113 = errors; if (typeof data38.adjustment_justification !== "string") { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/integrity_impact/adjustment_justification", schemaPath: "#/definitions/adjustment_justification/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid22 = _errs113 === errors; } else { var valid22 = true; } } } } } } } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/integrity_impact", schemaPath: "#/properties/information_types/items/properties/integrity_impact/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid6 = _errs87 === errors; } else { var valid6 = true; } if (valid6) { if (data9.availability_impact !== undefined) { let data50 = data9.availability_impact; const _errs116 = errors; if (errors === _errs116) { if (data50 && typeof data50 == "object" && !Array.isArray(data50)) { let missing9; if ((data50.base === undefined) && (missing9 = "base")) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/availability_impact", schemaPath: "#/properties/information_types/items/properties/availability_impact/required", keyword: "required", params: { missingProperty: missing9 }, message: "must have required property '" + missing9 + "'" }]; return false; } else { const _errs118 = errors; for (const key9 in data50) { if (!(((((key9 === "props") || (key9 === "links")) || (key9 === "base")) || (key9 === "selected")) || (key9 === "adjustment_justification"))) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/availability_impact", schemaPath: "#/properties/information_types/items/properties/availability_impact/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key9 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs118 === errors) { if (data50.props !== undefined) { let data51 = data50.props; const _errs119 = errors; if (errors === _errs119) { if (Array.isArray(data51)) { if (data51.length < 1) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/availability_impact/props", schemaPath: "#/properties/information_types/items/properties/availability_impact/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid31 = true; const len11 = data51.length; for (let i11 = 0; i11 < len11; i11++) { const _errs121 = errors; if (!(validate24(data51[i11], { instancePath: instancePath + "/information_types/" + i2 + "/availability_impact/props/" + i11, parentData: data51, parentDataProperty: i11, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid31 = _errs121 === errors; if (!valid31) { break; } } } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/availability_impact/props", schemaPath: "#/properties/information_types/items/properties/availability_impact/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid30 = _errs119 === errors; } else { var valid30 = true; } if (valid30) { if (data50.links !== undefined) { let data53 = data50.links; const _errs122 = errors; if (errors === _errs122) { if (Array.isArray(data53)) { if (data53.length < 1) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/availability_impact/links", schemaPath: "#/properties/information_types/items/properties/availability_impact/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid32 = true; const len12 = data53.length; for (let i12 = 0; i12 < len12; i12++) { let data54 = data53[i12]; const _errs124 = errors; const _errs125 = errors; if (errors === _errs125) { if (data54 && typeof data54 == "object" && !Array.isArray(data54)) { let missing10; if ((data54.href === undefined) && (missing10 = "href")) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/availability_impact/links/" + i12, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing10 }, message: "must have required property '" + missing10 + "'" }]; return false; } else { const _errs127 = errors; for (const key10 in data54) { if (!((((key10 === "href") || (key10 === "rel")) || (key10 === "media_type")) || (key10 === "text"))) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/availability_impact/links/" + i12, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key10 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs127 === errors) { if (data54.href !== undefined) { let data55 = data54.href; const _errs128 = errors; if (errors === _errs128) { if (errors === _errs128) { if (typeof data55 === "string") { if (!(formats10.test(data55))) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/availability_impact/links/" + i12 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/availability_impact/links/" + i12 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid34 = _errs128 === errors; } else { var valid34 = true; } if (valid34) { if (data54.rel !== undefined) { let data56 = data54.rel; const _errs130 = errors; if (errors === _errs130) { if (typeof data56 === "string") { if (!pattern9.test(data56)) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/availability_impact/links/" + i12 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/availability_impact/links/" + i12 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid34 = _errs130 === errors; } else { var valid34 = true; } if (valid34) { if (data54.media_type !== undefined) { let data57 = data54.media_type; const _errs132 = errors; if (errors === _errs132) { if (typeof data57 === "string") { if (!pattern3.test(data57)) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/availability_impact/links/" + i12 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/availability_impact/links/" + i12 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid34 = _errs132 === errors; } else { var valid34 = true; } if (valid34) { if (data54.text !== undefined) { const _errs134 = errors; if (typeof data54.text !== "string") { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/availability_impact/links/" + i12 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid34 = _errs134 === errors; } else { var valid34 = true; } } } } } } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/availability_impact/links/" + i12, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid32 = _errs124 === errors; if (!valid32) { break; } } } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/availability_impact/links", schemaPath: "#/properties/information_types/items/properties/availability_impact/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid30 = _errs122 === errors; } else { var valid30 = true; } if (valid30) { if (data50.base !== undefined) { let data59 = data50.base; const _errs136 = errors; const _errs137 = errors; if (errors === _errs137) { if (typeof data59 === "string") { if (!pattern3.test(data59)) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/availability_impact/base", schemaPath: "#/definitions/base/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/availability_impact/base", schemaPath: "#/definitions/base/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid30 = _errs136 === errors; } else { var valid30 = true; } if (valid30) { if (data50.selected !== undefined) { let data60 = data50.selected; const _errs139 = errors; const _errs140 = errors; if (errors === _errs140) { if (typeof data60 === "string") { if (!pattern3.test(data60)) { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/availability_impact/selected", schemaPath: "#/definitions/selected/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/availability_impact/selected", schemaPath: "#/definitions/selected/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid30 = _errs139 === errors; } else { var valid30 = true; } if (valid30) { if (data50.adjustment_justification !== undefined) { const _errs142 = errors; if (typeof data50.adjustment_justification !== "string") { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/availability_impact/adjustment_justification", schemaPath: "#/definitions/adjustment_justification/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid30 = _errs142 === errors; } else { var valid30 = true; } } } } } } } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2 + "/availability_impact", schemaPath: "#/properties/information_types/items/properties/availability_impact/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid6 = _errs116 === errors; } else { var valid6 = true; } } } } } } } } } } } } else { validate154.errors = [{ instancePath: instancePath + "/information_types/" + i2, schemaPath: "#/properties/information_types/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid5 = _errs21 === errors; if (!valid5) { break; } } } } else { validate154.errors = [{ instancePath: instancePath + "/information_types", schemaPath: "#/properties/information_types/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs19 === errors; } else { var valid0 = true; } } } } } } else { validate154.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate154.errors = vErrors; return errors === 0; } const schema168 = { "title": "Status", "description": "Describes the operational status of the system.", "$id": "#/definitions/status", "type": "object", "properties": { "state": { "title": "State", "description": "The current operating status.", "type": "string", "pattern": "^\\S(.*\\S)?$", "enum": ["operational", "under_development", "under_major_modification", "disposition", "other"] }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["state"], "additionalProperties": false }; function validate161(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/status" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((data.state === undefined) && (missing0 = "state")) { validate161.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!((key0 === "state") || (key0 === "remarks"))) { validate161.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.state !== undefined) { let data0 = data.state; const _errs2 = errors; if (!(((((data0 === "operational") || (data0 === "under_development")) || (data0 === "under_major_modification")) || (data0 === "disposition")) || (data0 === "other"))) { validate161.errors = [{ instancePath: instancePath + "/state", schemaPath: "#/properties/state/enum", keyword: "enum", params: { allowedValues: schema168.properties.state.enum }, message: "must be equal to one of the allowed values" }]; return false; } if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern3.test(data0)) { validate161.errors = [{ instancePath: instancePath + "/state", schemaPath: "#/properties/state/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate161.errors = [{ instancePath: instancePath + "/state", schemaPath: "#/properties/state/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs4 = errors; if (typeof data.remarks !== "string") { validate161.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs4 === errors; } else { var valid0 = true; } } } } } else { validate161.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate161.errors = vErrors; return errors === 0; } const schema170 = { "title": "Authorization Boundary", "description": "A description of this system's authorization boundary, optionally supplemented by diagrams that illustrate the authorization boundary.", "$id": "#/definitions/authorization_boundary", "type": "object", "properties": { "description": { "title": "Authorization Boundary Description", "description": "A summary of the system's authorization boundary.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "diagrams": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/diagram" } }, "remarks": { "title": "remarks field", "description": "Commentary about the system's authorization boundary that enhances the diagram.", "type": "string" } }, "required": ["description"], "additionalProperties": false }; const schema172 = { "title": "Diagram", "description": "A graphic that provides a visual representation the system, or some aspect of it.", "$id": "#/definitions/diagram", "type": "object", "properties": { "uuid": { "title": "Diagram ID", "description": "The identifier for this diagram.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "description": { "title": "Diagram Description", "description": "A summary of the diagram.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "caption": { "title": "Caption", "description": "A brief caption to annotate the diagram.", "type": "string" }, "remarks": { "title": "remarks field", "description": "Commentary about the diagram that enhances it.", "type": "string" } }, "required": ["uuid"], "additionalProperties": false }; function validate165(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/diagram" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((data.uuid === undefined) && (missing0 = "uuid")) { validate165.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!((((((key0 === "uuid") || (key0 === "description")) || (key0 === "props")) || (key0 === "links")) || (key0 === "caption")) || (key0 === "remarks"))) { validate165.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.uuid !== undefined) { let data0 = data.uuid; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern0.test(data0)) { validate165.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate165.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.description !== undefined) { const _errs4 = errors; if (typeof data.description !== "string") { validate165.errors = [{ instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data2 = data.props; const _errs6 = errors; if (errors === _errs6) { if (Array.isArray(data2)) { if (data2.length < 1) { validate165.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data2.length; for (let i0 = 0; i0 < len0; i0++) { const _errs8 = errors; if (!(validate24(data2[i0], { instancePath: instancePath + "/props/" + i0, parentData: data2, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs8 === errors; if (!valid1) { break; } } } } else { validate165.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data4 = data.links; const _errs9 = errors; if (errors === _errs9) { if (Array.isArray(data4)) { if (data4.length < 1) { validate165.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data4.length; for (let i1 = 0; i1 < len1; i1++) { let data5 = data4[i1]; const _errs11 = errors; const _errs12 = errors; if (errors === _errs12) { if (data5 && typeof data5 == "object" && !Array.isArray(data5)) { let missing1; if ((data5.href === undefined) && (missing1 = "href")) { validate165.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs14 = errors; for (const key1 in data5) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate165.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs14 === errors) { if (data5.href !== undefined) { let data6 = data5.href; const _errs15 = errors; if (errors === _errs15) { if (errors === _errs15) { if (typeof data6 === "string") { if (!(formats10.test(data6))) { validate165.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate165.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid4 = _errs15 === errors; } else { var valid4 = true; } if (valid4) { if (data5.rel !== undefined) { let data7 = data5.rel; const _errs17 = errors; if (errors === _errs17) { if (typeof data7 === "string") { if (!pattern9.test(data7)) { validate165.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate165.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs17 === errors; } else { var valid4 = true; } if (valid4) { if (data5.media_type !== undefined) { let data8 = data5.media_type; const _errs19 = errors; if (errors === _errs19) { if (typeof data8 === "string") { if (!pattern3.test(data8)) { validate165.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate165.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs19 === errors; } else { var valid4 = true; } if (valid4) { if (data5.text !== undefined) { const _errs21 = errors; if (typeof data5.text !== "string") { validate165.errors = [{ instancePath: instancePath + "/links/" + i1 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid4 = _errs21 === errors; } else { var valid4 = true; } } } } } } } else { validate165.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs11 === errors; if (!valid2) { break; } } } } else { validate165.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs9 === errors; } else { var valid0 = true; } if (valid0) { if (data.caption !== undefined) { const _errs23 = errors; if (typeof data.caption !== "string") { validate165.errors = [{ instancePath: instancePath + "/caption", schemaPath: "#/properties/caption/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs23 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs25 = errors; if (typeof data.remarks !== "string") { validate165.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/properties/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs25 === errors; } else { var valid0 = true; } } } } } } } } } else { validate165.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate165.errors = vErrors; return errors === 0; } function validate163(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/authorization_boundary" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((data.description === undefined) && (missing0 = "description")) { validate163.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(((((key0 === "description") || (key0 === "props")) || (key0 === "links")) || (key0 === "diagrams")) || (key0 === "remarks"))) { validate163.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.description !== undefined) { const _errs2 = errors; if (typeof data.description !== "string") { validate163.errors = [{ instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data1 = data.props; const _errs4 = errors; if (errors === _errs4) { if (Array.isArray(data1)) { if (data1.length < 1) { validate163.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data1.length; for (let i0 = 0; i0 < len0; i0++) { const _errs6 = errors; if (!(validate24(data1[i0], { instancePath: instancePath + "/props/" + i0, parentData: data1, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs6 === errors; if (!valid1) { break; } } } } else { validate163.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data3 = data.links; const _errs7 = errors; if (errors === _errs7) { if (Array.isArray(data3)) { if (data3.length < 1) { validate163.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data3.length; for (let i1 = 0; i1 < len1; i1++) { let data4 = data3[i1]; const _errs9 = errors; const _errs10 = errors; if (errors === _errs10) { if (data4 && typeof data4 == "object" && !Array.isArray(data4)) { let missing1; if ((data4.href === undefined) && (missing1 = "href")) { validate163.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs12 = errors; for (const key1 in data4) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate163.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs12 === errors) { if (data4.href !== undefined) { let data5 = data4.href; const _errs13 = errors; if (errors === _errs13) { if (errors === _errs13) { if (typeof data5 === "string") { if (!(formats10.test(data5))) { validate163.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate163.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid4 = _errs13 === errors; } else { var valid4 = true; } if (valid4) { if (data4.rel !== undefined) { let data6 = data4.rel; const _errs15 = errors; if (errors === _errs15) { if (typeof data6 === "string") { if (!pattern9.test(data6)) { validate163.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate163.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs15 === errors; } else { var valid4 = true; } if (valid4) { if (data4.media_type !== undefined) { let data7 = data4.media_type; const _errs17 = errors; if (errors === _errs17) { if (typeof data7 === "string") { if (!pattern3.test(data7)) { validate163.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate163.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs17 === errors; } else { var valid4 = true; } if (valid4) { if (data4.text !== undefined) { const _errs19 = errors; if (typeof data4.text !== "string") { validate163.errors = [{ instancePath: instancePath + "/links/" + i1 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid4 = _errs19 === errors; } else { var valid4 = true; } } } } } } } else { validate163.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs9 === errors; if (!valid2) { break; } } } } else { validate163.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs7 === errors; } else { var valid0 = true; } if (valid0) { if (data.diagrams !== undefined) { let data9 = data.diagrams; const _errs21 = errors; if (errors === _errs21) { if (Array.isArray(data9)) { if (data9.length < 1) { validate163.errors = [{ instancePath: instancePath + "/diagrams", schemaPath: "#/properties/diagrams/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid5 = true; const len2 = data9.length; for (let i2 = 0; i2 < len2; i2++) { const _errs23 = errors; if (!(validate165(data9[i2], { instancePath: instancePath + "/diagrams/" + i2, parentData: data9, parentDataProperty: i2, rootData }))) { vErrors = vErrors === null ? validate165.errors : vErrors.concat(validate165.errors); errors = vErrors.length; } var valid5 = _errs23 === errors; if (!valid5) { break; } } } } else { validate163.errors = [{ instancePath: instancePath + "/diagrams", schemaPath: "#/properties/diagrams/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs21 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs24 = errors; if (typeof data.remarks !== "string") { validate163.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/properties/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs24 === errors; } else { var valid0 = true; } } } } } } } } else { validate163.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate163.errors = vErrors; return errors === 0; } const schema174 = { "title": "Network Architecture", "description": "A description of the system's network architecture, optionally supplemented by diagrams that illustrate the network architecture.", "$id": "#/definitions/network_architecture", "type": "object", "properties": { "description": { "title": "Network Architecture Description", "description": "A summary of the system's network architecture.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "diagrams": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/diagram" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["description"], "additionalProperties": false }; function validate169(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/network_architecture" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((data.description === undefined) && (missing0 = "description")) { validate169.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(((((key0 === "description") || (key0 === "props")) || (key0 === "links")) || (key0 === "diagrams")) || (key0 === "remarks"))) { validate169.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.description !== undefined) { const _errs2 = errors; if (typeof data.description !== "string") { validate169.errors = [{ instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data1 = data.props; const _errs4 = errors; if (errors === _errs4) { if (Array.isArray(data1)) { if (data1.length < 1) { validate169.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data1.length; for (let i0 = 0; i0 < len0; i0++) { const _errs6 = errors; if (!(validate24(data1[i0], { instancePath: instancePath + "/props/" + i0, parentData: data1, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs6 === errors; if (!valid1) { break; } } } } else { validate169.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data3 = data.links; const _errs7 = errors; if (errors === _errs7) { if (Array.isArray(data3)) { if (data3.length < 1) { validate169.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data3.length; for (let i1 = 0; i1 < len1; i1++) { let data4 = data3[i1]; const _errs9 = errors; const _errs10 = errors; if (errors === _errs10) { if (data4 && typeof data4 == "object" && !Array.isArray(data4)) { let missing1; if ((data4.href === undefined) && (missing1 = "href")) { validate169.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs12 = errors; for (const key1 in data4) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate169.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs12 === errors) { if (data4.href !== undefined) { let data5 = data4.href; const _errs13 = errors; if (errors === _errs13) { if (errors === _errs13) { if (typeof data5 === "string") { if (!(formats10.test(data5))) { validate169.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate169.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid4 = _errs13 === errors; } else { var valid4 = true; } if (valid4) { if (data4.rel !== undefined) { let data6 = data4.rel; const _errs15 = errors; if (errors === _errs15) { if (typeof data6 === "string") { if (!pattern9.test(data6)) { validate169.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate169.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs15 === errors; } else { var valid4 = true; } if (valid4) { if (data4.media_type !== undefined) { let data7 = data4.media_type; const _errs17 = errors; if (errors === _errs17) { if (typeof data7 === "string") { if (!pattern3.test(data7)) { validate169.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate169.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs17 === errors; } else { var valid4 = true; } if (valid4) { if (data4.text !== undefined) { const _errs19 = errors; if (typeof data4.text !== "string") { validate169.errors = [{ instancePath: instancePath + "/links/" + i1 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid4 = _errs19 === errors; } else { var valid4 = true; } } } } } } } else { validate169.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs9 === errors; if (!valid2) { break; } } } } else { validate169.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs7 === errors; } else { var valid0 = true; } if (valid0) { if (data.diagrams !== undefined) { let data9 = data.diagrams; const _errs21 = errors; if (errors === _errs21) { if (Array.isArray(data9)) { if (data9.length < 1) { validate169.errors = [{ instancePath: instancePath + "/diagrams", schemaPath: "#/properties/diagrams/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid5 = true; const len2 = data9.length; for (let i2 = 0; i2 < len2; i2++) { const _errs23 = errors; if (!(validate165(data9[i2], { instancePath: instancePath + "/diagrams/" + i2, parentData: data9, parentDataProperty: i2, rootData }))) { vErrors = vErrors === null ? validate165.errors : vErrors.concat(validate165.errors); errors = vErrors.length; } var valid5 = _errs23 === errors; if (!valid5) { break; } } } } else { validate169.errors = [{ instancePath: instancePath + "/diagrams", schemaPath: "#/properties/diagrams/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs21 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs24 = errors; if (typeof data.remarks !== "string") { validate169.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs24 === errors; } else { var valid0 = true; } } } } } } } } else { validate169.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate169.errors = vErrors; return errors === 0; } const schema177 = { "title": "Data Flow", "description": "A description of the logical flow of information within the system and across its boundaries, optionally supplemented by diagrams that illustrate these flows.", "$id": "#/definitions/data_flow", "type": "object", "properties": { "description": { "title": "Data Flow Description", "description": "A summary of the system's data flow.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "diagrams": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/diagram" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["description"], "additionalProperties": false }; function validate173(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/data_flow" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((data.description === undefined) && (missing0 = "description")) { validate173.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(((((key0 === "description") || (key0 === "props")) || (key0 === "links")) || (key0 === "diagrams")) || (key0 === "remarks"))) { validate173.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.description !== undefined) { const _errs2 = errors; if (typeof data.description !== "string") { validate173.errors = [{ instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data1 = data.props; const _errs4 = errors; if (errors === _errs4) { if (Array.isArray(data1)) { if (data1.length < 1) { validate173.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data1.length; for (let i0 = 0; i0 < len0; i0++) { const _errs6 = errors; if (!(validate24(data1[i0], { instancePath: instancePath + "/props/" + i0, parentData: data1, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs6 === errors; if (!valid1) { break; } } } } else { validate173.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data3 = data.links; const _errs7 = errors; if (errors === _errs7) { if (Array.isArray(data3)) { if (data3.length < 1) { validate173.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data3.length; for (let i1 = 0; i1 < len1; i1++) { let data4 = data3[i1]; const _errs9 = errors; const _errs10 = errors; if (errors === _errs10) { if (data4 && typeof data4 == "object" && !Array.isArray(data4)) { let missing1; if ((data4.href === undefined) && (missing1 = "href")) { validate173.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs12 = errors; for (const key1 in data4) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate173.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs12 === errors) { if (data4.href !== undefined) { let data5 = data4.href; const _errs13 = errors; if (errors === _errs13) { if (errors === _errs13) { if (typeof data5 === "string") { if (!(formats10.test(data5))) { validate173.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate173.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid4 = _errs13 === errors; } else { var valid4 = true; } if (valid4) { if (data4.rel !== undefined) { let data6 = data4.rel; const _errs15 = errors; if (errors === _errs15) { if (typeof data6 === "string") { if (!pattern9.test(data6)) { validate173.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate173.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs15 === errors; } else { var valid4 = true; } if (valid4) { if (data4.media_type !== undefined) { let data7 = data4.media_type; const _errs17 = errors; if (errors === _errs17) { if (typeof data7 === "string") { if (!pattern3.test(data7)) { validate173.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate173.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs17 === errors; } else { var valid4 = true; } if (valid4) { if (data4.text !== undefined) { const _errs19 = errors; if (typeof data4.text !== "string") { validate173.errors = [{ instancePath: instancePath + "/links/" + i1 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid4 = _errs19 === errors; } else { var valid4 = true; } } } } } } } else { validate173.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs9 === errors; if (!valid2) { break; } } } } else { validate173.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs7 === errors; } else { var valid0 = true; } if (valid0) { if (data.diagrams !== undefined) { let data9 = data.diagrams; const _errs21 = errors; if (errors === _errs21) { if (Array.isArray(data9)) { if (data9.length < 1) { validate173.errors = [{ instancePath: instancePath + "/diagrams", schemaPath: "#/properties/diagrams/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid5 = true; const len2 = data9.length; for (let i2 = 0; i2 < len2; i2++) { const _errs23 = errors; if (!(validate165(data9[i2], { instancePath: instancePath + "/diagrams/" + i2, parentData: data9, parentDataProperty: i2, rootData }))) { vErrors = vErrors === null ? validate165.errors : vErrors.concat(validate165.errors); errors = vErrors.length; } var valid5 = _errs23 === errors; if (!valid5) { break; } } } } else { validate173.errors = [{ instancePath: instancePath + "/diagrams", schemaPath: "#/properties/diagrams/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs21 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs24 = errors; if (typeof data.remarks !== "string") { validate173.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs24 === errors; } else { var valid0 = true; } } } } } } } } else { validate173.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate173.errors = vErrors; return errors === 0; } function validate152(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/system_characteristics" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if (((((((((data.system_ids === undefined) && (missing0 = "system_ids")) || ((data.system_name === undefined) && (missing0 = "system_name"))) || ((data.description === undefined) && (missing0 = "description"))) || ((data.security_sensitivity_level === undefined) && (missing0 = "security_sensitivity_level"))) || ((data.system_information === undefined) && (missing0 = "system_information"))) || ((data.security_impact_level === undefined) && (missing0 = "security_impact_level"))) || ((data.status === undefined) && (missing0 = "status"))) || ((data.authorization_boundary === undefined) && (missing0 = "authorization_boundary"))) { validate152.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(func8.call(schema148.properties, key0))) { validate152.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.system_ids !== undefined) { let data0 = data.system_ids; const _errs2 = errors; if (errors === _errs2) { if (Array.isArray(data0)) { if (data0.length < 1) { validate152.errors = [{ instancePath: instancePath + "/system_ids", schemaPath: "#/properties/system_ids/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data0.length; for (let i0 = 0; i0 < len0; i0++) { let data1 = data0[i0]; const _errs4 = errors; const _errs5 = errors; if (errors === _errs5) { if (data1 && typeof data1 == "object" && !Array.isArray(data1)) { let missing1; if ((data1.id === undefined) && (missing1 = "id")) { validate152.errors = [{ instancePath: instancePath + "/system_ids/" + i0, schemaPath: "#/definitions/system_id/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs7 = errors; for (const key1 in data1) { if (!((key1 === "identifier_type") || (key1 === "id"))) { validate152.errors = [{ instancePath: instancePath + "/system_ids/" + i0, schemaPath: "#/definitions/system_id/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs7 === errors) { if (data1.identifier_type !== undefined) { let data2 = data1.identifier_type; const _errs8 = errors; if (errors === _errs8) { if (errors === _errs8) { if (typeof data2 === "string") { if (!(formats8(data2))) { validate152.errors = [{ instancePath: instancePath + "/system_ids/" + i0 + "/identifier_type", schemaPath: "#/definitions/system_id/properties/identifier_type/format", keyword: "format", params: { format: "uri" }, message: "must match format \"" + "uri" + "\"" }]; return false; } } else { validate152.errors = [{ instancePath: instancePath + "/system_ids/" + i0 + "/identifier_type", schemaPath: "#/definitions/system_id/properties/identifier_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid3 = _errs8 === errors; } else { var valid3 = true; } if (valid3) { if (data1.id !== undefined) { const _errs10 = errors; if (typeof data1.id !== "string") { validate152.errors = [{ instancePath: instancePath + "/system_ids/" + i0 + "/id", schemaPath: "#/definitions/system_id/properties/id/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid3 = _errs10 === errors; } else { var valid3 = true; } } } } } else { validate152.errors = [{ instancePath: instancePath + "/system_ids/" + i0, schemaPath: "#/definitions/system_id/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid1 = _errs4 === errors; if (!valid1) { break; } } } } else { validate152.errors = [{ instancePath: instancePath + "/system_ids", schemaPath: "#/properties/system_ids/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.system_name !== undefined) { let data4 = data.system_name; const _errs12 = errors; if (errors === _errs12) { if (typeof data4 === "string") { if (!pattern3.test(data4)) { validate152.errors = [{ instancePath: instancePath + "/system_name", schemaPath: "#/properties/system_name/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate152.errors = [{ instancePath: instancePath + "/system_name", schemaPath: "#/properties/system_name/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs12 === errors; } else { var valid0 = true; } if (valid0) { if (data.system_name_short !== undefined) { let data5 = data.system_name_short; const _errs14 = errors; if (errors === _errs14) { if (typeof data5 === "string") { if (!pattern3.test(data5)) { validate152.errors = [{ instancePath: instancePath + "/system_name_short", schemaPath: "#/properties/system_name_short/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate152.errors = [{ instancePath: instancePath + "/system_name_short", schemaPath: "#/properties/system_name_short/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs14 === errors; } else { var valid0 = true; } if (valid0) { if (data.description !== undefined) { const _errs16 = errors; if (typeof data.description !== "string") { validate152.errors = [{ instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs16 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data7 = data.props; const _errs18 = errors; if (errors === _errs18) { if (Array.isArray(data7)) { if (data7.length < 1) { validate152.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid4 = true; const len1 = data7.length; for (let i1 = 0; i1 < len1; i1++) { const _errs20 = errors; if (!(validate24(data7[i1], { instancePath: instancePath + "/props/" + i1, parentData: data7, parentDataProperty: i1, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid4 = _errs20 === errors; if (!valid4) { break; } } } } else { validate152.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs18 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data9 = data.links; const _errs21 = errors; if (errors === _errs21) { if (Array.isArray(data9)) { if (data9.length < 1) { validate152.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid5 = true; const len2 = data9.length; for (let i2 = 0; i2 < len2; i2++) { let data10 = data9[i2]; const _errs23 = errors; const _errs24 = errors; if (errors === _errs24) { if (data10 && typeof data10 == "object" && !Array.isArray(data10)) { let missing2; if ((data10.href === undefined) && (missing2 = "href")) { validate152.errors = [{ instancePath: instancePath + "/links/" + i2, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" }]; return false; } else { const _errs26 = errors; for (const key2 in data10) { if (!((((key2 === "href") || (key2 === "rel")) || (key2 === "media_type")) || (key2 === "text"))) { validate152.errors = [{ instancePath: instancePath + "/links/" + i2, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs26 === errors) { if (data10.href !== undefined) { let data11 = data10.href; const _errs27 = errors; if (errors === _errs27) { if (errors === _errs27) { if (typeof data11 === "string") { if (!(formats10.test(data11))) { validate152.errors = [{ instancePath: instancePath + "/links/" + i2 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate152.errors = [{ instancePath: instancePath + "/links/" + i2 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid7 = _errs27 === errors; } else { var valid7 = true; } if (valid7) { if (data10.rel !== undefined) { let data12 = data10.rel; const _errs29 = errors; if (errors === _errs29) { if (typeof data12 === "string") { if (!pattern9.test(data12)) { validate152.errors = [{ instancePath: instancePath + "/links/" + i2 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate152.errors = [{ instancePath: instancePath + "/links/" + i2 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid7 = _errs29 === errors; } else { var valid7 = true; } if (valid7) { if (data10.media_type !== undefined) { let data13 = data10.media_type; const _errs31 = errors; if (errors === _errs31) { if (typeof data13 === "string") { if (!pattern3.test(data13)) { validate152.errors = [{ instancePath: instancePath + "/links/" + i2 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate152.errors = [{ instancePath: instancePath + "/links/" + i2 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid7 = _errs31 === errors; } else { var valid7 = true; } if (valid7) { if (data10.text !== undefined) { const _errs33 = errors; if (typeof data10.text !== "string") { validate152.errors = [{ instancePath: instancePath + "/links/" + i2 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid7 = _errs33 === errors; } else { var valid7 = true; } } } } } } } else { validate152.errors = [{ instancePath: instancePath + "/links/" + i2, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid5 = _errs23 === errors; if (!valid5) { break; } } } } else { validate152.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs21 === errors; } else { var valid0 = true; } if (valid0) { if (data.date_authorized !== undefined) { let data15 = data.date_authorized; const _errs35 = errors; const _errs36 = errors; if (errors === _errs36) { if (errors === _errs36) { if (typeof data15 === "string") { if (!pattern164.test(data15)) { validate152.errors = [{ instancePath: instancePath + "/date_authorized", schemaPath: "#/definitions/date_authorized/pattern", keyword: "pattern", params: { pattern: "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))(Z|[+-][0-9]{2}:[0-9]{2})?$" }, message: "must match pattern \"" + "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))(Z|[+-][0-9]{2}:[0-9]{2})?$" + "\"" }]; return false; } else { if (!(formats92.validate(data15))) { validate152.errors = [{ instancePath: instancePath + "/date_authorized", schemaPath: "#/definitions/date_authorized/format", keyword: "format", params: { format: "date" }, message: "must match format \"" + "date" + "\"" }]; return false; } } } else { validate152.errors = [{ instancePath: instancePath + "/date_authorized", schemaPath: "#/definitions/date_authorized/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid0 = _errs35 === errors; } else { var valid0 = true; } if (valid0) { if (data.security_sensitivity_level !== undefined) { let data16 = data.security_sensitivity_level; const _errs38 = errors; if (errors === _errs38) { if (typeof data16 === "string") { if (!pattern3.test(data16)) { validate152.errors = [{ instancePath: instancePath + "/security_sensitivity_level", schemaPath: "#/properties/security_sensitivity_level/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate152.errors = [{ instancePath: instancePath + "/security_sensitivity_level", schemaPath: "#/properties/security_sensitivity_level/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs38 === errors; } else { var valid0 = true; } if (valid0) { if (data.system_information !== undefined) { const _errs40 = errors; if (!(validate154(data.system_information, { instancePath: instancePath + "/system_information", parentData: data, parentDataProperty: "system_information", rootData }))) { vErrors = vErrors === null ? validate154.errors : vErrors.concat(validate154.errors); errors = vErrors.length; } var valid0 = _errs40 === errors; } else { var valid0 = true; } if (valid0) { if (data.security_impact_level !== undefined) { let data18 = data.security_impact_level; const _errs41 = errors; const _errs42 = errors; if (errors === _errs42) { if (data18 && typeof data18 == "object" && !Array.isArray(data18)) { let missing3; if ((((data18.security_objective_confidentiality === undefined) && (missing3 = "security_objective_confidentiality")) || ((data18.security_objective_integrity === undefined) && (missing3 = "security_objective_integrity"))) || ((data18.security_objective_availability === undefined) && (missing3 = "security_objective_availability"))) { validate152.errors = [{ instancePath: instancePath + "/security_impact_level", schemaPath: "#/definitions/security_impact_level/required", keyword: "required", params: { missingProperty: missing3 }, message: "must have required property '" + missing3 + "'" }]; return false; } else { const _errs44 = errors; for (const key3 in data18) { if (!(((key3 === "security_objective_confidentiality") || (key3 === "security_objective_integrity")) || (key3 === "security_objective_availability"))) { validate152.errors = [{ instancePath: instancePath + "/security_impact_level", schemaPath: "#/definitions/security_impact_level/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key3 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs44 === errors) { if (data18.security_objective_confidentiality !== undefined) { let data19 = data18.security_objective_confidentiality; const _errs45 = errors; if (errors === _errs45) { if (typeof data19 === "string") { if (!pattern3.test(data19)) { validate152.errors = [{ instancePath: instancePath + "/security_impact_level/security_objective_confidentiality", schemaPath: "#/definitions/security_impact_level/properties/security_objective_confidentiality/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate152.errors = [{ instancePath: instancePath + "/security_impact_level/security_objective_confidentiality", schemaPath: "#/definitions/security_impact_level/properties/security_objective_confidentiality/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid10 = _errs45 === errors; } else { var valid10 = true; } if (valid10) { if (data18.security_objective_integrity !== undefined) { let data20 = data18.security_objective_integrity; const _errs47 = errors; if (errors === _errs47) { if (typeof data20 === "string") { if (!pattern3.test(data20)) { validate152.errors = [{ instancePath: instancePath + "/security_impact_level/security_objective_integrity", schemaPath: "#/definitions/security_impact_level/properties/security_objective_integrity/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate152.errors = [{ instancePath: instancePath + "/security_impact_level/security_objective_integrity", schemaPath: "#/definitions/security_impact_level/properties/security_objective_integrity/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid10 = _errs47 === errors; } else { var valid10 = true; } if (valid10) { if (data18.security_objective_availability !== undefined) { let data21 = data18.security_objective_availability; const _errs49 = errors; if (errors === _errs49) { if (typeof data21 === "string") { if (!pattern3.test(data21)) { validate152.errors = [{ instancePath: instancePath + "/security_impact_level/security_objective_availability", schemaPath: "#/definitions/security_impact_level/properties/security_objective_availability/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate152.errors = [{ instancePath: instancePath + "/security_impact_level/security_objective_availability", schemaPath: "#/definitions/security_impact_level/properties/security_objective_availability/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid10 = _errs49 === errors; } else { var valid10 = true; } } } } } } else { validate152.errors = [{ instancePath: instancePath + "/security_impact_level", schemaPath: "#/definitions/security_impact_level/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid0 = _errs41 === errors; } else { var valid0 = true; } if (valid0) { if (data.status !== undefined) { const _errs51 = errors; if (!(validate161(data.status, { instancePath: instancePath + "/status", parentData: data, parentDataProperty: "status", rootData }))) { vErrors = vErrors === null ? validate161.errors : vErrors.concat(validate161.errors); errors = vErrors.length; } var valid0 = _errs51 === errors; } else { var valid0 = true; } if (valid0) { if (data.authorization_boundary !== undefined) { const _errs52 = errors; if (!(validate163(data.authorization_boundary, { instancePath: instancePath + "/authorization_boundary", parentData: data, parentDataProperty: "authorization_boundary", rootData }))) { vErrors = vErrors === null ? validate163.errors : vErrors.concat(validate163.errors); errors = vErrors.length; } var valid0 = _errs52 === errors; } else { var valid0 = true; } if (valid0) { if (data.network_architecture !== undefined) { const _errs53 = errors; if (!(validate169(data.network_architecture, { instancePath: instancePath + "/network_architecture", parentData: data, parentDataProperty: "network_architecture", rootData }))) { vErrors = vErrors === null ? validate169.errors : vErrors.concat(validate169.errors); errors = vErrors.length; } var valid0 = _errs53 === errors; } else { var valid0 = true; } if (valid0) { if (data.data_flow !== undefined) { const _errs54 = errors; if (!(validate173(data.data_flow, { instancePath: instancePath + "/data_flow", parentData: data, parentDataProperty: "data_flow", rootData }))) { vErrors = vErrors === null ? validate173.errors : vErrors.concat(validate173.errors); errors = vErrors.length; } var valid0 = _errs54 === errors; } else { var valid0 = true; } if (valid0) { if (data.responsible_parties !== undefined) { let data26 = data.responsible_parties; const _errs55 = errors; if (errors === _errs55) { if (Array.isArray(data26)) { if (data26.length < 1) { validate152.errors = [{ instancePath: instancePath + "/responsible_parties", schemaPath: "#/properties/responsible_parties/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid11 = true; const len3 = data26.length; for (let i3 = 0; i3 < len3; i3++) { const _errs57 = errors; if (!(validate40(data26[i3], { instancePath: instancePath + "/responsible_parties/" + i3, parentData: data26, parentDataProperty: i3, rootData }))) { vErrors = vErrors === null ? validate40.errors : vErrors.concat(validate40.errors); errors = vErrors.length; } var valid11 = _errs57 === errors; if (!valid11) { break; } } } } else { validate152.errors = [{ instancePath: instancePath + "/responsible_parties", schemaPath: "#/properties/responsible_parties/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs55 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs58 = errors; if (typeof data.remarks !== "string") { validate152.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs58 === errors; } else { var valid0 = true; } } } } } } } } } } } } } } } } } } } else { validate152.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate152.errors = vErrors; return errors === 0; } const schema181 = { "title": "System Implementation", "description": "Provides information as to how the system is implemented.", "$id": "#/definitions/system_implementation", "type": "object", "properties": { "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "leveraged_authorizations": { "type": "array", "minItems": 1, "items": { "title": "Leveraged Authorization", "description": "A description of another authorized system from which this system inherits capabilities that satisfy security requirements. Another term for this concept is a common control provider.", "type": "object", "properties": { "uuid": { "title": "Leveraged Authorization Universally Unique Identifier", "description": "A globally unique identifier that can be used to reference this leveraged authorization entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "title": { "title": "title field", "description": "A human readable name for the leveraged authorization in the context of the system.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "party_uuid": { "title": "party_uuid field", "description": "A reference to the party that manages the leveraged system.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "date_authorized": { "$ref": "#/definitions/date_authorized" }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "title", "party_uuid", "date_authorized"], "additionalProperties": false } }, "users": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/system_user" } }, "components": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/system_component" } }, "inventory_items": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/inventory_item" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["users", "components"], "additionalProperties": false }; const schema186 = { "title": "System User", "description": "A type of user that interacts with the system based on an associated role.", "$id": "#/definitions/system_user", "type": "object", "properties": { "uuid": { "title": "User Universally Unique Identifier", "description": "The unique identifier for the user class.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "title": { "title": "User Title", "description": "A name given to the user, which may be used by a tool for display and navigation.", "type": "string" }, "short_name": { "title": "User Short Name", "description": "A short common name, abbreviation, or acronym for the user.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "description": { "title": "User Description", "description": "A summary of the user's purpose within the system.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "role_ids": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/role_id" } }, "authorized_privileges": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/authorized_privilege" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid"], "additionalProperties": false }; const schema188 = { "title": "Role Identifier Reference", "description": "A reference to the roles served by the user.", "$id": "#/definitions/role_id", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }; const schema189 = { "title": "Privilege", "description": "Identifies a specific system privilege held by the user, along with an associated description and/or rationale for the privilege.", "$id": "#/definitions/authorized_privilege", "type": "object", "properties": { "title": { "title": "Privilege Title", "description": "A human readable name for the privilege.", "type": "string" }, "description": { "title": "Privilege Description", "description": "A summary of the privilege's purpose within the system.", "type": "string" }, "functions_performed": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/function_performed" } } }, "required": ["title", "functions_performed"], "additionalProperties": false }; const schema190 = { "title": "Functions Performed", "description": "Describes a function performed for a given authorized privilege by this user class.", "$id": "#/definitions/function_performed", "type": "string", "pattern": "^\\S(.*\\S)?$" }; function validate184(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/authorized_privilege" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if (((data.title === undefined) && (missing0 = "title")) || ((data.functions_performed === undefined) && (missing0 = "functions_performed"))) { validate184.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(((key0 === "title") || (key0 === "description")) || (key0 === "functions_performed"))) { validate184.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.title !== undefined) { const _errs2 = errors; if (typeof data.title !== "string") { validate184.errors = [{ instancePath: instancePath + "/title", schemaPath: "#/properties/title/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.description !== undefined) { const _errs4 = errors; if (typeof data.description !== "string") { validate184.errors = [{ instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.functions_performed !== undefined) { let data2 = data.functions_performed; const _errs6 = errors; if (errors === _errs6) { if (Array.isArray(data2)) { if (data2.length < 1) { validate184.errors = [{ instancePath: instancePath + "/functions_performed", schemaPath: "#/properties/functions_performed/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data2.length; for (let i0 = 0; i0 < len0; i0++) { let data3 = data2[i0]; const _errs8 = errors; const _errs9 = errors; if (errors === _errs9) { if (typeof data3 === "string") { if (!pattern3.test(data3)) { validate184.errors = [{ instancePath: instancePath + "/functions_performed/" + i0, schemaPath: "#/definitions/function_performed/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate184.errors = [{ instancePath: instancePath + "/functions_performed/" + i0, schemaPath: "#/definitions/function_performed/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid1 = _errs8 === errors; if (!valid1) { break; } } } } else { validate184.errors = [{ instancePath: instancePath + "/functions_performed", schemaPath: "#/properties/functions_performed/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs6 === errors; } else { var valid0 = true; } } } } } } else { validate184.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate184.errors = vErrors; return errors === 0; } function validate182(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/system_user" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((data.uuid === undefined) && (missing0 = "uuid")) { validate182.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(func8.call(schema186.properties, key0))) { validate182.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.uuid !== undefined) { let data0 = data.uuid; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern0.test(data0)) { validate182.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate182.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.title !== undefined) { const _errs4 = errors; if (typeof data.title !== "string") { validate182.errors = [{ instancePath: instancePath + "/title", schemaPath: "#/properties/title/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.short_name !== undefined) { let data2 = data.short_name; const _errs6 = errors; if (errors === _errs6) { if (typeof data2 === "string") { if (!pattern3.test(data2)) { validate182.errors = [{ instancePath: instancePath + "/short_name", schemaPath: "#/properties/short_name/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate182.errors = [{ instancePath: instancePath + "/short_name", schemaPath: "#/properties/short_name/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.description !== undefined) { const _errs8 = errors; if (typeof data.description !== "string") { validate182.errors = [{ instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs8 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data4 = data.props; const _errs10 = errors; if (errors === _errs10) { if (Array.isArray(data4)) { if (data4.length < 1) { validate182.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data4.length; for (let i0 = 0; i0 < len0; i0++) { const _errs12 = errors; if (!(validate24(data4[i0], { instancePath: instancePath + "/props/" + i0, parentData: data4, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs12 === errors; if (!valid1) { break; } } } } else { validate182.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs10 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data6 = data.links; const _errs13 = errors; if (errors === _errs13) { if (Array.isArray(data6)) { if (data6.length < 1) { validate182.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data6.length; for (let i1 = 0; i1 < len1; i1++) { let data7 = data6[i1]; const _errs15 = errors; const _errs16 = errors; if (errors === _errs16) { if (data7 && typeof data7 == "object" && !Array.isArray(data7)) { let missing1; if ((data7.href === undefined) && (missing1 = "href")) { validate182.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs18 = errors; for (const key1 in data7) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate182.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs18 === errors) { if (data7.href !== undefined) { let data8 = data7.href; const _errs19 = errors; if (errors === _errs19) { if (errors === _errs19) { if (typeof data8 === "string") { if (!(formats10.test(data8))) { validate182.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate182.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid4 = _errs19 === errors; } else { var valid4 = true; } if (valid4) { if (data7.rel !== undefined) { let data9 = data7.rel; const _errs21 = errors; if (errors === _errs21) { if (typeof data9 === "string") { if (!pattern9.test(data9)) { validate182.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate182.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs21 === errors; } else { var valid4 = true; } if (valid4) { if (data7.media_type !== undefined) { let data10 = data7.media_type; const _errs23 = errors; if (errors === _errs23) { if (typeof data10 === "string") { if (!pattern3.test(data10)) { validate182.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate182.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs23 === errors; } else { var valid4 = true; } if (valid4) { if (data7.text !== undefined) { const _errs25 = errors; if (typeof data7.text !== "string") { validate182.errors = [{ instancePath: instancePath + "/links/" + i1 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid4 = _errs25 === errors; } else { var valid4 = true; } } } } } } } else { validate182.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs15 === errors; if (!valid2) { break; } } } } else { validate182.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs13 === errors; } else { var valid0 = true; } if (valid0) { if (data.role_ids !== undefined) { let data12 = data.role_ids; const _errs27 = errors; if (errors === _errs27) { if (Array.isArray(data12)) { if (data12.length < 1) { validate182.errors = [{ instancePath: instancePath + "/role_ids", schemaPath: "#/properties/role_ids/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid5 = true; const len2 = data12.length; for (let i2 = 0; i2 < len2; i2++) { let data13 = data12[i2]; const _errs29 = errors; const _errs30 = errors; if (errors === _errs30) { if (typeof data13 === "string") { if (!pattern9.test(data13)) { validate182.errors = [{ instancePath: instancePath + "/role_ids/" + i2, schemaPath: "#/definitions/role_id/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate182.errors = [{ instancePath: instancePath + "/role_ids/" + i2, schemaPath: "#/definitions/role_id/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid5 = _errs29 === errors; if (!valid5) { break; } } } } else { validate182.errors = [{ instancePath: instancePath + "/role_ids", schemaPath: "#/properties/role_ids/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs27 === errors; } else { var valid0 = true; } if (valid0) { if (data.authorized_privileges !== undefined) { let data14 = data.authorized_privileges; const _errs32 = errors; if (errors === _errs32) { if (Array.isArray(data14)) { if (data14.length < 1) { validate182.errors = [{ instancePath: instancePath + "/authorized_privileges", schemaPath: "#/properties/authorized_privileges/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid7 = true; const len3 = data14.length; for (let i3 = 0; i3 < len3; i3++) { const _errs34 = errors; if (!(validate184(data14[i3], { instancePath: instancePath + "/authorized_privileges/" + i3, parentData: data14, parentDataProperty: i3, rootData }))) { vErrors = vErrors === null ? validate184.errors : vErrors.concat(validate184.errors); errors = vErrors.length; } var valid7 = _errs34 === errors; if (!valid7) { break; } } } } else { validate182.errors = [{ instancePath: instancePath + "/authorized_privileges", schemaPath: "#/properties/authorized_privileges/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs32 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs35 = errors; if (typeof data.remarks !== "string") { validate182.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs35 === errors; } else { var valid0 = true; } } } } } } } } } } } } else { validate182.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate182.errors = vErrors; return errors === 0; } const schema192 = { "title": "Component", "description": "A defined component that can be part of an implemented system.", "$id": "#/definitions/system_component", "type": "object", "properties": { "uuid": { "title": "Component Identifier", "description": "The unique identifier for the component.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "type": { "$id": "system_component_type", "title": "Component Type", "description": "A category describing the purpose of the component.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "title": { "title": "Component Title", "description": "A human readable name for the system component.", "type": "string" }, "description": { "title": "Component Description", "description": "A description of the component, including information about its function.", "type": "string" }, "purpose": { "title": "Purpose", "description": "A summary of the technological or business purpose of the component.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "status": { "title": "Status", "description": "Describes the operational status of the system component.", "type": "object", "properties": { "state": { "title": "State", "description": "The operational status.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$", "enum": ["under_development", "operational", "disposition", "other"] }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["state"], "additionalProperties": false }, "responsible_roles": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_role" } }, "protocols": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/protocol" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "type", "title", "description", "status"], "additionalProperties": false }; function validate187(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/system_component" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((((((data.uuid === undefined) && (missing0 = "uuid")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.title === undefined) && (missing0 = "title"))) || ((data.description === undefined) && (missing0 = "description"))) || ((data.status === undefined) && (missing0 = "status"))) { validate187.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(func8.call(schema192.properties, key0))) { validate187.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.uuid !== undefined) { let data0 = data.uuid; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern0.test(data0)) { validate187.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate187.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.type !== undefined) { let data1 = data.type; const _errs4 = errors; if (errors === _errs4) { if (typeof data1 === "string") { if (!pattern3.test(data1)) { validate187.errors = [{ instancePath: instancePath + "/type", schemaPath: "#/properties/type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate187.errors = [{ instancePath: instancePath + "/type", schemaPath: "#/properties/type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.title !== undefined) { const _errs6 = errors; if (typeof data.title !== "string") { validate187.errors = [{ instancePath: instancePath + "/title", schemaPath: "#/properties/title/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.description !== undefined) { const _errs8 = errors; if (typeof data.description !== "string") { validate187.errors = [{ instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs8 === errors; } else { var valid0 = true; } if (valid0) { if (data.purpose !== undefined) { const _errs10 = errors; if (typeof data.purpose !== "string") { validate187.errors = [{ instancePath: instancePath + "/purpose", schemaPath: "#/properties/purpose/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs10 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data5 = data.props; const _errs12 = errors; if (errors === _errs12) { if (Array.isArray(data5)) { if (data5.length < 1) { validate187.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data5.length; for (let i0 = 0; i0 < len0; i0++) { const _errs14 = errors; if (!(validate24(data5[i0], { instancePath: instancePath + "/props/" + i0, parentData: data5, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs14 === errors; if (!valid1) { break; } } } } else { validate187.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs12 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data7 = data.links; const _errs15 = errors; if (errors === _errs15) { if (Array.isArray(data7)) { if (data7.length < 1) { validate187.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data7.length; for (let i1 = 0; i1 < len1; i1++) { let data8 = data7[i1]; const _errs17 = errors; const _errs18 = errors; if (errors === _errs18) { if (data8 && typeof data8 == "object" && !Array.isArray(data8)) { let missing1; if ((data8.href === undefined) && (missing1 = "href")) { validate187.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs20 = errors; for (const key1 in data8) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate187.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs20 === errors) { if (data8.href !== undefined) { let data9 = data8.href; const _errs21 = errors; if (errors === _errs21) { if (errors === _errs21) { if (typeof data9 === "string") { if (!(formats10.test(data9))) { validate187.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate187.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid4 = _errs21 === errors; } else { var valid4 = true; } if (valid4) { if (data8.rel !== undefined) { let data10 = data8.rel; const _errs23 = errors; if (errors === _errs23) { if (typeof data10 === "string") { if (!pattern9.test(data10)) { validate187.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate187.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs23 === errors; } else { var valid4 = true; } if (valid4) { if (data8.media_type !== undefined) { let data11 = data8.media_type; const _errs25 = errors; if (errors === _errs25) { if (typeof data11 === "string") { if (!pattern3.test(data11)) { validate187.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate187.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs25 === errors; } else { var valid4 = true; } if (valid4) { if (data8.text !== undefined) { const _errs27 = errors; if (typeof data8.text !== "string") { validate187.errors = [{ instancePath: instancePath + "/links/" + i1 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid4 = _errs27 === errors; } else { var valid4 = true; } } } } } } } else { validate187.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs17 === errors; if (!valid2) { break; } } } } else { validate187.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs15 === errors; } else { var valid0 = true; } if (valid0) { if (data.status !== undefined) { let data13 = data.status; const _errs29 = errors; if (errors === _errs29) { if (data13 && typeof data13 == "object" && !Array.isArray(data13)) { let missing2; if ((data13.state === undefined) && (missing2 = "state")) { validate187.errors = [{ instancePath: instancePath + "/status", schemaPath: "#/properties/status/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" }]; return false; } else { const _errs31 = errors; for (const key2 in data13) { if (!((key2 === "state") || (key2 === "remarks"))) { validate187.errors = [{ instancePath: instancePath + "/status", schemaPath: "#/properties/status/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs31 === errors) { if (data13.state !== undefined) { let data14 = data13.state; const _errs32 = errors; if (!((((data14 === "under_development") || (data14 === "operational")) || (data14 === "disposition")) || (data14 === "other"))) { validate187.errors = [{ instancePath: instancePath + "/status/state", schemaPath: "#/properties/status/properties/state/enum", keyword: "enum", params: { allowedValues: schema192.properties.status.properties.state.enum }, message: "must be equal to one of the allowed values" }]; return false; } if (errors === _errs32) { if (typeof data14 === "string") { if (!pattern9.test(data14)) { validate187.errors = [{ instancePath: instancePath + "/status/state", schemaPath: "#/properties/status/properties/state/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate187.errors = [{ instancePath: instancePath + "/status/state", schemaPath: "#/properties/status/properties/state/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid5 = _errs32 === errors; } else { var valid5 = true; } if (valid5) { if (data13.remarks !== undefined) { const _errs34 = errors; if (typeof data13.remarks !== "string") { validate187.errors = [{ instancePath: instancePath + "/status/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid5 = _errs34 === errors; } else { var valid5 = true; } } } } } else { validate187.errors = [{ instancePath: instancePath + "/status", schemaPath: "#/properties/status/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid0 = _errs29 === errors; } else { var valid0 = true; } if (valid0) { if (data.responsible_roles !== undefined) { let data16 = data.responsible_roles; const _errs37 = errors; if (errors === _errs37) { if (Array.isArray(data16)) { if (data16.length < 1) { validate187.errors = [{ instancePath: instancePath + "/responsible_roles", schemaPath: "#/properties/responsible_roles/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid7 = true; const len2 = data16.length; for (let i2 = 0; i2 < len2; i2++) { const _errs39 = errors; if (!(validate102(data16[i2], { instancePath: instancePath + "/responsible_roles/" + i2, parentData: data16, parentDataProperty: i2, rootData }))) { vErrors = vErrors === null ? validate102.errors : vErrors.concat(validate102.errors); errors = vErrors.length; } var valid7 = _errs39 === errors; if (!valid7) { break; } } } } else { validate187.errors = [{ instancePath: instancePath + "/responsible_roles", schemaPath: "#/properties/responsible_roles/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs37 === errors; } else { var valid0 = true; } if (valid0) { if (data.protocols !== undefined) { let data18 = data.protocols; const _errs40 = errors; if (errors === _errs40) { if (Array.isArray(data18)) { if (data18.length < 1) { validate187.errors = [{ instancePath: instancePath + "/protocols", schemaPath: "#/properties/protocols/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid8 = true; const len3 = data18.length; for (let i3 = 0; i3 < len3; i3++) { const _errs42 = errors; if (!(validate105(data18[i3], { instancePath: instancePath + "/protocols/" + i3, parentData: data18, parentDataProperty: i3, rootData }))) { vErrors = vErrors === null ? validate105.errors : vErrors.concat(validate105.errors); errors = vErrors.length; } var valid8 = _errs42 === errors; if (!valid8) { break; } } } } else { validate187.errors = [{ instancePath: instancePath + "/protocols", schemaPath: "#/properties/protocols/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs40 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs43 = errors; if (typeof data.remarks !== "string") { validate187.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs43 === errors; } else { var valid0 = true; } } } } } } } } } } } } } } else { validate187.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate187.errors = vErrors; return errors === 0; } const schema196 = { "title": "Inventory Item", "description": "A single managed inventory item within the system.", "$id": "#/definitions/inventory_item", "type": "object", "properties": { "uuid": { "title": "Inventory Item Universally Unique Identifier", "description": "A globally unique identifier that can be used to reference this inventory item entry elsewhere in an OSCAL document. A UUID should be consistently used for a given resource across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "description": { "title": "Inventory Item Description", "description": "A summary of the inventory item stating its purpose within the system.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "responsible_parties": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_party" } }, "implemented_components": { "type": "array", "minItems": 1, "items": { "title": "Implemented Component", "description": "The set of components that are implemented in a given system inventory item.", "type": "object", "properties": { "component_uuid": { "title": "Component Universally Unique Identifier Reference", "description": "A reference to a component that is implemented as part of an inventory item.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "responsible_parties": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_party" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["component_uuid"], "additionalProperties": false } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "description"], "additionalProperties": false }; function validate192(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/inventory_item" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if (((data.uuid === undefined) && (missing0 = "uuid")) || ((data.description === undefined) && (missing0 = "description"))) { validate192.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(((((((key0 === "uuid") || (key0 === "description")) || (key0 === "props")) || (key0 === "links")) || (key0 === "responsible_parties")) || (key0 === "implemented_components")) || (key0 === "remarks"))) { validate192.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.uuid !== undefined) { let data0 = data.uuid; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern0.test(data0)) { validate192.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate192.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.description !== undefined) { const _errs4 = errors; if (typeof data.description !== "string") { validate192.errors = [{ instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data2 = data.props; const _errs6 = errors; if (errors === _errs6) { if (Array.isArray(data2)) { if (data2.length < 1) { validate192.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data2.length; for (let i0 = 0; i0 < len0; i0++) { const _errs8 = errors; if (!(validate24(data2[i0], { instancePath: instancePath + "/props/" + i0, parentData: data2, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs8 === errors; if (!valid1) { break; } } } } else { validate192.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data4 = data.links; const _errs9 = errors; if (errors === _errs9) { if (Array.isArray(data4)) { if (data4.length < 1) { validate192.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data4.length; for (let i1 = 0; i1 < len1; i1++) { let data5 = data4[i1]; const _errs11 = errors; const _errs12 = errors; if (errors === _errs12) { if (data5 && typeof data5 == "object" && !Array.isArray(data5)) { let missing1; if ((data5.href === undefined) && (missing1 = "href")) { validate192.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs14 = errors; for (const key1 in data5) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate192.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs14 === errors) { if (data5.href !== undefined) { let data6 = data5.href; const _errs15 = errors; if (errors === _errs15) { if (errors === _errs15) { if (typeof data6 === "string") { if (!(formats10.test(data6))) { validate192.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate192.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid4 = _errs15 === errors; } else { var valid4 = true; } if (valid4) { if (data5.rel !== undefined) { let data7 = data5.rel; const _errs17 = errors; if (errors === _errs17) { if (typeof data7 === "string") { if (!pattern9.test(data7)) { validate192.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate192.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs17 === errors; } else { var valid4 = true; } if (valid4) { if (data5.media_type !== undefined) { let data8 = data5.media_type; const _errs19 = errors; if (errors === _errs19) { if (typeof data8 === "string") { if (!pattern3.test(data8)) { validate192.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate192.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs19 === errors; } else { var valid4 = true; } if (valid4) { if (data5.text !== undefined) { const _errs21 = errors; if (typeof data5.text !== "string") { validate192.errors = [{ instancePath: instancePath + "/links/" + i1 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid4 = _errs21 === errors; } else { var valid4 = true; } } } } } } } else { validate192.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs11 === errors; if (!valid2) { break; } } } } else { validate192.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs9 === errors; } else { var valid0 = true; } if (valid0) { if (data.responsible_parties !== undefined) { let data10 = data.responsible_parties; const _errs23 = errors; if (errors === _errs23) { if (Array.isArray(data10)) { if (data10.length < 1) { validate192.errors = [{ instancePath: instancePath + "/responsible_parties", schemaPath: "#/properties/responsible_parties/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid5 = true; const len2 = data10.length; for (let i2 = 0; i2 < len2; i2++) { const _errs25 = errors; if (!(validate40(data10[i2], { instancePath: instancePath + "/responsible_parties/" + i2, parentData: data10, parentDataProperty: i2, rootData }))) { vErrors = vErrors === null ? validate40.errors : vErrors.concat(validate40.errors); errors = vErrors.length; } var valid5 = _errs25 === errors; if (!valid5) { break; } } } } else { validate192.errors = [{ instancePath: instancePath + "/responsible_parties", schemaPath: "#/properties/responsible_parties/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs23 === errors; } else { var valid0 = true; } if (valid0) { if (data.implemented_components !== undefined) { let data12 = data.implemented_components; const _errs26 = errors; if (errors === _errs26) { if (Array.isArray(data12)) { if (data12.length < 1) { validate192.errors = [{ instancePath: instancePath + "/implemented_components", schemaPath: "#/properties/implemented_components/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid6 = true; const len3 = data12.length; for (let i3 = 0; i3 < len3; i3++) { let data13 = data12[i3]; const _errs28 = errors; if (errors === _errs28) { if (data13 && typeof data13 == "object" && !Array.isArray(data13)) { let missing2; if ((data13.component_uuid === undefined) && (missing2 = "component_uuid")) { validate192.errors = [{ instancePath: instancePath + "/implemented_components/" + i3, schemaPath: "#/properties/implemented_components/items/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" }]; return false; } else { const _errs30 = errors; for (const key2 in data13) { if (!(((((key2 === "component_uuid") || (key2 === "props")) || (key2 === "links")) || (key2 === "responsible_parties")) || (key2 === "remarks"))) { validate192.errors = [{ instancePath: instancePath + "/implemented_components/" + i3, schemaPath: "#/properties/implemented_components/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs30 === errors) { if (data13.component_uuid !== undefined) { let data14 = data13.component_uuid; const _errs31 = errors; if (errors === _errs31) { if (typeof data14 === "string") { if (!pattern0.test(data14)) { validate192.errors = [{ instancePath: instancePath + "/implemented_components/" + i3 + "/component_uuid", schemaPath: "#/properties/implemented_components/items/properties/component_uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate192.errors = [{ instancePath: instancePath + "/implemented_components/" + i3 + "/component_uuid", schemaPath: "#/properties/implemented_components/items/properties/component_uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid7 = _errs31 === errors; } else { var valid7 = true; } if (valid7) { if (data13.props !== undefined) { let data15 = data13.props; const _errs33 = errors; if (errors === _errs33) { if (Array.isArray(data15)) { if (data15.length < 1) { validate192.errors = [{ instancePath: instancePath + "/implemented_components/" + i3 + "/props", schemaPath: "#/properties/implemented_components/items/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid8 = true; const len4 = data15.length; for (let i4 = 0; i4 < len4; i4++) { const _errs35 = errors; if (!(validate24(data15[i4], { instancePath: instancePath + "/implemented_components/" + i3 + "/props/" + i4, parentData: data15, parentDataProperty: i4, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid8 = _errs35 === errors; if (!valid8) { break; } } } } else { validate192.errors = [{ instancePath: instancePath + "/implemented_components/" + i3 + "/props", schemaPath: "#/properties/implemented_components/items/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid7 = _errs33 === errors; } else { var valid7 = true; } if (valid7) { if (data13.links !== undefined) { let data17 = data13.links; const _errs36 = errors; if (errors === _errs36) { if (Array.isArray(data17)) { if (data17.length < 1) { validate192.errors = [{ instancePath: instancePath + "/implemented_components/" + i3 + "/links", schemaPath: "#/properties/implemented_components/items/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid9 = true; const len5 = data17.length; for (let i5 = 0; i5 < len5; i5++) { let data18 = data17[i5]; const _errs38 = errors; const _errs39 = errors; if (errors === _errs39) { if (data18 && typeof data18 == "object" && !Array.isArray(data18)) { let missing3; if ((data18.href === undefined) && (missing3 = "href")) { validate192.errors = [{ instancePath: instancePath + "/implemented_components/" + i3 + "/links/" + i5, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing3 }, message: "must have required property '" + missing3 + "'" }]; return false; } else { const _errs41 = errors; for (const key3 in data18) { if (!((((key3 === "href") || (key3 === "rel")) || (key3 === "media_type")) || (key3 === "text"))) { validate192.errors = [{ instancePath: instancePath + "/implemented_components/" + i3 + "/links/" + i5, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key3 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs41 === errors) { if (data18.href !== undefined) { let data19 = data18.href; const _errs42 = errors; if (errors === _errs42) { if (errors === _errs42) { if (typeof data19 === "string") { if (!(formats10.test(data19))) { validate192.errors = [{ instancePath: instancePath + "/implemented_components/" + i3 + "/links/" + i5 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate192.errors = [{ instancePath: instancePath + "/implemented_components/" + i3 + "/links/" + i5 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid11 = _errs42 === errors; } else { var valid11 = true; } if (valid11) { if (data18.rel !== undefined) { let data20 = data18.rel; const _errs44 = errors; if (errors === _errs44) { if (typeof data20 === "string") { if (!pattern9.test(data20)) { validate192.errors = [{ instancePath: instancePath + "/implemented_components/" + i3 + "/links/" + i5 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate192.errors = [{ instancePath: instancePath + "/implemented_components/" + i3 + "/links/" + i5 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid11 = _errs44 === errors; } else { var valid11 = true; } if (valid11) { if (data18.media_type !== undefined) { let data21 = data18.media_type; const _errs46 = errors; if (errors === _errs46) { if (typeof data21 === "string") { if (!pattern3.test(data21)) { validate192.errors = [{ instancePath: instancePath + "/implemented_components/" + i3 + "/links/" + i5 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate192.errors = [{ instancePath: instancePath + "/implemented_components/" + i3 + "/links/" + i5 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid11 = _errs46 === errors; } else { var valid11 = true; } if (valid11) { if (data18.text !== undefined) { const _errs48 = errors; if (typeof data18.text !== "string") { validate192.errors = [{ instancePath: instancePath + "/implemented_components/" + i3 + "/links/" + i5 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid11 = _errs48 === errors; } else { var valid11 = true; } } } } } } } else { validate192.errors = [{ instancePath: instancePath + "/implemented_components/" + i3 + "/links/" + i5, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid9 = _errs38 === errors; if (!valid9) { break; } } } } else { validate192.errors = [{ instancePath: instancePath + "/implemented_components/" + i3 + "/links", schemaPath: "#/properties/implemented_components/items/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid7 = _errs36 === errors; } else { var valid7 = true; } if (valid7) { if (data13.responsible_parties !== undefined) { let data23 = data13.responsible_parties; const _errs50 = errors; if (errors === _errs50) { if (Array.isArray(data23)) { if (data23.length < 1) { validate192.errors = [{ instancePath: instancePath + "/implemented_components/" + i3 + "/responsible_parties", schemaPath: "#/properties/implemented_components/items/properties/responsible_parties/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid12 = true; const len6 = data23.length; for (let i6 = 0; i6 < len6; i6++) { const _errs52 = errors; if (!(validate40(data23[i6], { instancePath: instancePath + "/implemented_components/" + i3 + "/responsible_parties/" + i6, parentData: data23, parentDataProperty: i6, rootData }))) { vErrors = vErrors === null ? validate40.errors : vErrors.concat(validate40.errors); errors = vErrors.length; } var valid12 = _errs52 === errors; if (!valid12) { break; } } } } else { validate192.errors = [{ instancePath: instancePath + "/implemented_components/" + i3 + "/responsible_parties", schemaPath: "#/properties/implemented_components/items/properties/responsible_parties/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid7 = _errs50 === errors; } else { var valid7 = true; } if (valid7) { if (data13.remarks !== undefined) { const _errs53 = errors; if (typeof data13.remarks !== "string") { validate192.errors = [{ instancePath: instancePath + "/implemented_components/" + i3 + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid7 = _errs53 === errors; } else { var valid7 = true; } } } } } } } } else { validate192.errors = [{ instancePath: instancePath + "/implemented_components/" + i3, schemaPath: "#/properties/implemented_components/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid6 = _errs28 === errors; if (!valid6) { break; } } } } else { validate192.errors = [{ instancePath: instancePath + "/implemented_components", schemaPath: "#/properties/implemented_components/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs26 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs56 = errors; if (typeof data.remarks !== "string") { validate192.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs56 === errors; } else { var valid0 = true; } } } } } } } } } } else { validate192.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate192.errors = vErrors; return errors === 0; } function validate179(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/system_implementation" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if (((data.users === undefined) && (missing0 = "users")) || ((data.components === undefined) && (missing0 = "components"))) { validate179.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(((((((key0 === "props") || (key0 === "links")) || (key0 === "leveraged_authorizations")) || (key0 === "users")) || (key0 === "components")) || (key0 === "inventory_items")) || (key0 === "remarks"))) { validate179.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.props !== undefined) { let data0 = data.props; const _errs2 = errors; if (errors === _errs2) { if (Array.isArray(data0)) { if (data0.length < 1) { validate179.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data0.length; for (let i0 = 0; i0 < len0; i0++) { const _errs4 = errors; if (!(validate24(data0[i0], { instancePath: instancePath + "/props/" + i0, parentData: data0, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs4 === errors; if (!valid1) { break; } } } } else { validate179.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data2 = data.links; const _errs5 = errors; if (errors === _errs5) { if (Array.isArray(data2)) { if (data2.length < 1) { validate179.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data2.length; for (let i1 = 0; i1 < len1; i1++) { let data3 = data2[i1]; const _errs7 = errors; const _errs8 = errors; if (errors === _errs8) { if (data3 && typeof data3 == "object" && !Array.isArray(data3)) { let missing1; if ((data3.href === undefined) && (missing1 = "href")) { validate179.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs10 = errors; for (const key1 in data3) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate179.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs10 === errors) { if (data3.href !== undefined) { let data4 = data3.href; const _errs11 = errors; if (errors === _errs11) { if (errors === _errs11) { if (typeof data4 === "string") { if (!(formats10.test(data4))) { validate179.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate179.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid4 = _errs11 === errors; } else { var valid4 = true; } if (valid4) { if (data3.rel !== undefined) { let data5 = data3.rel; const _errs13 = errors; if (errors === _errs13) { if (typeof data5 === "string") { if (!pattern9.test(data5)) { validate179.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate179.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs13 === errors; } else { var valid4 = true; } if (valid4) { if (data3.media_type !== undefined) { let data6 = data3.media_type; const _errs15 = errors; if (errors === _errs15) { if (typeof data6 === "string") { if (!pattern3.test(data6)) { validate179.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate179.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs15 === errors; } else { var valid4 = true; } if (valid4) { if (data3.text !== undefined) { const _errs17 = errors; if (typeof data3.text !== "string") { validate179.errors = [{ instancePath: instancePath + "/links/" + i1 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid4 = _errs17 === errors; } else { var valid4 = true; } } } } } } } else { validate179.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs7 === errors; if (!valid2) { break; } } } } else { validate179.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs5 === errors; } else { var valid0 = true; } if (valid0) { if (data.leveraged_authorizations !== undefined) { let data8 = data.leveraged_authorizations; const _errs19 = errors; if (errors === _errs19) { if (Array.isArray(data8)) { if (data8.length < 1) { validate179.errors = [{ instancePath: instancePath + "/leveraged_authorizations", schemaPath: "#/properties/leveraged_authorizations/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid5 = true; const len2 = data8.length; for (let i2 = 0; i2 < len2; i2++) { let data9 = data8[i2]; const _errs21 = errors; if (errors === _errs21) { if (data9 && typeof data9 == "object" && !Array.isArray(data9)) { let missing2; if (((((data9.uuid === undefined) && (missing2 = "uuid")) || ((data9.title === undefined) && (missing2 = "title"))) || ((data9.party_uuid === undefined) && (missing2 = "party_uuid"))) || ((data9.date_authorized === undefined) && (missing2 = "date_authorized"))) { validate179.errors = [{ instancePath: instancePath + "/leveraged_authorizations/" + i2, schemaPath: "#/properties/leveraged_authorizations/items/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" }]; return false; } else { const _errs23 = errors; for (const key2 in data9) { if (!(((((((key2 === "uuid") || (key2 === "title")) || (key2 === "props")) || (key2 === "links")) || (key2 === "party_uuid")) || (key2 === "date_authorized")) || (key2 === "remarks"))) { validate179.errors = [{ instancePath: instancePath + "/leveraged_authorizations/" + i2, schemaPath: "#/properties/leveraged_authorizations/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs23 === errors) { if (data9.uuid !== undefined) { let data10 = data9.uuid; const _errs24 = errors; if (errors === _errs24) { if (typeof data10 === "string") { if (!pattern0.test(data10)) { validate179.errors = [{ instancePath: instancePath + "/leveraged_authorizations/" + i2 + "/uuid", schemaPath: "#/properties/leveraged_authorizations/items/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate179.errors = [{ instancePath: instancePath + "/leveraged_authorizations/" + i2 + "/uuid", schemaPath: "#/properties/leveraged_authorizations/items/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid6 = _errs24 === errors; } else { var valid6 = true; } if (valid6) { if (data9.title !== undefined) { const _errs26 = errors; if (typeof data9.title !== "string") { validate179.errors = [{ instancePath: instancePath + "/leveraged_authorizations/" + i2 + "/title", schemaPath: "#/properties/leveraged_authorizations/items/properties/title/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid6 = _errs26 === errors; } else { var valid6 = true; } if (valid6) { if (data9.props !== undefined) { let data12 = data9.props; const _errs28 = errors; if (errors === _errs28) { if (Array.isArray(data12)) { if (data12.length < 1) { validate179.errors = [{ instancePath: instancePath + "/leveraged_authorizations/" + i2 + "/props", schemaPath: "#/properties/leveraged_authorizations/items/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid7 = true; const len3 = data12.length; for (let i3 = 0; i3 < len3; i3++) { const _errs30 = errors; if (!(validate24(data12[i3], { instancePath: instancePath + "/leveraged_authorizations/" + i2 + "/props/" + i3, parentData: data12, parentDataProperty: i3, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid7 = _errs30 === errors; if (!valid7) { break; } } } } else { validate179.errors = [{ instancePath: instancePath + "/leveraged_authorizations/" + i2 + "/props", schemaPath: "#/properties/leveraged_authorizations/items/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid6 = _errs28 === errors; } else { var valid6 = true; } if (valid6) { if (data9.links !== undefined) { let data14 = data9.links; const _errs31 = errors; if (errors === _errs31) { if (Array.isArray(data14)) { if (data14.length < 1) { validate179.errors = [{ instancePath: instancePath + "/leveraged_authorizations/" + i2 + "/links", schemaPath: "#/properties/leveraged_authorizations/items/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid8 = true; const len4 = data14.length; for (let i4 = 0; i4 < len4; i4++) { let data15 = data14[i4]; const _errs33 = errors; const _errs34 = errors; if (errors === _errs34) { if (data15 && typeof data15 == "object" && !Array.isArray(data15)) { let missing3; if ((data15.href === undefined) && (missing3 = "href")) { validate179.errors = [{ instancePath: instancePath + "/leveraged_authorizations/" + i2 + "/links/" + i4, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing3 }, message: "must have required property '" + missing3 + "'" }]; return false; } else { const _errs36 = errors; for (const key3 in data15) { if (!((((key3 === "href") || (key3 === "rel")) || (key3 === "media_type")) || (key3 === "text"))) { validate179.errors = [{ instancePath: instancePath + "/leveraged_authorizations/" + i2 + "/links/" + i4, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key3 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs36 === errors) { if (data15.href !== undefined) { let data16 = data15.href; const _errs37 = errors; if (errors === _errs37) { if (errors === _errs37) { if (typeof data16 === "string") { if (!(formats10.test(data16))) { validate179.errors = [{ instancePath: instancePath + "/leveraged_authorizations/" + i2 + "/links/" + i4 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate179.errors = [{ instancePath: instancePath + "/leveraged_authorizations/" + i2 + "/links/" + i4 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid10 = _errs37 === errors; } else { var valid10 = true; } if (valid10) { if (data15.rel !== undefined) { let data17 = data15.rel; const _errs39 = errors; if (errors === _errs39) { if (typeof data17 === "string") { if (!pattern9.test(data17)) { validate179.errors = [{ instancePath: instancePath + "/leveraged_authorizations/" + i2 + "/links/" + i4 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate179.errors = [{ instancePath: instancePath + "/leveraged_authorizations/" + i2 + "/links/" + i4 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid10 = _errs39 === errors; } else { var valid10 = true; } if (valid10) { if (data15.media_type !== undefined) { let data18 = data15.media_type; const _errs41 = errors; if (errors === _errs41) { if (typeof data18 === "string") { if (!pattern3.test(data18)) { validate179.errors = [{ instancePath: instancePath + "/leveraged_authorizations/" + i2 + "/links/" + i4 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate179.errors = [{ instancePath: instancePath + "/leveraged_authorizations/" + i2 + "/links/" + i4 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid10 = _errs41 === errors; } else { var valid10 = true; } if (valid10) { if (data15.text !== undefined) { const _errs43 = errors; if (typeof data15.text !== "string") { validate179.errors = [{ instancePath: instancePath + "/leveraged_authorizations/" + i2 + "/links/" + i4 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid10 = _errs43 === errors; } else { var valid10 = true; } } } } } } } else { validate179.errors = [{ instancePath: instancePath + "/leveraged_authorizations/" + i2 + "/links/" + i4, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid8 = _errs33 === errors; if (!valid8) { break; } } } } else { validate179.errors = [{ instancePath: instancePath + "/leveraged_authorizations/" + i2 + "/links", schemaPath: "#/properties/leveraged_authorizations/items/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid6 = _errs31 === errors; } else { var valid6 = true; } if (valid6) { if (data9.party_uuid !== undefined) { let data20 = data9.party_uuid; const _errs45 = errors; if (errors === _errs45) { if (typeof data20 === "string") { if (!pattern0.test(data20)) { validate179.errors = [{ instancePath: instancePath + "/leveraged_authorizations/" + i2 + "/party_uuid", schemaPath: "#/properties/leveraged_authorizations/items/properties/party_uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate179.errors = [{ instancePath: instancePath + "/leveraged_authorizations/" + i2 + "/party_uuid", schemaPath: "#/properties/leveraged_authorizations/items/properties/party_uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid6 = _errs45 === errors; } else { var valid6 = true; } if (valid6) { if (data9.date_authorized !== undefined) { let data21 = data9.date_authorized; const _errs47 = errors; const _errs48 = errors; if (errors === _errs48) { if (errors === _errs48) { if (typeof data21 === "string") { if (!pattern164.test(data21)) { validate179.errors = [{ instancePath: instancePath + "/leveraged_authorizations/" + i2 + "/date_authorized", schemaPath: "#/definitions/date_authorized/pattern", keyword: "pattern", params: { pattern: "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))(Z|[+-][0-9]{2}:[0-9]{2})?$" }, message: "must match pattern \"" + "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))(Z|[+-][0-9]{2}:[0-9]{2})?$" + "\"" }]; return false; } else { if (!(formats92.validate(data21))) { validate179.errors = [{ instancePath: instancePath + "/leveraged_authorizations/" + i2 + "/date_authorized", schemaPath: "#/definitions/date_authorized/format", keyword: "format", params: { format: "date" }, message: "must match format \"" + "date" + "\"" }]; return false; } } } else { validate179.errors = [{ instancePath: instancePath + "/leveraged_authorizations/" + i2 + "/date_authorized", schemaPath: "#/definitions/date_authorized/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid6 = _errs47 === errors; } else { var valid6 = true; } if (valid6) { if (data9.remarks !== undefined) { const _errs50 = errors; if (typeof data9.remarks !== "string") { validate179.errors = [{ instancePath: instancePath + "/leveraged_authorizations/" + i2 + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid6 = _errs50 === errors; } else { var valid6 = true; } } } } } } } } } } else { validate179.errors = [{ instancePath: instancePath + "/leveraged_authorizations/" + i2, schemaPath: "#/properties/leveraged_authorizations/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid5 = _errs21 === errors; if (!valid5) { break; } } } } else { validate179.errors = [{ instancePath: instancePath + "/leveraged_authorizations", schemaPath: "#/properties/leveraged_authorizations/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs19 === errors; } else { var valid0 = true; } if (valid0) { if (data.users !== undefined) { let data23 = data.users; const _errs53 = errors; if (errors === _errs53) { if (Array.isArray(data23)) { if (data23.length < 1) { validate179.errors = [{ instancePath: instancePath + "/users", schemaPath: "#/properties/users/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid13 = true; const len5 = data23.length; for (let i5 = 0; i5 < len5; i5++) { const _errs55 = errors; if (!(validate182(data23[i5], { instancePath: instancePath + "/users/" + i5, parentData: data23, parentDataProperty: i5, rootData }))) { vErrors = vErrors === null ? validate182.errors : vErrors.concat(validate182.errors); errors = vErrors.length; } var valid13 = _errs55 === errors; if (!valid13) { break; } } } } else { validate179.errors = [{ instancePath: instancePath + "/users", schemaPath: "#/properties/users/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs53 === errors; } else { var valid0 = true; } if (valid0) { if (data.components !== undefined) { let data25 = data.components; const _errs56 = errors; if (errors === _errs56) { if (Array.isArray(data25)) { if (data25.length < 1) { validate179.errors = [{ instancePath: instancePath + "/components", schemaPath: "#/properties/components/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid14 = true; const len6 = data25.length; for (let i6 = 0; i6 < len6; i6++) { const _errs58 = errors; if (!(validate187(data25[i6], { instancePath: instancePath + "/components/" + i6, parentData: data25, parentDataProperty: i6, rootData }))) { vErrors = vErrors === null ? validate187.errors : vErrors.concat(validate187.errors); errors = vErrors.length; } var valid14 = _errs58 === errors; if (!valid14) { break; } } } } else { validate179.errors = [{ instancePath: instancePath + "/components", schemaPath: "#/properties/components/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs56 === errors; } else { var valid0 = true; } if (valid0) { if (data.inventory_items !== undefined) { let data27 = data.inventory_items; const _errs59 = errors; if (errors === _errs59) { if (Array.isArray(data27)) { if (data27.length < 1) { validate179.errors = [{ instancePath: instancePath + "/inventory_items", schemaPath: "#/properties/inventory_items/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid15 = true; const len7 = data27.length; for (let i7 = 0; i7 < len7; i7++) { const _errs61 = errors; if (!(validate192(data27[i7], { instancePath: instancePath + "/inventory_items/" + i7, parentData: data27, parentDataProperty: i7, rootData }))) { vErrors = vErrors === null ? validate192.errors : vErrors.concat(validate192.errors); errors = vErrors.length; } var valid15 = _errs61 === errors; if (!valid15) { break; } } } } else { validate179.errors = [{ instancePath: instancePath + "/inventory_items", schemaPath: "#/properties/inventory_items/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs59 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs62 = errors; if (typeof data.remarks !== "string") { validate179.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs62 === errors; } else { var valid0 = true; } } } } } } } } } } else { validate179.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate179.errors = vErrors; return errors === 0; } function validate148(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/system_security_plan" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if (((((((data.uuid === undefined) && (missing0 = "uuid")) || ((data.metadata === undefined) && (missing0 = "metadata"))) || ((data.import_profile === undefined) && (missing0 = "import_profile"))) || ((data.system_characteristics === undefined) && (missing0 = "system_characteristics"))) || ((data.system_implementation === undefined) && (missing0 = "system_implementation"))) || ((data.control_implementation === undefined) && (missing0 = "control_implementation"))) { validate148.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(((((((key0 === "uuid") || (key0 === "metadata")) || (key0 === "import_profile")) || (key0 === "system_characteristics")) || (key0 === "system_implementation")) || (key0 === "control_implementation")) || (key0 === "back_matter"))) { validate148.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.uuid !== undefined) { let data0 = data.uuid; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern0.test(data0)) { validate148.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate148.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.metadata !== undefined) { const _errs4 = errors; if (!(validate22(data.metadata, { instancePath: instancePath + "/metadata", parentData: data, parentDataProperty: "metadata", rootData }))) { vErrors = vErrors === null ? validate22.errors : vErrors.concat(validate22.errors); errors = vErrors.length; } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.import_profile !== undefined) { const _errs5 = errors; if (!(validate150(data.import_profile, { instancePath: instancePath + "/import_profile", parentData: data, parentDataProperty: "import_profile", rootData }))) { vErrors = vErrors === null ? validate150.errors : vErrors.concat(validate150.errors); errors = vErrors.length; } var valid0 = _errs5 === errors; } else { var valid0 = true; } if (valid0) { if (data.system_characteristics !== undefined) { const _errs6 = errors; if (!(validate152(data.system_characteristics, { instancePath: instancePath + "/system_characteristics", parentData: data, parentDataProperty: "system_characteristics", rootData }))) { vErrors = vErrors === null ? validate152.errors : vErrors.concat(validate152.errors); errors = vErrors.length; } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.system_implementation !== undefined) { const _errs7 = errors; if (!(validate179(data.system_implementation, { instancePath: instancePath + "/system_implementation", parentData: data, parentDataProperty: "system_implementation", rootData }))) { vErrors = vErrors === null ? validate179.errors : vErrors.concat(validate179.errors); errors = vErrors.length; } var valid0 = _errs7 === errors; } else { var valid0 = true; } if (valid0) { if (data.control_implementation !== undefined) { const _errs8 = errors; if (!(validate141(data.control_implementation, { instancePath: instancePath + "/control_implementation", parentData: data, parentDataProperty: "control_implementation", rootData }))) { vErrors = vErrors === null ? validate141.errors : vErrors.concat(validate141.errors); errors = vErrors.length; } var valid0 = _errs8 === errors; } else { var valid0 = true; } if (valid0) { if (data.back_matter !== undefined) { const _errs9 = errors; if (!(validate62(data.back_matter, { instancePath: instancePath + "/back_matter", parentData: data, parentDataProperty: "back_matter", rootData }))) { vErrors = vErrors === null ? validate62.errors : vErrors.concat(validate62.errors); errors = vErrors.length; } var valid0 = _errs9 === errors; } else { var valid0 = true; } } } } } } } } } } else { validate148.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate148.errors = vErrors; return errors === 0; } const schema202 = { "title": "Security Assessment Plan (SAP)", "description": "An assessment plan, such as those provided by a FedRAMP assessor.", "$id": "#/definitions/assessment_plan", "type": "object", "properties": { "uuid": { "title": "Assessment Plan Universally Unique Identifier", "description": "Uniquely identifies this assessment plan. This UUID must be changed each time the content of the plan changes.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "metadata": { "$ref": "#/definitions/metadata" }, "import_ssp": { "$ref": "#/definitions/import_ssp" }, "local_definitions": { "title": "Local Definitions", "description": "Used to define data objects that are used in the assessment plan, that do not appear in the referenced SSP.", "type": "object", "properties": { "components": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/system_component" } }, "inventory_items": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/inventory_item" } }, "users": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/system_user" } }, "objectives_and_methods": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/local_objective" } }, "activities": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/activity" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "additionalProperties": false }, "terms_and_conditions": { "title": "Assessment Plan Terms and Conditions", "description": "Used to define various terms and conditions under which an assessment, described by the plan, can be performed. Each child part defines a different type of term or condition.", "type": "object", "properties": { "parts": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/assessment_part" } } }, "additionalProperties": false }, "reviewed_controls": { "$ref": "#/definitions/reviewed_controls" }, "assessment_subjects": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/assessment_subject" } }, "assessment_assets": { "$ref": "#/definitions/assessment_assets" }, "tasks": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/task" } }, "back_matter": { "$ref": "#/definitions/back_matter" } }, "required": ["uuid", "metadata", "import_ssp", "reviewed_controls"], "additionalProperties": false }; const schema203 = { "title": "Import System Security Plan", "description": "Used by the assessment plan and POA&M to import information about the system.", "$id": "#/definitions/import_ssp", "type": "object", "properties": { "href": { "title": "System Security Plan Reference", "description": ">A resolvable URL reference to the system security plan for the system being assessed.", "type": "string", "format": "uri-reference" }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["href"], "additionalProperties": false }; function validate204(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/import_ssp" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((data.href === undefined) && (missing0 = "href")) { validate204.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!((key0 === "href") || (key0 === "remarks"))) { validate204.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.href !== undefined) { let data0 = data.href; const _errs2 = errors; if (errors === _errs2) { if (errors === _errs2) { if (typeof data0 === "string") { if (!(formats10.test(data0))) { validate204.errors = [{ instancePath: instancePath + "/href", schemaPath: "#/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate204.errors = [{ instancePath: instancePath + "/href", schemaPath: "#/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs4 = errors; if (typeof data.remarks !== "string") { validate204.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs4 === errors; } else { var valid0 = true; } } } } } else { validate204.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate204.errors = vErrors; return errors === 0; } const schema205 = { "title": "Assessment_Specific Control Objective", "description": "A local definition of a control objective for this assessment. Uses catalog syntax for control objective and assessment actions.", "$id": "#/definitions/local_objective", "type": "object", "properties": { "control_id": { "title": "Control Identifier Reference", "description": "A reference to a control with a corresponding id value.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "description": { "title": "Objective Description", "description": "A human_readable description of this control objective.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "parts": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/part" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["control_id", "parts"], "additionalProperties": false }; function validate209(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/local_objective" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if (((data.control_id === undefined) && (missing0 = "control_id")) || ((data.parts === undefined) && (missing0 = "parts"))) { validate209.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!((((((key0 === "control_id") || (key0 === "description")) || (key0 === "props")) || (key0 === "links")) || (key0 === "parts")) || (key0 === "remarks"))) { validate209.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.control_id !== undefined) { let data0 = data.control_id; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern9.test(data0)) { validate209.errors = [{ instancePath: instancePath + "/control_id", schemaPath: "#/properties/control_id/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate209.errors = [{ instancePath: instancePath + "/control_id", schemaPath: "#/properties/control_id/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.description !== undefined) { const _errs4 = errors; if (typeof data.description !== "string") { validate209.errors = [{ instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data2 = data.props; const _errs6 = errors; if (errors === _errs6) { if (Array.isArray(data2)) { if (data2.length < 1) { validate209.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data2.length; for (let i0 = 0; i0 < len0; i0++) { const _errs8 = errors; if (!(validate24(data2[i0], { instancePath: instancePath + "/props/" + i0, parentData: data2, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs8 === errors; if (!valid1) { break; } } } } else { validate209.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data4 = data.links; const _errs9 = errors; if (errors === _errs9) { if (Array.isArray(data4)) { if (data4.length < 1) { validate209.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data4.length; for (let i1 = 0; i1 < len1; i1++) { let data5 = data4[i1]; const _errs11 = errors; const _errs12 = errors; if (errors === _errs12) { if (data5 && typeof data5 == "object" && !Array.isArray(data5)) { let missing1; if ((data5.href === undefined) && (missing1 = "href")) { validate209.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs14 = errors; for (const key1 in data5) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate209.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs14 === errors) { if (data5.href !== undefined) { let data6 = data5.href; const _errs15 = errors; if (errors === _errs15) { if (errors === _errs15) { if (typeof data6 === "string") { if (!(formats10.test(data6))) { validate209.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate209.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid4 = _errs15 === errors; } else { var valid4 = true; } if (valid4) { if (data5.rel !== undefined) { let data7 = data5.rel; const _errs17 = errors; if (errors === _errs17) { if (typeof data7 === "string") { if (!pattern9.test(data7)) { validate209.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate209.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs17 === errors; } else { var valid4 = true; } if (valid4) { if (data5.media_type !== undefined) { let data8 = data5.media_type; const _errs19 = errors; if (errors === _errs19) { if (typeof data8 === "string") { if (!pattern3.test(data8)) { validate209.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate209.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs19 === errors; } else { var valid4 = true; } if (valid4) { if (data5.text !== undefined) { const _errs21 = errors; if (typeof data5.text !== "string") { validate209.errors = [{ instancePath: instancePath + "/links/" + i1 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid4 = _errs21 === errors; } else { var valid4 = true; } } } } } } } else { validate209.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs11 === errors; if (!valid2) { break; } } } } else { validate209.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs9 === errors; } else { var valid0 = true; } if (valid0) { if (data.parts !== undefined) { let data10 = data.parts; const _errs23 = errors; if (errors === _errs23) { if (Array.isArray(data10)) { if (data10.length < 1) { validate209.errors = [{ instancePath: instancePath + "/parts", schemaPath: "#/properties/parts/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid5 = true; const len2 = data10.length; for (let i2 = 0; i2 < len2; i2++) { const _errs25 = errors; if (!(validate52(data10[i2], { instancePath: instancePath + "/parts/" + i2, parentData: data10, parentDataProperty: i2, rootData }))) { vErrors = vErrors === null ? validate52.errors : vErrors.concat(validate52.errors); errors = vErrors.length; } var valid5 = _errs25 === errors; if (!valid5) { break; } } } } else { validate209.errors = [{ instancePath: instancePath + "/parts", schemaPath: "#/properties/parts/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs23 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs26 = errors; if (typeof data.remarks !== "string") { validate209.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs26 === errors; } else { var valid0 = true; } } } } } } } } } else { validate209.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate209.errors = vErrors; return errors === 0; } const schema208 = { "title": "Activity", "description": "Identifies an assessment or related process that can be performed. In the assessment plan, this is an intended activity which may be associated with an assessment task. In the assessment results, this an activity that was actually performed as part of an assessment.", "$id": "#/definitions/activity", "type": "object", "properties": { "uuid": { "title": "Assessment Activity Universally Unique Identifier", "description": "Uniquely identifies this assessment activity. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. A UUID should be consistently used for a given included activity across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "title": { "title": "Included Activity Title", "description": "The title for this included activity.", "type": "string" }, "description": { "title": "Included Activity Description", "description": "A human_readable description of this included activity.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "steps": { "type": "array", "minItems": 1, "items": { "title": "Step", "description": "Identifies an individual step in a series of steps related to an activity, such as an assessment test or examination procedure.", "type": "object", "properties": { "uuid": { "title": "Step Universally Unique Identifier", "description": "Uniquely identifies a step. This UUID may be referenced elsewhere in an OSCAL document when referring to this step. A UUID should be consistently used for a given test step across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "title": { "title": "Step Title", "description": "The title for this step.", "type": "string" }, "description": { "title": "Step Description", "description": "A human_readable description of this step.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "reviewed_controls": { "$ref": "#/definitions/reviewed_controls" }, "responsible_roles": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_role" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "description"], "additionalProperties": false } }, "related_controls": { "$ref": "#/definitions/reviewed_controls" }, "responsible_roles": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_role" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "description"], "additionalProperties": false }; const schema211 = { "title": "Reviewed Controls and Control Objectives", "description": "Identifies the controls being assessed and their control objectives.", "$id": "#/definitions/reviewed_controls", "type": "object", "properties": { "description": { "title": "Control Objective Description", "description": "A human_readable description of control objectives.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "control_selections": { "type": "array", "minItems": 1, "items": { "title": "Assessed Controls", "description": "Identifies the controls being assessed. In the assessment plan, these are the planned controls. In the assessment results, these are the actual controls, and reflects any changes from the plan.", "type": "object", "properties": { "description": { "title": "Assessed Controls Description", "description": "A human_readable description of in_scope controls specified for assessment.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "include_all": { "title": "All", "description": "A key word to indicate all.", "type": "object", "additionalProperties": false }, "include_controls": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/select_control_by_id" } }, "exclude_controls": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/select_control_by_id" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "additionalProperties": false } }, "control_objective_selections": { "type": "array", "minItems": 1, "items": { "title": "Referenced Control Objectives", "description": "Identifies the control objectives of the assessment. In the assessment plan, these are the planned objectives. In the assessment results, these are the assessed objectives, and reflects any changes from the plan.", "type": "object", "properties": { "description": { "title": "Control Objectives Description", "description": "A human_readable description of this collection of control objectives.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "include_all": { "title": "All", "description": "A key word to indicate all.", "type": "object", "additionalProperties": false }, "include_objectives": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/select_objective_by_id" } }, "exclude_objectives": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/select_objective_by_id" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "additionalProperties": false } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["control_selections"], "additionalProperties": false }; const schema218 = { "title": "Select Objective", "description": "Used to select a control objective for inclusion/exclusion based on the control objective's identifier.", "$id": "#/definitions/select_objective_by_id", "type": "object", "properties": { "objective_id": { "title": "Objective ID", "description": "Points to an assessment objective.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" } }, "required": ["objective_id"], "additionalProperties": false }; function validate216(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/reviewed_controls" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((data.control_selections === undefined) && (missing0 = "control_selections")) { validate216.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!((((((key0 === "description") || (key0 === "props")) || (key0 === "links")) || (key0 === "control_selections")) || (key0 === "control_objective_selections")) || (key0 === "remarks"))) { validate216.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.description !== undefined) { const _errs2 = errors; if (typeof data.description !== "string") { validate216.errors = [{ instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data1 = data.props; const _errs4 = errors; if (errors === _errs4) { if (Array.isArray(data1)) { if (data1.length < 1) { validate216.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data1.length; for (let i0 = 0; i0 < len0; i0++) { const _errs6 = errors; if (!(validate24(data1[i0], { instancePath: instancePath + "/props/" + i0, parentData: data1, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs6 === errors; if (!valid1) { break; } } } } else { validate216.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data3 = data.links; const _errs7 = errors; if (errors === _errs7) { if (Array.isArray(data3)) { if (data3.length < 1) { validate216.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data3.length; for (let i1 = 0; i1 < len1; i1++) { let data4 = data3[i1]; const _errs9 = errors; const _errs10 = errors; if (errors === _errs10) { if (data4 && typeof data4 == "object" && !Array.isArray(data4)) { let missing1; if ((data4.href === undefined) && (missing1 = "href")) { validate216.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs12 = errors; for (const key1 in data4) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate216.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs12 === errors) { if (data4.href !== undefined) { let data5 = data4.href; const _errs13 = errors; if (errors === _errs13) { if (errors === _errs13) { if (typeof data5 === "string") { if (!(formats10.test(data5))) { validate216.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate216.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid4 = _errs13 === errors; } else { var valid4 = true; } if (valid4) { if (data4.rel !== undefined) { let data6 = data4.rel; const _errs15 = errors; if (errors === _errs15) { if (typeof data6 === "string") { if (!pattern9.test(data6)) { validate216.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate216.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs15 === errors; } else { var valid4 = true; } if (valid4) { if (data4.media_type !== undefined) { let data7 = data4.media_type; const _errs17 = errors; if (errors === _errs17) { if (typeof data7 === "string") { if (!pattern3.test(data7)) { validate216.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate216.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs17 === errors; } else { var valid4 = true; } if (valid4) { if (data4.text !== undefined) { const _errs19 = errors; if (typeof data4.text !== "string") { validate216.errors = [{ instancePath: instancePath + "/links/" + i1 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid4 = _errs19 === errors; } else { var valid4 = true; } } } } } } } else { validate216.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs9 === errors; if (!valid2) { break; } } } } else { validate216.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs7 === errors; } else { var valid0 = true; } if (valid0) { if (data.control_selections !== undefined) { let data9 = data.control_selections; const _errs21 = errors; if (errors === _errs21) { if (Array.isArray(data9)) { if (data9.length < 1) { validate216.errors = [{ instancePath: instancePath + "/control_selections", schemaPath: "#/properties/control_selections/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid5 = true; const len2 = data9.length; for (let i2 = 0; i2 < len2; i2++) { let data10 = data9[i2]; const _errs23 = errors; if (errors === _errs23) { if (data10 && typeof data10 == "object" && !Array.isArray(data10)) { const _errs25 = errors; for (const key2 in data10) { if (!(((((((key2 === "description") || (key2 === "props")) || (key2 === "links")) || (key2 === "include_all")) || (key2 === "include_controls")) || (key2 === "exclude_controls")) || (key2 === "remarks"))) { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2, schemaPath: "#/properties/control_selections/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs25 === errors) { if (data10.description !== undefined) { const _errs26 = errors; if (typeof data10.description !== "string") { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/description", schemaPath: "#/properties/control_selections/items/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid6 = _errs26 === errors; } else { var valid6 = true; } if (valid6) { if (data10.props !== undefined) { let data12 = data10.props; const _errs28 = errors; if (errors === _errs28) { if (Array.isArray(data12)) { if (data12.length < 1) { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/props", schemaPath: "#/properties/control_selections/items/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid7 = true; const len3 = data12.length; for (let i3 = 0; i3 < len3; i3++) { const _errs30 = errors; if (!(validate24(data12[i3], { instancePath: instancePath + "/control_selections/" + i2 + "/props/" + i3, parentData: data12, parentDataProperty: i3, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid7 = _errs30 === errors; if (!valid7) { break; } } } } else { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/props", schemaPath: "#/properties/control_selections/items/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid6 = _errs28 === errors; } else { var valid6 = true; } if (valid6) { if (data10.links !== undefined) { let data14 = data10.links; const _errs31 = errors; if (errors === _errs31) { if (Array.isArray(data14)) { if (data14.length < 1) { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/links", schemaPath: "#/properties/control_selections/items/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid8 = true; const len4 = data14.length; for (let i4 = 0; i4 < len4; i4++) { let data15 = data14[i4]; const _errs33 = errors; const _errs34 = errors; if (errors === _errs34) { if (data15 && typeof data15 == "object" && !Array.isArray(data15)) { let missing2; if ((data15.href === undefined) && (missing2 = "href")) { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/links/" + i4, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" }]; return false; } else { const _errs36 = errors; for (const key3 in data15) { if (!((((key3 === "href") || (key3 === "rel")) || (key3 === "media_type")) || (key3 === "text"))) { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/links/" + i4, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key3 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs36 === errors) { if (data15.href !== undefined) { let data16 = data15.href; const _errs37 = errors; if (errors === _errs37) { if (errors === _errs37) { if (typeof data16 === "string") { if (!(formats10.test(data16))) { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/links/" + i4 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/links/" + i4 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid10 = _errs37 === errors; } else { var valid10 = true; } if (valid10) { if (data15.rel !== undefined) { let data17 = data15.rel; const _errs39 = errors; if (errors === _errs39) { if (typeof data17 === "string") { if (!pattern9.test(data17)) { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/links/" + i4 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/links/" + i4 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid10 = _errs39 === errors; } else { var valid10 = true; } if (valid10) { if (data15.media_type !== undefined) { let data18 = data15.media_type; const _errs41 = errors; if (errors === _errs41) { if (typeof data18 === "string") { if (!pattern3.test(data18)) { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/links/" + i4 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/links/" + i4 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid10 = _errs41 === errors; } else { var valid10 = true; } if (valid10) { if (data15.text !== undefined) { const _errs43 = errors; if (typeof data15.text !== "string") { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/links/" + i4 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid10 = _errs43 === errors; } else { var valid10 = true; } } } } } } } else { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/links/" + i4, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid8 = _errs33 === errors; if (!valid8) { break; } } } } else { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/links", schemaPath: "#/properties/control_selections/items/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid6 = _errs31 === errors; } else { var valid6 = true; } if (valid6) { if (data10.include_all !== undefined) { let data20 = data10.include_all; const _errs45 = errors; if (errors === _errs45) { if (data20 && typeof data20 == "object" && !Array.isArray(data20)) { for (const key4 in data20) { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/include_all", schemaPath: "#/properties/control_selections/items/properties/include_all/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key4 }, message: "must NOT have additional properties" }]; return false; break; } } else { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/include_all", schemaPath: "#/properties/control_selections/items/properties/include_all/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid6 = _errs45 === errors; } else { var valid6 = true; } if (valid6) { if (data10.include_controls !== undefined) { let data21 = data10.include_controls; const _errs48 = errors; if (errors === _errs48) { if (Array.isArray(data21)) { if (data21.length < 1) { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/include_controls", schemaPath: "#/properties/control_selections/items/properties/include_controls/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid11 = true; const len5 = data21.length; for (let i5 = 0; i5 < len5; i5++) { let data22 = data21[i5]; const _errs50 = errors; const _errs51 = errors; if (errors === _errs51) { if (data22 && typeof data22 == "object" && !Array.isArray(data22)) { let missing3; if ((data22.control_id === undefined) && (missing3 = "control_id")) { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/include_controls/" + i5, schemaPath: "#/definitions/select_control_by_id/required", keyword: "required", params: { missingProperty: missing3 }, message: "must have required property '" + missing3 + "'" }]; return false; } else { const _errs53 = errors; for (const key5 in data22) { if (!((key5 === "control_id") || (key5 === "statement_ids"))) { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/include_controls/" + i5, schemaPath: "#/definitions/select_control_by_id/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key5 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs53 === errors) { if (data22.control_id !== undefined) { let data23 = data22.control_id; const _errs54 = errors; if (errors === _errs54) { if (typeof data23 === "string") { if (!pattern9.test(data23)) { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/include_controls/" + i5 + "/control_id", schemaPath: "#/definitions/select_control_by_id/properties/control_id/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/include_controls/" + i5 + "/control_id", schemaPath: "#/definitions/select_control_by_id/properties/control_id/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid13 = _errs54 === errors; } else { var valid13 = true; } if (valid13) { if (data22.statement_ids !== undefined) { let data24 = data22.statement_ids; const _errs56 = errors; if (errors === _errs56) { if (Array.isArray(data24)) { if (data24.length < 1) { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/include_controls/" + i5 + "/statement_ids", schemaPath: "#/definitions/select_control_by_id/properties/statement_ids/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid14 = true; const len6 = data24.length; for (let i6 = 0; i6 < len6; i6++) { let data25 = data24[i6]; const _errs58 = errors; if (errors === _errs58) { if (typeof data25 === "string") { if (!pattern9.test(data25)) { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/include_controls/" + i5 + "/statement_ids/" + i6, schemaPath: "#/definitions/select_control_by_id/properties/statement_ids/items/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/include_controls/" + i5 + "/statement_ids/" + i6, schemaPath: "#/definitions/select_control_by_id/properties/statement_ids/items/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid14 = _errs58 === errors; if (!valid14) { break; } } } } else { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/include_controls/" + i5 + "/statement_ids", schemaPath: "#/definitions/select_control_by_id/properties/statement_ids/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid13 = _errs56 === errors; } else { var valid13 = true; } } } } } else { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/include_controls/" + i5, schemaPath: "#/definitions/select_control_by_id/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid11 = _errs50 === errors; if (!valid11) { break; } } } } else { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/include_controls", schemaPath: "#/properties/control_selections/items/properties/include_controls/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid6 = _errs48 === errors; } else { var valid6 = true; } if (valid6) { if (data10.exclude_controls !== undefined) { let data26 = data10.exclude_controls; const _errs60 = errors; if (errors === _errs60) { if (Array.isArray(data26)) { if (data26.length < 1) { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/exclude_controls", schemaPath: "#/properties/control_selections/items/properties/exclude_controls/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid15 = true; const len7 = data26.length; for (let i7 = 0; i7 < len7; i7++) { let data27 = data26[i7]; const _errs62 = errors; const _errs63 = errors; if (errors === _errs63) { if (data27 && typeof data27 == "object" && !Array.isArray(data27)) { let missing4; if ((data27.control_id === undefined) && (missing4 = "control_id")) { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/exclude_controls/" + i7, schemaPath: "#/definitions/select_control_by_id/required", keyword: "required", params: { missingProperty: missing4 }, message: "must have required property '" + missing4 + "'" }]; return false; } else { const _errs65 = errors; for (const key6 in data27) { if (!((key6 === "control_id") || (key6 === "statement_ids"))) { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/exclude_controls/" + i7, schemaPath: "#/definitions/select_control_by_id/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key6 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs65 === errors) { if (data27.control_id !== undefined) { let data28 = data27.control_id; const _errs66 = errors; if (errors === _errs66) { if (typeof data28 === "string") { if (!pattern9.test(data28)) { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/exclude_controls/" + i7 + "/control_id", schemaPath: "#/definitions/select_control_by_id/properties/control_id/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/exclude_controls/" + i7 + "/control_id", schemaPath: "#/definitions/select_control_by_id/properties/control_id/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid17 = _errs66 === errors; } else { var valid17 = true; } if (valid17) { if (data27.statement_ids !== undefined) { let data29 = data27.statement_ids; const _errs68 = errors; if (errors === _errs68) { if (Array.isArray(data29)) { if (data29.length < 1) { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/exclude_controls/" + i7 + "/statement_ids", schemaPath: "#/definitions/select_control_by_id/properties/statement_ids/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid18 = true; const len8 = data29.length; for (let i8 = 0; i8 < len8; i8++) { let data30 = data29[i8]; const _errs70 = errors; if (errors === _errs70) { if (typeof data30 === "string") { if (!pattern9.test(data30)) { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/exclude_controls/" + i7 + "/statement_ids/" + i8, schemaPath: "#/definitions/select_control_by_id/properties/statement_ids/items/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/exclude_controls/" + i7 + "/statement_ids/" + i8, schemaPath: "#/definitions/select_control_by_id/properties/statement_ids/items/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid18 = _errs70 === errors; if (!valid18) { break; } } } } else { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/exclude_controls/" + i7 + "/statement_ids", schemaPath: "#/definitions/select_control_by_id/properties/statement_ids/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid17 = _errs68 === errors; } else { var valid17 = true; } } } } } else { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/exclude_controls/" + i7, schemaPath: "#/definitions/select_control_by_id/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid15 = _errs62 === errors; if (!valid15) { break; } } } } else { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/exclude_controls", schemaPath: "#/properties/control_selections/items/properties/exclude_controls/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid6 = _errs60 === errors; } else { var valid6 = true; } if (valid6) { if (data10.remarks !== undefined) { const _errs72 = errors; if (typeof data10.remarks !== "string") { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2 + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid6 = _errs72 === errors; } else { var valid6 = true; } } } } } } } } } else { validate216.errors = [{ instancePath: instancePath + "/control_selections/" + i2, schemaPath: "#/properties/control_selections/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid5 = _errs23 === errors; if (!valid5) { break; } } } } else { validate216.errors = [{ instancePath: instancePath + "/control_selections", schemaPath: "#/properties/control_selections/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs21 === errors; } else { var valid0 = true; } if (valid0) { if (data.control_objective_selections !== undefined) { let data32 = data.control_objective_selections; const _errs75 = errors; if (errors === _errs75) { if (Array.isArray(data32)) { if (data32.length < 1) { validate216.errors = [{ instancePath: instancePath + "/control_objective_selections", schemaPath: "#/properties/control_objective_selections/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid20 = true; const len9 = data32.length; for (let i9 = 0; i9 < len9; i9++) { let data33 = data32[i9]; const _errs77 = errors; if (errors === _errs77) { if (data33 && typeof data33 == "object" && !Array.isArray(data33)) { const _errs79 = errors; for (const key7 in data33) { if (!(((((((key7 === "description") || (key7 === "props")) || (key7 === "links")) || (key7 === "include_all")) || (key7 === "include_objectives")) || (key7 === "exclude_objectives")) || (key7 === "remarks"))) { validate216.errors = [{ instancePath: instancePath + "/control_objective_selections/" + i9, schemaPath: "#/properties/control_objective_selections/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key7 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs79 === errors) { if (data33.description !== undefined) { const _errs80 = errors; if (typeof data33.description !== "string") { validate216.errors = [{ instancePath: instancePath + "/control_objective_selections/" + i9 + "/description", schemaPath: "#/properties/control_objective_selections/items/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid21 = _errs80 === errors; } else { var valid21 = true; } if (valid21) { if (data33.props !== undefined) { let data35 = data33.props; const _errs82 = errors; if (errors === _errs82) { if (Array.isArray(data35)) { if (data35.length < 1) { validate216.errors = [{ instancePath: instancePath + "/control_objective_selections/" + i9 + "/props", schemaPath: "#/properties/control_objective_selections/items/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid22 = true; const len10 = data35.length; for (let i10 = 0; i10 < len10; i10++) { const _errs84 = errors; if (!(validate24(data35[i10], { instancePath: instancePath + "/control_objective_selections/" + i9 + "/props/" + i10, parentData: data35, parentDataProperty: i10, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid22 = _errs84 === errors; if (!valid22) { break; } } } } else { validate216.errors = [{ instancePath: instancePath + "/control_objective_selections/" + i9 + "/props", schemaPath: "#/properties/control_objective_selections/items/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid21 = _errs82 === errors; } else { var valid21 = true; } if (valid21) { if (data33.links !== undefined) { let data37 = data33.links; const _errs85 = errors; if (errors === _errs85) { if (Array.isArray(data37)) { if (data37.length < 1) { validate216.errors = [{ instancePath: instancePath + "/control_objective_selections/" + i9 + "/links", schemaPath: "#/properties/control_objective_selections/items/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid23 = true; const len11 = data37.length; for (let i11 = 0; i11 < len11; i11++) { let data38 = data37[i11]; const _errs87 = errors; const _errs88 = errors; if (errors === _errs88) { if (data38 && typeof data38 == "object" && !Array.isArray(data38)) { let missing5; if ((data38.href === undefined) && (missing5 = "href")) { validate216.errors = [{ instancePath: instancePath + "/control_objective_selections/" + i9 + "/links/" + i11, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing5 }, message: "must have required property '" + missing5 + "'" }]; return false; } else { const _errs90 = errors; for (const key8 in data38) { if (!((((key8 === "href") || (key8 === "rel")) || (key8 === "media_type")) || (key8 === "text"))) { validate216.errors = [{ instancePath: instancePath + "/control_objective_selections/" + i9 + "/links/" + i11, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key8 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs90 === errors) { if (data38.href !== undefined) { let data39 = data38.href; const _errs91 = errors; if (errors === _errs91) { if (errors === _errs91) { if (typeof data39 === "string") { if (!(formats10.test(data39))) { validate216.errors = [{ instancePath: instancePath + "/control_objective_selections/" + i9 + "/links/" + i11 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate216.errors = [{ instancePath: instancePath + "/control_objective_selections/" + i9 + "/links/" + i11 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid25 = _errs91 === errors; } else { var valid25 = true; } if (valid25) { if (data38.rel !== undefined) { let data40 = data38.rel; const _errs93 = errors; if (errors === _errs93) { if (typeof data40 === "string") { if (!pattern9.test(data40)) { validate216.errors = [{ instancePath: instancePath + "/control_objective_selections/" + i9 + "/links/" + i11 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate216.errors = [{ instancePath: instancePath + "/control_objective_selections/" + i9 + "/links/" + i11 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid25 = _errs93 === errors; } else { var valid25 = true; } if (valid25) { if (data38.media_type !== undefined) { let data41 = data38.media_type; const _errs95 = errors; if (errors === _errs95) { if (typeof data41 === "string") { if (!pattern3.test(data41)) { validate216.errors = [{ instancePath: instancePath + "/control_objective_selections/" + i9 + "/links/" + i11 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate216.errors = [{ instancePath: instancePath + "/control_objective_selections/" + i9 + "/links/" + i11 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid25 = _errs95 === errors; } else { var valid25 = true; } if (valid25) { if (data38.text !== undefined) { const _errs97 = errors; if (typeof data38.text !== "string") { validate216.errors = [{ instancePath: instancePath + "/control_objective_selections/" + i9 + "/links/" + i11 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid25 = _errs97 === errors; } else { var valid25 = true; } } } } } } } else { validate216.errors = [{ instancePath: instancePath + "/control_objective_selections/" + i9 + "/links/" + i11, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid23 = _errs87 === errors; if (!valid23) { break; } } } } else { validate216.errors = [{ instancePath: instancePath + "/control_objective_selections/" + i9 + "/links", schemaPath: "#/properties/control_objective_selections/items/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid21 = _errs85 === errors; } else { var valid21 = true; } if (valid21) { if (data33.include_all !== undefined) { let data43 = data33.include_all; const _errs99 = errors; if (errors === _errs99) { if (data43 && typeof data43 == "object" && !Array.isArray(data43)) { for (const key9 in data43) { validate216.errors = [{ instancePath: instancePath + "/control_objective_selections/" + i9 + "/include_all", schemaPath: "#/properties/control_objective_selections/items/properties/include_all/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key9 }, message: "must NOT have additional properties" }]; return false; break; } } else { validate216.errors = [{ instancePath: instancePath + "/control_objective_selections/" + i9 + "/include_all", schemaPath: "#/properties/control_objective_selections/items/properties/include_all/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid21 = _errs99 === errors; } else { var valid21 = true; } if (valid21) { if (data33.include_objectives !== undefined) { let data44 = data33.include_objectives; const _errs102 = errors; if (errors === _errs102) { if (Array.isArray(data44)) { if (data44.length < 1) { validate216.errors = [{ instancePath: instancePath + "/control_objective_selections/" + i9 + "/include_objectives", schemaPath: "#/properties/control_objective_selections/items/properties/include_objectives/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid26 = true; const len12 = data44.length; for (let i12 = 0; i12 < len12; i12++) { let data45 = data44[i12]; const _errs104 = errors; const _errs105 = errors; if (errors === _errs105) { if (data45 && typeof data45 == "object" && !Array.isArray(data45)) { let missing6; if ((data45.objective_id === undefined) && (missing6 = "objective_id")) { validate216.errors = [{ instancePath: instancePath + "/control_objective_selections/" + i9 + "/include_objectives/" + i12, schemaPath: "#/definitions/select_objective_by_id/required", keyword: "required", params: { missingProperty: missing6 }, message: "must have required property '" + missing6 + "'" }]; return false; } else { const _errs107 = errors; for (const key10 in data45) { if (!(key10 === "objective_id")) { validate216.errors = [{ instancePath: instancePath + "/control_objective_selections/" + i9 + "/include_objectives/" + i12, schemaPath: "#/definitions/select_objective_by_id/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key10 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs107 === errors) { if (data45.objective_id !== undefined) { let data46 = data45.objective_id; const _errs108 = errors; if (errors === _errs108) { if (typeof data46 === "string") { if (!pattern9.test(data46)) { validate216.errors = [{ instancePath: instancePath + "/control_objective_selections/" + i9 + "/include_objectives/" + i12 + "/objective_id", schemaPath: "#/definitions/select_objective_by_id/properties/objective_id/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate216.errors = [{ instancePath: instancePath + "/control_objective_selections/" + i9 + "/include_objectives/" + i12 + "/objective_id", schemaPath: "#/definitions/select_objective_by_id/properties/objective_id/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } } } } else { validate216.errors = [{ instancePath: instancePath + "/control_objective_selections/" + i9 + "/include_objectives/" + i12, schemaPath: "#/definitions/select_objective_by_id/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid26 = _errs104 === errors; if (!valid26) { break; } } } } else { validate216.errors = [{ instancePath: instancePath + "/control_objective_selections/" + i9 + "/include_objectives", schemaPath: "#/properties/control_objective_selections/items/properties/include_objectives/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid21 = _errs102 === errors; } else { var valid21 = true; } if (valid21) { if (data33.exclude_objectives !== undefined) { let data47 = data33.exclude_objectives; const _errs110 = errors; if (errors === _errs110) { if (Array.isArray(data47)) { if (data47.length < 1) { validate216.errors = [{ instancePath: instancePath + "/control_objective_selections/" + i9 + "/exclude_objectives", schemaPath: "#/properties/control_objective_selections/items/properties/exclude_objectives/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid29 = true; const len13 = data47.length; for (let i13 = 0; i13 < len13; i13++) { let data48 = data47[i13]; const _errs112 = errors; const _errs113 = errors; if (errors === _errs113) { if (data48 && typeof data48 == "object" && !Array.isArray(data48)) { let missing7; if ((data48.objective_id === undefined) && (missing7 = "objective_id")) { validate216.errors = [{ instancePath: instancePath + "/control_objective_selections/" + i9 + "/exclude_objectives/" + i13, schemaPath: "#/definitions/select_objective_by_id/required", keyword: "required", params: { missingProperty: missing7 }, message: "must have required property '" + missing7 + "'" }]; return false; } else { const _errs115 = errors; for (const key11 in data48) { if (!(key11 === "objective_id")) { validate216.errors = [{ instancePath: instancePath + "/control_objective_selections/" + i9 + "/exclude_objectives/" + i13, schemaPath: "#/definitions/select_objective_by_id/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key11 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs115 === errors) { if (data48.objective_id !== undefined) { let data49 = data48.objective_id; const _errs116 = errors; if (errors === _errs116) { if (typeof data49 === "string") { if (!pattern9.test(data49)) { validate216.errors = [{ instancePath: instancePath + "/control_objective_selections/" + i9 + "/exclude_objectives/" + i13 + "/objective_id", schemaPath: "#/definitions/select_objective_by_id/properties/objective_id/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate216.errors = [{ instancePath: instancePath + "/control_objective_selections/" + i9 + "/exclude_objectives/" + i13 + "/objective_id", schemaPath: "#/definitions/select_objective_by_id/properties/objective_id/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } } } } else { validate216.errors = [{ instancePath: instancePath + "/control_objective_selections/" + i9 + "/exclude_objectives/" + i13, schemaPath: "#/definitions/select_objective_by_id/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid29 = _errs112 === errors; if (!valid29) { break; } } } } else { validate216.errors = [{ instancePath: instancePath + "/control_objective_selections/" + i9 + "/exclude_objectives", schemaPath: "#/properties/control_objective_selections/items/properties/exclude_objectives/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid21 = _errs110 === errors; } else { var valid21 = true; } if (valid21) { if (data33.remarks !== undefined) { const _errs118 = errors; if (typeof data33.remarks !== "string") { validate216.errors = [{ instancePath: instancePath + "/control_objective_selections/" + i9 + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid21 = _errs118 === errors; } else { var valid21 = true; } } } } } } } } } else { validate216.errors = [{ instancePath: instancePath + "/control_objective_selections/" + i9, schemaPath: "#/properties/control_objective_selections/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid20 = _errs77 === errors; if (!valid20) { break; } } } } else { validate216.errors = [{ instancePath: instancePath + "/control_objective_selections", schemaPath: "#/properties/control_objective_selections/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs75 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs121 = errors; if (typeof data.remarks !== "string") { validate216.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs121 === errors; } else { var valid0 = true; } } } } } } } } } else { validate216.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate216.errors = vErrors; return errors === 0; } function validate213(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/activity" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if (((data.uuid === undefined) && (missing0 = "uuid")) || ((data.description === undefined) && (missing0 = "description"))) { validate213.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(func8.call(schema208.properties, key0))) { validate213.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.uuid !== undefined) { let data0 = data.uuid; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern0.test(data0)) { validate213.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate213.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.title !== undefined) { const _errs4 = errors; if (typeof data.title !== "string") { validate213.errors = [{ instancePath: instancePath + "/title", schemaPath: "#/properties/title/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.description !== undefined) { const _errs6 = errors; if (typeof data.description !== "string") { validate213.errors = [{ instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data3 = data.props; const _errs8 = errors; if (errors === _errs8) { if (Array.isArray(data3)) { if (data3.length < 1) { validate213.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data3.length; for (let i0 = 0; i0 < len0; i0++) { const _errs10 = errors; if (!(validate24(data3[i0], { instancePath: instancePath + "/props/" + i0, parentData: data3, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs10 === errors; if (!valid1) { break; } } } } else { validate213.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs8 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data5 = data.links; const _errs11 = errors; if (errors === _errs11) { if (Array.isArray(data5)) { if (data5.length < 1) { validate213.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data5.length; for (let i1 = 0; i1 < len1; i1++) { let data6 = data5[i1]; const _errs13 = errors; const _errs14 = errors; if (errors === _errs14) { if (data6 && typeof data6 == "object" && !Array.isArray(data6)) { let missing1; if ((data6.href === undefined) && (missing1 = "href")) { validate213.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs16 = errors; for (const key1 in data6) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate213.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs16 === errors) { if (data6.href !== undefined) { let data7 = data6.href; const _errs17 = errors; if (errors === _errs17) { if (errors === _errs17) { if (typeof data7 === "string") { if (!(formats10.test(data7))) { validate213.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate213.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid4 = _errs17 === errors; } else { var valid4 = true; } if (valid4) { if (data6.rel !== undefined) { let data8 = data6.rel; const _errs19 = errors; if (errors === _errs19) { if (typeof data8 === "string") { if (!pattern9.test(data8)) { validate213.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate213.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs19 === errors; } else { var valid4 = true; } if (valid4) { if (data6.media_type !== undefined) { let data9 = data6.media_type; const _errs21 = errors; if (errors === _errs21) { if (typeof data9 === "string") { if (!pattern3.test(data9)) { validate213.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate213.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs21 === errors; } else { var valid4 = true; } if (valid4) { if (data6.text !== undefined) { const _errs23 = errors; if (typeof data6.text !== "string") { validate213.errors = [{ instancePath: instancePath + "/links/" + i1 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid4 = _errs23 === errors; } else { var valid4 = true; } } } } } } } else { validate213.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs13 === errors; if (!valid2) { break; } } } } else { validate213.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs11 === errors; } else { var valid0 = true; } if (valid0) { if (data.steps !== undefined) { let data11 = data.steps; const _errs25 = errors; if (errors === _errs25) { if (Array.isArray(data11)) { if (data11.length < 1) { validate213.errors = [{ instancePath: instancePath + "/steps", schemaPath: "#/properties/steps/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid5 = true; const len2 = data11.length; for (let i2 = 0; i2 < len2; i2++) { let data12 = data11[i2]; const _errs27 = errors; if (errors === _errs27) { if (data12 && typeof data12 == "object" && !Array.isArray(data12)) { let missing2; if (((data12.uuid === undefined) && (missing2 = "uuid")) || ((data12.description === undefined) && (missing2 = "description"))) { validate213.errors = [{ instancePath: instancePath + "/steps/" + i2, schemaPath: "#/properties/steps/items/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" }]; return false; } else { const _errs29 = errors; for (const key2 in data12) { if (!((((((((key2 === "uuid") || (key2 === "title")) || (key2 === "description")) || (key2 === "props")) || (key2 === "links")) || (key2 === "reviewed_controls")) || (key2 === "responsible_roles")) || (key2 === "remarks"))) { validate213.errors = [{ instancePath: instancePath + "/steps/" + i2, schemaPath: "#/properties/steps/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs29 === errors) { if (data12.uuid !== undefined) { let data13 = data12.uuid; const _errs30 = errors; if (errors === _errs30) { if (typeof data13 === "string") { if (!pattern0.test(data13)) { validate213.errors = [{ instancePath: instancePath + "/steps/" + i2 + "/uuid", schemaPath: "#/properties/steps/items/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate213.errors = [{ instancePath: instancePath + "/steps/" + i2 + "/uuid", schemaPath: "#/properties/steps/items/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid6 = _errs30 === errors; } else { var valid6 = true; } if (valid6) { if (data12.title !== undefined) { const _errs32 = errors; if (typeof data12.title !== "string") { validate213.errors = [{ instancePath: instancePath + "/steps/" + i2 + "/title", schemaPath: "#/properties/steps/items/properties/title/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid6 = _errs32 === errors; } else { var valid6 = true; } if (valid6) { if (data12.description !== undefined) { const _errs34 = errors; if (typeof data12.description !== "string") { validate213.errors = [{ instancePath: instancePath + "/steps/" + i2 + "/description", schemaPath: "#/properties/steps/items/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid6 = _errs34 === errors; } else { var valid6 = true; } if (valid6) { if (data12.props !== undefined) { let data16 = data12.props; const _errs36 = errors; if (errors === _errs36) { if (Array.isArray(data16)) { if (data16.length < 1) { validate213.errors = [{ instancePath: instancePath + "/steps/" + i2 + "/props", schemaPath: "#/properties/steps/items/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid7 = true; const len3 = data16.length; for (let i3 = 0; i3 < len3; i3++) { const _errs38 = errors; if (!(validate24(data16[i3], { instancePath: instancePath + "/steps/" + i2 + "/props/" + i3, parentData: data16, parentDataProperty: i3, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid7 = _errs38 === errors; if (!valid7) { break; } } } } else { validate213.errors = [{ instancePath: instancePath + "/steps/" + i2 + "/props", schemaPath: "#/properties/steps/items/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid6 = _errs36 === errors; } else { var valid6 = true; } if (valid6) { if (data12.links !== undefined) { let data18 = data12.links; const _errs39 = errors; if (errors === _errs39) { if (Array.isArray(data18)) { if (data18.length < 1) { validate213.errors = [{ instancePath: instancePath + "/steps/" + i2 + "/links", schemaPath: "#/properties/steps/items/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid8 = true; const len4 = data18.length; for (let i4 = 0; i4 < len4; i4++) { let data19 = data18[i4]; const _errs41 = errors; const _errs42 = errors; if (errors === _errs42) { if (data19 && typeof data19 == "object" && !Array.isArray(data19)) { let missing3; if ((data19.href === undefined) && (missing3 = "href")) { validate213.errors = [{ instancePath: instancePath + "/steps/" + i2 + "/links/" + i4, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing3 }, message: "must have required property '" + missing3 + "'" }]; return false; } else { const _errs44 = errors; for (const key3 in data19) { if (!((((key3 === "href") || (key3 === "rel")) || (key3 === "media_type")) || (key3 === "text"))) { validate213.errors = [{ instancePath: instancePath + "/steps/" + i2 + "/links/" + i4, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key3 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs44 === errors) { if (data19.href !== undefined) { let data20 = data19.href; const _errs45 = errors; if (errors === _errs45) { if (errors === _errs45) { if (typeof data20 === "string") { if (!(formats10.test(data20))) { validate213.errors = [{ instancePath: instancePath + "/steps/" + i2 + "/links/" + i4 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate213.errors = [{ instancePath: instancePath + "/steps/" + i2 + "/links/" + i4 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid10 = _errs45 === errors; } else { var valid10 = true; } if (valid10) { if (data19.rel !== undefined) { let data21 = data19.rel; const _errs47 = errors; if (errors === _errs47) { if (typeof data21 === "string") { if (!pattern9.test(data21)) { validate213.errors = [{ instancePath: instancePath + "/steps/" + i2 + "/links/" + i4 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate213.errors = [{ instancePath: instancePath + "/steps/" + i2 + "/links/" + i4 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid10 = _errs47 === errors; } else { var valid10 = true; } if (valid10) { if (data19.media_type !== undefined) { let data22 = data19.media_type; const _errs49 = errors; if (errors === _errs49) { if (typeof data22 === "string") { if (!pattern3.test(data22)) { validate213.errors = [{ instancePath: instancePath + "/steps/" + i2 + "/links/" + i4 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate213.errors = [{ instancePath: instancePath + "/steps/" + i2 + "/links/" + i4 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid10 = _errs49 === errors; } else { var valid10 = true; } if (valid10) { if (data19.text !== undefined) { const _errs51 = errors; if (typeof data19.text !== "string") { validate213.errors = [{ instancePath: instancePath + "/steps/" + i2 + "/links/" + i4 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid10 = _errs51 === errors; } else { var valid10 = true; } } } } } } } else { validate213.errors = [{ instancePath: instancePath + "/steps/" + i2 + "/links/" + i4, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid8 = _errs41 === errors; if (!valid8) { break; } } } } else { validate213.errors = [{ instancePath: instancePath + "/steps/" + i2 + "/links", schemaPath: "#/properties/steps/items/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid6 = _errs39 === errors; } else { var valid6 = true; } if (valid6) { if (data12.reviewed_controls !== undefined) { const _errs53 = errors; if (!(validate216(data12.reviewed_controls, { instancePath: instancePath + "/steps/" + i2 + "/reviewed_controls", parentData: data12, parentDataProperty: "reviewed_controls", rootData }))) { vErrors = vErrors === null ? validate216.errors : vErrors.concat(validate216.errors); errors = vErrors.length; } var valid6 = _errs53 === errors; } else { var valid6 = true; } if (valid6) { if (data12.responsible_roles !== undefined) { let data25 = data12.responsible_roles; const _errs54 = errors; if (errors === _errs54) { if (Array.isArray(data25)) { if (data25.length < 1) { validate213.errors = [{ instancePath: instancePath + "/steps/" + i2 + "/responsible_roles", schemaPath: "#/properties/steps/items/properties/responsible_roles/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid11 = true; const len5 = data25.length; for (let i5 = 0; i5 < len5; i5++) { const _errs56 = errors; if (!(validate102(data25[i5], { instancePath: instancePath + "/steps/" + i2 + "/responsible_roles/" + i5, parentData: data25, parentDataProperty: i5, rootData }))) { vErrors = vErrors === null ? validate102.errors : vErrors.concat(validate102.errors); errors = vErrors.length; } var valid11 = _errs56 === errors; if (!valid11) { break; } } } } else { validate213.errors = [{ instancePath: instancePath + "/steps/" + i2 + "/responsible_roles", schemaPath: "#/properties/steps/items/properties/responsible_roles/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid6 = _errs54 === errors; } else { var valid6 = true; } if (valid6) { if (data12.remarks !== undefined) { const _errs57 = errors; if (typeof data12.remarks !== "string") { validate213.errors = [{ instancePath: instancePath + "/steps/" + i2 + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid6 = _errs57 === errors; } else { var valid6 = true; } } } } } } } } } } } else { validate213.errors = [{ instancePath: instancePath + "/steps/" + i2, schemaPath: "#/properties/steps/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid5 = _errs27 === errors; if (!valid5) { break; } } } } else { validate213.errors = [{ instancePath: instancePath + "/steps", schemaPath: "#/properties/steps/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs25 === errors; } else { var valid0 = true; } if (valid0) { if (data.related_controls !== undefined) { const _errs60 = errors; if (!(validate216(data.related_controls, { instancePath: instancePath + "/related_controls", parentData: data, parentDataProperty: "related_controls", rootData }))) { vErrors = vErrors === null ? validate216.errors : vErrors.concat(validate216.errors); errors = vErrors.length; } var valid0 = _errs60 === errors; } else { var valid0 = true; } if (valid0) { if (data.responsible_roles !== undefined) { let data29 = data.responsible_roles; const _errs61 = errors; if (errors === _errs61) { if (Array.isArray(data29)) { if (data29.length < 1) { validate213.errors = [{ instancePath: instancePath + "/responsible_roles", schemaPath: "#/properties/responsible_roles/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid13 = true; const len6 = data29.length; for (let i6 = 0; i6 < len6; i6++) { const _errs63 = errors; if (!(validate102(data29[i6], { instancePath: instancePath + "/responsible_roles/" + i6, parentData: data29, parentDataProperty: i6, rootData }))) { vErrors = vErrors === null ? validate102.errors : vErrors.concat(validate102.errors); errors = vErrors.length; } var valid13 = _errs63 === errors; if (!valid13) { break; } } } } else { validate213.errors = [{ instancePath: instancePath + "/responsible_roles", schemaPath: "#/properties/responsible_roles/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs61 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs64 = errors; if (typeof data.remarks !== "string") { validate213.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs64 === errors; } else { var valid0 = true; } } } } } } } } } } } } else { validate213.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate213.errors = vErrors; return errors === 0; } const schema225 = { "title": "Assessment Part", "description": "A partition of an assessment plan or results or a child of another part.", "$id": "#/definitions/assessment_part", "type": "object", "properties": { "uuid": { "title": "Part Identifier", "description": "A unique identifier for a specific part instance. This identifier's uniqueness is document scoped and is intended to be consistent for the same part across minor revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "name": { "title": "Part Name", "description": "A textual label that uniquely identifies the part's semantic type.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "ns": { "title": "Part Namespace", "description": "A namespace qualifying the part's name. This allows different organizations to associate distinct semantics with the same name.", "type": "string", "format": "uri" }, "class": { "title": "Part Class", "description": "A textual label that provides a sub_type or characterization of the part's name. This can be used to further distinguish or discriminate between the semantics of multiple parts of the same control with the same name and ns.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "title": { "title": "Part Title", "description": "A name given to the part, which may be used by a tool for display and navigation.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "prose": { "title": "Part Text", "description": "Permits multiple paragraphs, lists, tables etc.", "type": "string" }, "parts": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/assessment_part" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } } }, "required": ["name"], "additionalProperties": false }; const wrapper4 = { validate: validate225 }; function validate225(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/assessment_part" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((data.name === undefined) && (missing0 = "name")) { validate225.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(func8.call(schema225.properties, key0))) { validate225.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.uuid !== undefined) { let data0 = data.uuid; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern0.test(data0)) { validate225.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate225.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.name !== undefined) { let data1 = data.name; const _errs4 = errors; if (errors === _errs4) { if (typeof data1 === "string") { if (!pattern9.test(data1)) { validate225.errors = [{ instancePath: instancePath + "/name", schemaPath: "#/properties/name/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate225.errors = [{ instancePath: instancePath + "/name", schemaPath: "#/properties/name/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.ns !== undefined) { let data2 = data.ns; const _errs6 = errors; if (errors === _errs6) { if (errors === _errs6) { if (typeof data2 === "string") { if (!(formats8(data2))) { validate225.errors = [{ instancePath: instancePath + "/ns", schemaPath: "#/properties/ns/format", keyword: "format", params: { format: "uri" }, message: "must match format \"" + "uri" + "\"" }]; return false; } } else { validate225.errors = [{ instancePath: instancePath + "/ns", schemaPath: "#/properties/ns/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.class !== undefined) { let data3 = data.class; const _errs8 = errors; if (errors === _errs8) { if (typeof data3 === "string") { if (!pattern9.test(data3)) { validate225.errors = [{ instancePath: instancePath + "/class", schemaPath: "#/properties/class/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate225.errors = [{ instancePath: instancePath + "/class", schemaPath: "#/properties/class/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs8 === errors; } else { var valid0 = true; } if (valid0) { if (data.title !== undefined) { const _errs10 = errors; if (typeof data.title !== "string") { validate225.errors = [{ instancePath: instancePath + "/title", schemaPath: "#/properties/title/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs10 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data5 = data.props; const _errs12 = errors; if (errors === _errs12) { if (Array.isArray(data5)) { if (data5.length < 1) { validate225.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data5.length; for (let i0 = 0; i0 < len0; i0++) { const _errs14 = errors; if (!(validate24(data5[i0], { instancePath: instancePath + "/props/" + i0, parentData: data5, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs14 === errors; if (!valid1) { break; } } } } else { validate225.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs12 === errors; } else { var valid0 = true; } if (valid0) { if (data.prose !== undefined) { const _errs15 = errors; if (typeof data.prose !== "string") { validate225.errors = [{ instancePath: instancePath + "/prose", schemaPath: "#/properties/prose/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs15 === errors; } else { var valid0 = true; } if (valid0) { if (data.parts !== undefined) { let data8 = data.parts; const _errs17 = errors; if (errors === _errs17) { if (Array.isArray(data8)) { if (data8.length < 1) { validate225.errors = [{ instancePath: instancePath + "/parts", schemaPath: "#/properties/parts/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data8.length; for (let i1 = 0; i1 < len1; i1++) { const _errs19 = errors; if (!(wrapper4.validate(data8[i1], { instancePath: instancePath + "/parts/" + i1, parentData: data8, parentDataProperty: i1, rootData }))) { vErrors = vErrors === null ? wrapper4.validate.errors : vErrors.concat(wrapper4.validate.errors); errors = vErrors.length; } var valid2 = _errs19 === errors; if (!valid2) { break; } } } } else { validate225.errors = [{ instancePath: instancePath + "/parts", schemaPath: "#/properties/parts/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs17 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data10 = data.links; const _errs20 = errors; if (errors === _errs20) { if (Array.isArray(data10)) { if (data10.length < 1) { validate225.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid3 = true; const len2 = data10.length; for (let i2 = 0; i2 < len2; i2++) { let data11 = data10[i2]; const _errs22 = errors; const _errs23 = errors; if (errors === _errs23) { if (data11 && typeof data11 == "object" && !Array.isArray(data11)) { let missing1; if ((data11.href === undefined) && (missing1 = "href")) { validate225.errors = [{ instancePath: instancePath + "/links/" + i2, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs25 = errors; for (const key1 in data11) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate225.errors = [{ instancePath: instancePath + "/links/" + i2, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs25 === errors) { if (data11.href !== undefined) { let data12 = data11.href; const _errs26 = errors; if (errors === _errs26) { if (errors === _errs26) { if (typeof data12 === "string") { if (!(formats10.test(data12))) { validate225.errors = [{ instancePath: instancePath + "/links/" + i2 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate225.errors = [{ instancePath: instancePath + "/links/" + i2 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid5 = _errs26 === errors; } else { var valid5 = true; } if (valid5) { if (data11.rel !== undefined) { let data13 = data11.rel; const _errs28 = errors; if (errors === _errs28) { if (typeof data13 === "string") { if (!pattern9.test(data13)) { validate225.errors = [{ instancePath: instancePath + "/links/" + i2 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate225.errors = [{ instancePath: instancePath + "/links/" + i2 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid5 = _errs28 === errors; } else { var valid5 = true; } if (valid5) { if (data11.media_type !== undefined) { let data14 = data11.media_type; const _errs30 = errors; if (errors === _errs30) { if (typeof data14 === "string") { if (!pattern3.test(data14)) { validate225.errors = [{ instancePath: instancePath + "/links/" + i2 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate225.errors = [{ instancePath: instancePath + "/links/" + i2 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid5 = _errs30 === errors; } else { var valid5 = true; } if (valid5) { if (data11.text !== undefined) { const _errs32 = errors; if (typeof data11.text !== "string") { validate225.errors = [{ instancePath: instancePath + "/links/" + i2 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid5 = _errs32 === errors; } else { var valid5 = true; } } } } } } } else { validate225.errors = [{ instancePath: instancePath + "/links/" + i2, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid3 = _errs22 === errors; if (!valid3) { break; } } } } else { validate225.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs20 === errors; } else { var valid0 = true; } } } } } } } } } } } } else { validate225.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate225.errors = vErrors; return errors === 0; } const schema227 = { "title": "Subject of Assessment", "description": "Identifies system elements being assessed, such as components, inventory items, and locations. In the assessment plan, this identifies a planned assessment subject. In the assessment results this is an actual assessment subject, and reflects any changes from the plan. exactly what will be the focus of this assessment. Any subjects not identified in this way are out_of_scope.", "$id": "#/definitions/assessment_subject", "type": "object", "properties": { "type": { "$id": "subject_type", "title": "Subject Type", "description": "Indicates the type of assessment subject, such as a component, inventory, item, location, or party represented by this selection statement.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "description": { "title": "Include Subjects Description", "description": "A human_readable description of the collection of subjects being included in this assessment.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "include_all": { "title": "All", "description": "A key word to indicate all.", "type": "object", "additionalProperties": false }, "include_subjects": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/select_subject_by_id" } }, "exclude_subjects": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/select_subject_by_id" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["type"], "additionalProperties": false }; const schema229 = { "title": "Select Assessment Subject", "description": "Identifies a set of assessment subjects to include/exclude by UUID.", "$id": "#/definitions/select_subject_by_id", "type": "object", "properties": { "subject_uuid": { "title": "Subject Universally Unique Identifier Reference", "description": "A pointer to a component, inventory_item, location, party, user, or resource using it's UUID.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "type": { "$id": "subject_uuid_ref_type", "title": "Subject Universally Unique Identifier Reference Type", "description": "Used to indicate the type of object pointed to by the uuid_ref within a subject.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["subject_uuid", "type"], "additionalProperties": false }; function validate231(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/select_subject_by_id" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if (((data.subject_uuid === undefined) && (missing0 = "subject_uuid")) || ((data.type === undefined) && (missing0 = "type"))) { validate231.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(((((key0 === "subject_uuid") || (key0 === "type")) || (key0 === "props")) || (key0 === "links")) || (key0 === "remarks"))) { validate231.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.subject_uuid !== undefined) { let data0 = data.subject_uuid; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern0.test(data0)) { validate231.errors = [{ instancePath: instancePath + "/subject_uuid", schemaPath: "#/properties/subject_uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate231.errors = [{ instancePath: instancePath + "/subject_uuid", schemaPath: "#/properties/subject_uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.type !== undefined) { let data1 = data.type; const _errs4 = errors; if (errors === _errs4) { if (typeof data1 === "string") { if (!pattern9.test(data1)) { validate231.errors = [{ instancePath: instancePath + "/type", schemaPath: "#/properties/type/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate231.errors = [{ instancePath: instancePath + "/type", schemaPath: "#/properties/type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data2 = data.props; const _errs6 = errors; if (errors === _errs6) { if (Array.isArray(data2)) { if (data2.length < 1) { validate231.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data2.length; for (let i0 = 0; i0 < len0; i0++) { const _errs8 = errors; if (!(validate24(data2[i0], { instancePath: instancePath + "/props/" + i0, parentData: data2, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs8 === errors; if (!valid1) { break; } } } } else { validate231.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data4 = data.links; const _errs9 = errors; if (errors === _errs9) { if (Array.isArray(data4)) { if (data4.length < 1) { validate231.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data4.length; for (let i1 = 0; i1 < len1; i1++) { let data5 = data4[i1]; const _errs11 = errors; const _errs12 = errors; if (errors === _errs12) { if (data5 && typeof data5 == "object" && !Array.isArray(data5)) { let missing1; if ((data5.href === undefined) && (missing1 = "href")) { validate231.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs14 = errors; for (const key1 in data5) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate231.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs14 === errors) { if (data5.href !== undefined) { let data6 = data5.href; const _errs15 = errors; if (errors === _errs15) { if (errors === _errs15) { if (typeof data6 === "string") { if (!(formats10.test(data6))) { validate231.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate231.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid4 = _errs15 === errors; } else { var valid4 = true; } if (valid4) { if (data5.rel !== undefined) { let data7 = data5.rel; const _errs17 = errors; if (errors === _errs17) { if (typeof data7 === "string") { if (!pattern9.test(data7)) { validate231.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate231.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs17 === errors; } else { var valid4 = true; } if (valid4) { if (data5.media_type !== undefined) { let data8 = data5.media_type; const _errs19 = errors; if (errors === _errs19) { if (typeof data8 === "string") { if (!pattern3.test(data8)) { validate231.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate231.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs19 === errors; } else { var valid4 = true; } if (valid4) { if (data5.text !== undefined) { const _errs21 = errors; if (typeof data5.text !== "string") { validate231.errors = [{ instancePath: instancePath + "/links/" + i1 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid4 = _errs21 === errors; } else { var valid4 = true; } } } } } } } else { validate231.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs11 === errors; if (!valid2) { break; } } } } else { validate231.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs9 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs23 = errors; if (typeof data.remarks !== "string") { validate231.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs23 === errors; } else { var valid0 = true; } } } } } } } } else { validate231.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate231.errors = vErrors; return errors === 0; } function validate229(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/assessment_subject" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((data.type === undefined) && (missing0 = "type")) { validate229.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!((((((((key0 === "type") || (key0 === "description")) || (key0 === "props")) || (key0 === "links")) || (key0 === "include_all")) || (key0 === "include_subjects")) || (key0 === "exclude_subjects")) || (key0 === "remarks"))) { validate229.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.type !== undefined) { let data0 = data.type; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern9.test(data0)) { validate229.errors = [{ instancePath: instancePath + "/type", schemaPath: "#/properties/type/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate229.errors = [{ instancePath: instancePath + "/type", schemaPath: "#/properties/type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.description !== undefined) { const _errs4 = errors; if (typeof data.description !== "string") { validate229.errors = [{ instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data2 = data.props; const _errs6 = errors; if (errors === _errs6) { if (Array.isArray(data2)) { if (data2.length < 1) { validate229.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data2.length; for (let i0 = 0; i0 < len0; i0++) { const _errs8 = errors; if (!(validate24(data2[i0], { instancePath: instancePath + "/props/" + i0, parentData: data2, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs8 === errors; if (!valid1) { break; } } } } else { validate229.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data4 = data.links; const _errs9 = errors; if (errors === _errs9) { if (Array.isArray(data4)) { if (data4.length < 1) { validate229.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data4.length; for (let i1 = 0; i1 < len1; i1++) { let data5 = data4[i1]; const _errs11 = errors; const _errs12 = errors; if (errors === _errs12) { if (data5 && typeof data5 == "object" && !Array.isArray(data5)) { let missing1; if ((data5.href === undefined) && (missing1 = "href")) { validate229.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs14 = errors; for (const key1 in data5) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate229.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs14 === errors) { if (data5.href !== undefined) { let data6 = data5.href; const _errs15 = errors; if (errors === _errs15) { if (errors === _errs15) { if (typeof data6 === "string") { if (!(formats10.test(data6))) { validate229.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate229.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid4 = _errs15 === errors; } else { var valid4 = true; } if (valid4) { if (data5.rel !== undefined) { let data7 = data5.rel; const _errs17 = errors; if (errors === _errs17) { if (typeof data7 === "string") { if (!pattern9.test(data7)) { validate229.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate229.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs17 === errors; } else { var valid4 = true; } if (valid4) { if (data5.media_type !== undefined) { let data8 = data5.media_type; const _errs19 = errors; if (errors === _errs19) { if (typeof data8 === "string") { if (!pattern3.test(data8)) { validate229.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate229.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs19 === errors; } else { var valid4 = true; } if (valid4) { if (data5.text !== undefined) { const _errs21 = errors; if (typeof data5.text !== "string") { validate229.errors = [{ instancePath: instancePath + "/links/" + i1 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid4 = _errs21 === errors; } else { var valid4 = true; } } } } } } } else { validate229.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs11 === errors; if (!valid2) { break; } } } } else { validate229.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs9 === errors; } else { var valid0 = true; } if (valid0) { if (data.include_all !== undefined) { let data10 = data.include_all; const _errs23 = errors; if (errors === _errs23) { if (data10 && typeof data10 == "object" && !Array.isArray(data10)) { for (const key2 in data10) { validate229.errors = [{ instancePath: instancePath + "/include_all", schemaPath: "#/properties/include_all/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }]; return false; break; } } else { validate229.errors = [{ instancePath: instancePath + "/include_all", schemaPath: "#/properties/include_all/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid0 = _errs23 === errors; } else { var valid0 = true; } if (valid0) { if (data.include_subjects !== undefined) { let data11 = data.include_subjects; const _errs26 = errors; if (errors === _errs26) { if (Array.isArray(data11)) { if (data11.length < 1) { validate229.errors = [{ instancePath: instancePath + "/include_subjects", schemaPath: "#/properties/include_subjects/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid5 = true; const len2 = data11.length; for (let i2 = 0; i2 < len2; i2++) { const _errs28 = errors; if (!(validate231(data11[i2], { instancePath: instancePath + "/include_subjects/" + i2, parentData: data11, parentDataProperty: i2, rootData }))) { vErrors = vErrors === null ? validate231.errors : vErrors.concat(validate231.errors); errors = vErrors.length; } var valid5 = _errs28 === errors; if (!valid5) { break; } } } } else { validate229.errors = [{ instancePath: instancePath + "/include_subjects", schemaPath: "#/properties/include_subjects/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs26 === errors; } else { var valid0 = true; } if (valid0) { if (data.exclude_subjects !== undefined) { let data13 = data.exclude_subjects; const _errs29 = errors; if (errors === _errs29) { if (Array.isArray(data13)) { if (data13.length < 1) { validate229.errors = [{ instancePath: instancePath + "/exclude_subjects", schemaPath: "#/properties/exclude_subjects/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid6 = true; const len3 = data13.length; for (let i3 = 0; i3 < len3; i3++) { const _errs31 = errors; if (!(validate231(data13[i3], { instancePath: instancePath + "/exclude_subjects/" + i3, parentData: data13, parentDataProperty: i3, rootData }))) { vErrors = vErrors === null ? validate231.errors : vErrors.concat(validate231.errors); errors = vErrors.length; } var valid6 = _errs31 === errors; if (!valid6) { break; } } } } else { validate229.errors = [{ instancePath: instancePath + "/exclude_subjects", schemaPath: "#/properties/exclude_subjects/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs29 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs32 = errors; if (typeof data.remarks !== "string") { validate229.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs32 === errors; } else { var valid0 = true; } } } } } } } } } } } else { validate229.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate229.errors = vErrors; return errors === 0; } const schema233 = { "title": "Assessment Assets", "description": "Identifies the assets used to perform this assessment, such as the assessment team, scanning tools, and assumptions.", "$id": "#/definitions/assessment_assets", "type": "object", "properties": { "components": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/system_component" } }, "assessment_platforms": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/assessment_platform" } } }, "required": ["assessment_platforms"], "additionalProperties": false }; const schema234 = { "$id": "#/definitions/assessment_platform", "title": "Assessment Platform", "description": "Used to represent the toolset used to perform aspects of the assessment.", "type": "object", "properties": { "uuid": { "title": "Assessment Platform Universally Unique Identifier", "description": "Uniquely identifies this assessment Platform.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "title": { "title": "Assessment Platform Title", "description": "The title or name for the assessment platform.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "uses_components": { "type": "array", "minItems": 1, "items": { "title": "Uses Component", "description": "The set of components that are used by the assessment platform.", "type": "object", "properties": { "component_uuid": { "title": "Component Universally Unique Identifier Reference", "description": "A reference to a component that is implemented as part of an inventory item.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "responsible_parties": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_party" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["component_uuid"], "additionalProperties": false } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid"], "additionalProperties": false }; function validate238(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/assessment_platform" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((data.uuid === undefined) && (missing0 = "uuid")) { validate238.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!((((((key0 === "uuid") || (key0 === "title")) || (key0 === "props")) || (key0 === "links")) || (key0 === "uses_components")) || (key0 === "remarks"))) { validate238.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.uuid !== undefined) { let data0 = data.uuid; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern0.test(data0)) { validate238.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate238.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.title !== undefined) { const _errs4 = errors; if (typeof data.title !== "string") { validate238.errors = [{ instancePath: instancePath + "/title", schemaPath: "#/properties/title/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data2 = data.props; const _errs6 = errors; if (errors === _errs6) { if (Array.isArray(data2)) { if (data2.length < 1) { validate238.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data2.length; for (let i0 = 0; i0 < len0; i0++) { const _errs8 = errors; if (!(validate24(data2[i0], { instancePath: instancePath + "/props/" + i0, parentData: data2, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs8 === errors; if (!valid1) { break; } } } } else { validate238.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data4 = data.links; const _errs9 = errors; if (errors === _errs9) { if (Array.isArray(data4)) { if (data4.length < 1) { validate238.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data4.length; for (let i1 = 0; i1 < len1; i1++) { let data5 = data4[i1]; const _errs11 = errors; const _errs12 = errors; if (errors === _errs12) { if (data5 && typeof data5 == "object" && !Array.isArray(data5)) { let missing1; if ((data5.href === undefined) && (missing1 = "href")) { validate238.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs14 = errors; for (const key1 in data5) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate238.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs14 === errors) { if (data5.href !== undefined) { let data6 = data5.href; const _errs15 = errors; if (errors === _errs15) { if (errors === _errs15) { if (typeof data6 === "string") { if (!(formats10.test(data6))) { validate238.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate238.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid4 = _errs15 === errors; } else { var valid4 = true; } if (valid4) { if (data5.rel !== undefined) { let data7 = data5.rel; const _errs17 = errors; if (errors === _errs17) { if (typeof data7 === "string") { if (!pattern9.test(data7)) { validate238.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate238.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs17 === errors; } else { var valid4 = true; } if (valid4) { if (data5.media_type !== undefined) { let data8 = data5.media_type; const _errs19 = errors; if (errors === _errs19) { if (typeof data8 === "string") { if (!pattern3.test(data8)) { validate238.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate238.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs19 === errors; } else { var valid4 = true; } if (valid4) { if (data5.text !== undefined) { const _errs21 = errors; if (typeof data5.text !== "string") { validate238.errors = [{ instancePath: instancePath + "/links/" + i1 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid4 = _errs21 === errors; } else { var valid4 = true; } } } } } } } else { validate238.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs11 === errors; if (!valid2) { break; } } } } else { validate238.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs9 === errors; } else { var valid0 = true; } if (valid0) { if (data.uses_components !== undefined) { let data10 = data.uses_components; const _errs23 = errors; if (errors === _errs23) { if (Array.isArray(data10)) { if (data10.length < 1) { validate238.errors = [{ instancePath: instancePath + "/uses_components", schemaPath: "#/properties/uses_components/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid5 = true; const len2 = data10.length; for (let i2 = 0; i2 < len2; i2++) { let data11 = data10[i2]; const _errs25 = errors; if (errors === _errs25) { if (data11 && typeof data11 == "object" && !Array.isArray(data11)) { let missing2; if ((data11.component_uuid === undefined) && (missing2 = "component_uuid")) { validate238.errors = [{ instancePath: instancePath + "/uses_components/" + i2, schemaPath: "#/properties/uses_components/items/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" }]; return false; } else { const _errs27 = errors; for (const key2 in data11) { if (!(((((key2 === "component_uuid") || (key2 === "props")) || (key2 === "links")) || (key2 === "responsible_parties")) || (key2 === "remarks"))) { validate238.errors = [{ instancePath: instancePath + "/uses_components/" + i2, schemaPath: "#/properties/uses_components/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs27 === errors) { if (data11.component_uuid !== undefined) { let data12 = data11.component_uuid; const _errs28 = errors; if (errors === _errs28) { if (typeof data12 === "string") { if (!pattern0.test(data12)) { validate238.errors = [{ instancePath: instancePath + "/uses_components/" + i2 + "/component_uuid", schemaPath: "#/properties/uses_components/items/properties/component_uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate238.errors = [{ instancePath: instancePath + "/uses_components/" + i2 + "/component_uuid", schemaPath: "#/properties/uses_components/items/properties/component_uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid6 = _errs28 === errors; } else { var valid6 = true; } if (valid6) { if (data11.props !== undefined) { let data13 = data11.props; const _errs30 = errors; if (errors === _errs30) { if (Array.isArray(data13)) { if (data13.length < 1) { validate238.errors = [{ instancePath: instancePath + "/uses_components/" + i2 + "/props", schemaPath: "#/properties/uses_components/items/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid7 = true; const len3 = data13.length; for (let i3 = 0; i3 < len3; i3++) { const _errs32 = errors; if (!(validate24(data13[i3], { instancePath: instancePath + "/uses_components/" + i2 + "/props/" + i3, parentData: data13, parentDataProperty: i3, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid7 = _errs32 === errors; if (!valid7) { break; } } } } else { validate238.errors = [{ instancePath: instancePath + "/uses_components/" + i2 + "/props", schemaPath: "#/properties/uses_components/items/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid6 = _errs30 === errors; } else { var valid6 = true; } if (valid6) { if (data11.links !== undefined) { let data15 = data11.links; const _errs33 = errors; if (errors === _errs33) { if (Array.isArray(data15)) { if (data15.length < 1) { validate238.errors = [{ instancePath: instancePath + "/uses_components/" + i2 + "/links", schemaPath: "#/properties/uses_components/items/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid8 = true; const len4 = data15.length; for (let i4 = 0; i4 < len4; i4++) { let data16 = data15[i4]; const _errs35 = errors; const _errs36 = errors; if (errors === _errs36) { if (data16 && typeof data16 == "object" && !Array.isArray(data16)) { let missing3; if ((data16.href === undefined) && (missing3 = "href")) { validate238.errors = [{ instancePath: instancePath + "/uses_components/" + i2 + "/links/" + i4, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing3 }, message: "must have required property '" + missing3 + "'" }]; return false; } else { const _errs38 = errors; for (const key3 in data16) { if (!((((key3 === "href") || (key3 === "rel")) || (key3 === "media_type")) || (key3 === "text"))) { validate238.errors = [{ instancePath: instancePath + "/uses_components/" + i2 + "/links/" + i4, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key3 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs38 === errors) { if (data16.href !== undefined) { let data17 = data16.href; const _errs39 = errors; if (errors === _errs39) { if (errors === _errs39) { if (typeof data17 === "string") { if (!(formats10.test(data17))) { validate238.errors = [{ instancePath: instancePath + "/uses_components/" + i2 + "/links/" + i4 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate238.errors = [{ instancePath: instancePath + "/uses_components/" + i2 + "/links/" + i4 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid10 = _errs39 === errors; } else { var valid10 = true; } if (valid10) { if (data16.rel !== undefined) { let data18 = data16.rel; const _errs41 = errors; if (errors === _errs41) { if (typeof data18 === "string") { if (!pattern9.test(data18)) { validate238.errors = [{ instancePath: instancePath + "/uses_components/" + i2 + "/links/" + i4 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate238.errors = [{ instancePath: instancePath + "/uses_components/" + i2 + "/links/" + i4 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid10 = _errs41 === errors; } else { var valid10 = true; } if (valid10) { if (data16.media_type !== undefined) { let data19 = data16.media_type; const _errs43 = errors; if (errors === _errs43) { if (typeof data19 === "string") { if (!pattern3.test(data19)) { validate238.errors = [{ instancePath: instancePath + "/uses_components/" + i2 + "/links/" + i4 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate238.errors = [{ instancePath: instancePath + "/uses_components/" + i2 + "/links/" + i4 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid10 = _errs43 === errors; } else { var valid10 = true; } if (valid10) { if (data16.text !== undefined) { const _errs45 = errors; if (typeof data16.text !== "string") { validate238.errors = [{ instancePath: instancePath + "/uses_components/" + i2 + "/links/" + i4 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid10 = _errs45 === errors; } else { var valid10 = true; } } } } } } } else { validate238.errors = [{ instancePath: instancePath + "/uses_components/" + i2 + "/links/" + i4, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid8 = _errs35 === errors; if (!valid8) { break; } } } } else { validate238.errors = [{ instancePath: instancePath + "/uses_components/" + i2 + "/links", schemaPath: "#/properties/uses_components/items/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid6 = _errs33 === errors; } else { var valid6 = true; } if (valid6) { if (data11.responsible_parties !== undefined) { let data21 = data11.responsible_parties; const _errs47 = errors; if (errors === _errs47) { if (Array.isArray(data21)) { if (data21.length < 1) { validate238.errors = [{ instancePath: instancePath + "/uses_components/" + i2 + "/responsible_parties", schemaPath: "#/properties/uses_components/items/properties/responsible_parties/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid11 = true; const len5 = data21.length; for (let i5 = 0; i5 < len5; i5++) { const _errs49 = errors; if (!(validate40(data21[i5], { instancePath: instancePath + "/uses_components/" + i2 + "/responsible_parties/" + i5, parentData: data21, parentDataProperty: i5, rootData }))) { vErrors = vErrors === null ? validate40.errors : vErrors.concat(validate40.errors); errors = vErrors.length; } var valid11 = _errs49 === errors; if (!valid11) { break; } } } } else { validate238.errors = [{ instancePath: instancePath + "/uses_components/" + i2 + "/responsible_parties", schemaPath: "#/properties/uses_components/items/properties/responsible_parties/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid6 = _errs47 === errors; } else { var valid6 = true; } if (valid6) { if (data11.remarks !== undefined) { const _errs50 = errors; if (typeof data11.remarks !== "string") { validate238.errors = [{ instancePath: instancePath + "/uses_components/" + i2 + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid6 = _errs50 === errors; } else { var valid6 = true; } } } } } } } } else { validate238.errors = [{ instancePath: instancePath + "/uses_components/" + i2, schemaPath: "#/properties/uses_components/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid5 = _errs25 === errors; if (!valid5) { break; } } } } else { validate238.errors = [{ instancePath: instancePath + "/uses_components", schemaPath: "#/properties/uses_components/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs23 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs53 = errors; if (typeof data.remarks !== "string") { validate238.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs53 === errors; } else { var valid0 = true; } } } } } } } } } else { validate238.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate238.errors = vErrors; return errors === 0; } function validate236(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/assessment_assets" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((data.assessment_platforms === undefined) && (missing0 = "assessment_platforms")) { validate236.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!((key0 === "components") || (key0 === "assessment_platforms"))) { validate236.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.components !== undefined) { let data0 = data.components; const _errs2 = errors; if (errors === _errs2) { if (Array.isArray(data0)) { if (data0.length < 1) { validate236.errors = [{ instancePath: instancePath + "/components", schemaPath: "#/properties/components/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data0.length; for (let i0 = 0; i0 < len0; i0++) { const _errs4 = errors; if (!(validate187(data0[i0], { instancePath: instancePath + "/components/" + i0, parentData: data0, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate187.errors : vErrors.concat(validate187.errors); errors = vErrors.length; } var valid1 = _errs4 === errors; if (!valid1) { break; } } } } else { validate236.errors = [{ instancePath: instancePath + "/components", schemaPath: "#/properties/components/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.assessment_platforms !== undefined) { let data2 = data.assessment_platforms; const _errs5 = errors; if (errors === _errs5) { if (Array.isArray(data2)) { if (data2.length < 1) { validate236.errors = [{ instancePath: instancePath + "/assessment_platforms", schemaPath: "#/properties/assessment_platforms/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data2.length; for (let i1 = 0; i1 < len1; i1++) { const _errs7 = errors; if (!(validate238(data2[i1], { instancePath: instancePath + "/assessment_platforms/" + i1, parentData: data2, parentDataProperty: i1, rootData }))) { vErrors = vErrors === null ? validate238.errors : vErrors.concat(validate238.errors); errors = vErrors.length; } var valid2 = _errs7 === errors; if (!valid2) { break; } } } } else { validate236.errors = [{ instancePath: instancePath + "/assessment_platforms", schemaPath: "#/properties/assessment_platforms/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs5 === errors; } else { var valid0 = true; } } } } } else { validate236.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate236.errors = vErrors; return errors === 0; } const schema239 = { "title": "Task", "description": "Represents a scheduled event or milestone, which may be associated with a series of assessment actions.", "$id": "#/definitions/task", "type": "object", "properties": { "uuid": { "title": "Task Universally Unique Identifier", "description": "Uniquely identifies this assessment task.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "type": { "$id": "task_type", "title": "Task Type", "description": "The type of task.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "title": { "title": "Task Title", "description": "The title for this task.", "type": "string" }, "description": { "title": "Task Description", "description": "A human_readable description of this task.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "timing": { "title": "Event Timing", "description": "The timing under which the task is intended to occur.", "type": "object", "properties": { "on_date": { "title": "On Date Condition", "description": "The task is intended to occur on the specified date.", "type": "object", "properties": { "date": { "title": "On Date Condition", "description": "The task must occur on the specified date.", "type": "string", "format": "date-time", "pattern": "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" } }, "required": ["date"], "additionalProperties": false }, "within_date_range": { "title": "On Date Range Condition", "description": "The task is intended to occur within the specified date range.", "type": "object", "properties": { "start": { "title": "Start Date Condition", "description": "The task must occur on or after the specified date.", "type": "string", "format": "date-time", "pattern": "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, "end": { "title": "End Date Condition", "description": "The task must occur on or before the specified date.", "type": "string", "format": "date-time", "pattern": "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" } }, "required": ["start", "end"], "additionalProperties": false }, "at_frequency": { "title": "Frequency Condition", "description": "The task is intended to occur at the specified frequency.", "type": "object", "properties": { "period": { "title": "Period", "description": "The task must occur after the specified period has elapsed.", "type": "integer", "multipleOf": 1, "minimum": 1 }, "unit": { "title": "Time Unit", "description": "The unit of time for the period.", "type": "string", "pattern": "^\\S(.*\\S)?$", "enum": ["seconds", "minutes", "hours", "days", "months", "years"] } }, "required": ["period", "unit"], "additionalProperties": false } }, "additionalProperties": false }, "dependencies": { "type": "array", "minItems": 1, "items": { "title": "Task Dependency", "description": "Used to indicate that a task is dependent on another task.", "type": "object", "properties": { "task_uuid": { "title": "Task Universally Unique Identifier Reference", "description": "References a unique task by UUID.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["task_uuid"], "additionalProperties": false } }, "tasks": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/task" } }, "associated_activities": { "type": "array", "minItems": 1, "items": { "title": "Associated Activity", "description": "Identifies an individual activity to be performed as part of a task.", "type": "object", "properties": { "activity_uuid": { "title": "Activity Universally Unique Identifier Reference", "description": "References an activity defined in the list of activities.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "responsible_roles": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_role" } }, "subjects": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/assessment_subject" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["activity_uuid", "subjects"], "additionalProperties": false } }, "subjects": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/assessment_subject" } }, "responsible_roles": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_role" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "type", "title"], "additionalProperties": false }; const wrapper5 = { validate: validate244 }; function validate244(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/task" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((((data.uuid === undefined) && (missing0 = "uuid")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.title === undefined) && (missing0 = "title"))) { validate244.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(func8.call(schema239.properties, key0))) { validate244.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.uuid !== undefined) { let data0 = data.uuid; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern0.test(data0)) { validate244.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate244.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.type !== undefined) { let data1 = data.type; const _errs4 = errors; if (errors === _errs4) { if (typeof data1 === "string") { if (!pattern9.test(data1)) { validate244.errors = [{ instancePath: instancePath + "/type", schemaPath: "#/properties/type/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate244.errors = [{ instancePath: instancePath + "/type", schemaPath: "#/properties/type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.title !== undefined) { const _errs6 = errors; if (typeof data.title !== "string") { validate244.errors = [{ instancePath: instancePath + "/title", schemaPath: "#/properties/title/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.description !== undefined) { const _errs8 = errors; if (typeof data.description !== "string") { validate244.errors = [{ instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs8 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data4 = data.props; const _errs10 = errors; if (errors === _errs10) { if (Array.isArray(data4)) { if (data4.length < 1) { validate244.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data4.length; for (let i0 = 0; i0 < len0; i0++) { const _errs12 = errors; if (!(validate24(data4[i0], { instancePath: instancePath + "/props/" + i0, parentData: data4, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs12 === errors; if (!valid1) { break; } } } } else { validate244.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs10 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data6 = data.links; const _errs13 = errors; if (errors === _errs13) { if (Array.isArray(data6)) { if (data6.length < 1) { validate244.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data6.length; for (let i1 = 0; i1 < len1; i1++) { let data7 = data6[i1]; const _errs15 = errors; const _errs16 = errors; if (errors === _errs16) { if (data7 && typeof data7 == "object" && !Array.isArray(data7)) { let missing1; if ((data7.href === undefined) && (missing1 = "href")) { validate244.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs18 = errors; for (const key1 in data7) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate244.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs18 === errors) { if (data7.href !== undefined) { let data8 = data7.href; const _errs19 = errors; if (errors === _errs19) { if (errors === _errs19) { if (typeof data8 === "string") { if (!(formats10.test(data8))) { validate244.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate244.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid4 = _errs19 === errors; } else { var valid4 = true; } if (valid4) { if (data7.rel !== undefined) { let data9 = data7.rel; const _errs21 = errors; if (errors === _errs21) { if (typeof data9 === "string") { if (!pattern9.test(data9)) { validate244.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate244.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs21 === errors; } else { var valid4 = true; } if (valid4) { if (data7.media_type !== undefined) { let data10 = data7.media_type; const _errs23 = errors; if (errors === _errs23) { if (typeof data10 === "string") { if (!pattern3.test(data10)) { validate244.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate244.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs23 === errors; } else { var valid4 = true; } if (valid4) { if (data7.text !== undefined) { const _errs25 = errors; if (typeof data7.text !== "string") { validate244.errors = [{ instancePath: instancePath + "/links/" + i1 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid4 = _errs25 === errors; } else { var valid4 = true; } } } } } } } else { validate244.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs15 === errors; if (!valid2) { break; } } } } else { validate244.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs13 === errors; } else { var valid0 = true; } if (valid0) { if (data.timing !== undefined) { let data12 = data.timing; const _errs27 = errors; if (errors === _errs27) { if (data12 && typeof data12 == "object" && !Array.isArray(data12)) { const _errs29 = errors; for (const key2 in data12) { if (!(((key2 === "on_date") || (key2 === "within_date_range")) || (key2 === "at_frequency"))) { validate244.errors = [{ instancePath: instancePath + "/timing", schemaPath: "#/properties/timing/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs29 === errors) { if (data12.on_date !== undefined) { let data13 = data12.on_date; const _errs30 = errors; if (errors === _errs30) { if (data13 && typeof data13 == "object" && !Array.isArray(data13)) { let missing2; if ((data13.date === undefined) && (missing2 = "date")) { validate244.errors = [{ instancePath: instancePath + "/timing/on_date", schemaPath: "#/properties/timing/properties/on_date/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" }]; return false; } else { const _errs32 = errors; for (const key3 in data13) { if (!(key3 === "date")) { validate244.errors = [{ instancePath: instancePath + "/timing/on_date", schemaPath: "#/properties/timing/properties/on_date/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key3 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs32 === errors) { if (data13.date !== undefined) { let data14 = data13.date; const _errs33 = errors; if (errors === _errs33) { if (errors === _errs33) { if (typeof data14 === "string") { if (!pattern1.test(data14)) { validate244.errors = [{ instancePath: instancePath + "/timing/on_date/date", schemaPath: "#/properties/timing/properties/on_date/properties/date/pattern", keyword: "pattern", params: { pattern: "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, message: "must match pattern \"" + "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" + "\"" }]; return false; } else { if (!(formats0.validate(data14))) { validate244.errors = [{ instancePath: instancePath + "/timing/on_date/date", schemaPath: "#/properties/timing/properties/on_date/properties/date/format", keyword: "format", params: { format: "date-time" }, message: "must match format \"" + "date-time" + "\"" }]; return false; } } } else { validate244.errors = [{ instancePath: instancePath + "/timing/on_date/date", schemaPath: "#/properties/timing/properties/on_date/properties/date/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } } } } } else { validate244.errors = [{ instancePath: instancePath + "/timing/on_date", schemaPath: "#/properties/timing/properties/on_date/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid5 = _errs30 === errors; } else { var valid5 = true; } if (valid5) { if (data12.within_date_range !== undefined) { let data15 = data12.within_date_range; const _errs35 = errors; if (errors === _errs35) { if (data15 && typeof data15 == "object" && !Array.isArray(data15)) { let missing3; if (((data15.start === undefined) && (missing3 = "start")) || ((data15.end === undefined) && (missing3 = "end"))) { validate244.errors = [{ instancePath: instancePath + "/timing/within_date_range", schemaPath: "#/properties/timing/properties/within_date_range/required", keyword: "required", params: { missingProperty: missing3 }, message: "must have required property '" + missing3 + "'" }]; return false; } else { const _errs37 = errors; for (const key4 in data15) { if (!((key4 === "start") || (key4 === "end"))) { validate244.errors = [{ instancePath: instancePath + "/timing/within_date_range", schemaPath: "#/properties/timing/properties/within_date_range/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key4 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs37 === errors) { if (data15.start !== undefined) { let data16 = data15.start; const _errs38 = errors; if (errors === _errs38) { if (errors === _errs38) { if (typeof data16 === "string") { if (!pattern1.test(data16)) { validate244.errors = [{ instancePath: instancePath + "/timing/within_date_range/start", schemaPath: "#/properties/timing/properties/within_date_range/properties/start/pattern", keyword: "pattern", params: { pattern: "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, message: "must match pattern \"" + "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" + "\"" }]; return false; } else { if (!(formats0.validate(data16))) { validate244.errors = [{ instancePath: instancePath + "/timing/within_date_range/start", schemaPath: "#/properties/timing/properties/within_date_range/properties/start/format", keyword: "format", params: { format: "date-time" }, message: "must match format \"" + "date-time" + "\"" }]; return false; } } } else { validate244.errors = [{ instancePath: instancePath + "/timing/within_date_range/start", schemaPath: "#/properties/timing/properties/within_date_range/properties/start/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid7 = _errs38 === errors; } else { var valid7 = true; } if (valid7) { if (data15.end !== undefined) { let data17 = data15.end; const _errs40 = errors; if (errors === _errs40) { if (errors === _errs40) { if (typeof data17 === "string") { if (!pattern1.test(data17)) { validate244.errors = [{ instancePath: instancePath + "/timing/within_date_range/end", schemaPath: "#/properties/timing/properties/within_date_range/properties/end/pattern", keyword: "pattern", params: { pattern: "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, message: "must match pattern \"" + "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" + "\"" }]; return false; } else { if (!(formats0.validate(data17))) { validate244.errors = [{ instancePath: instancePath + "/timing/within_date_range/end", schemaPath: "#/properties/timing/properties/within_date_range/properties/end/format", keyword: "format", params: { format: "date-time" }, message: "must match format \"" + "date-time" + "\"" }]; return false; } } } else { validate244.errors = [{ instancePath: instancePath + "/timing/within_date_range/end", schemaPath: "#/properties/timing/properties/within_date_range/properties/end/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid7 = _errs40 === errors; } else { var valid7 = true; } } } } } else { validate244.errors = [{ instancePath: instancePath + "/timing/within_date_range", schemaPath: "#/properties/timing/properties/within_date_range/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid5 = _errs35 === errors; } else { var valid5 = true; } if (valid5) { if (data12.at_frequency !== undefined) { let data18 = data12.at_frequency; const _errs42 = errors; if (errors === _errs42) { if (data18 && typeof data18 == "object" && !Array.isArray(data18)) { let missing4; if (((data18.period === undefined) && (missing4 = "period")) || ((data18.unit === undefined) && (missing4 = "unit"))) { validate244.errors = [{ instancePath: instancePath + "/timing/at_frequency", schemaPath: "#/properties/timing/properties/at_frequency/required", keyword: "required", params: { missingProperty: missing4 }, message: "must have required property '" + missing4 + "'" }]; return false; } else { const _errs44 = errors; for (const key5 in data18) { if (!((key5 === "period") || (key5 === "unit"))) { validate244.errors = [{ instancePath: instancePath + "/timing/at_frequency", schemaPath: "#/properties/timing/properties/at_frequency/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key5 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs44 === errors) { if (data18.period !== undefined) { let data19 = data18.period; const _errs45 = errors; if (!(((typeof data19 == "number") && (!(data19 % 1) && !isNaN(data19))) && (isFinite(data19)))) { validate244.errors = [{ instancePath: instancePath + "/timing/at_frequency/period", schemaPath: "#/properties/timing/properties/at_frequency/properties/period/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }]; return false; } if (errors === _errs45) { if ((typeof data19 == "number") && (isFinite(data19))) { if (data19 < 1 || isNaN(data19)) { validate244.errors = [{ instancePath: instancePath + "/timing/at_frequency/period", schemaPath: "#/properties/timing/properties/at_frequency/properties/period/minimum", keyword: "minimum", params: { comparison: ">=", limit: 1 }, message: "must be >= 1" }]; return false; } else { let res0; if ((1 === 0 || (res0 = data19 / 1, res0 !== parseInt(res0)))) { validate244.errors = [{ instancePath: instancePath + "/timing/at_frequency/period", schemaPath: "#/properties/timing/properties/at_frequency/properties/period/multipleOf", keyword: "multipleOf", params: { multipleOf: 1 }, message: "must be multiple of 1" }]; return false; } } } } var valid8 = _errs45 === errors; } else { var valid8 = true; } if (valid8) { if (data18.unit !== undefined) { let data20 = data18.unit; const _errs47 = errors; if (!((((((data20 === "seconds") || (data20 === "minutes")) || (data20 === "hours")) || (data20 === "days")) || (data20 === "months")) || (data20 === "years"))) { validate244.errors = [{ instancePath: instancePath + "/timing/at_frequency/unit", schemaPath: "#/properties/timing/properties/at_frequency/properties/unit/enum", keyword: "enum", params: { allowedValues: schema239.properties.timing.properties.at_frequency.properties.unit.enum }, message: "must be equal to one of the allowed values" }]; return false; } if (errors === _errs47) { if (typeof data20 === "string") { if (!pattern3.test(data20)) { validate244.errors = [{ instancePath: instancePath + "/timing/at_frequency/unit", schemaPath: "#/properties/timing/properties/at_frequency/properties/unit/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate244.errors = [{ instancePath: instancePath + "/timing/at_frequency/unit", schemaPath: "#/properties/timing/properties/at_frequency/properties/unit/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid8 = _errs47 === errors; } else { var valid8 = true; } } } } } else { validate244.errors = [{ instancePath: instancePath + "/timing/at_frequency", schemaPath: "#/properties/timing/properties/at_frequency/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid5 = _errs42 === errors; } else { var valid5 = true; } } } } } else { validate244.errors = [{ instancePath: instancePath + "/timing", schemaPath: "#/properties/timing/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid0 = _errs27 === errors; } else { var valid0 = true; } if (valid0) { if (data.dependencies !== undefined) { let data21 = data.dependencies; const _errs49 = errors; if (errors === _errs49) { if (Array.isArray(data21)) { if (data21.length < 1) { validate244.errors = [{ instancePath: instancePath + "/dependencies", schemaPath: "#/properties/dependencies/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid9 = true; const len2 = data21.length; for (let i2 = 0; i2 < len2; i2++) { let data22 = data21[i2]; const _errs51 = errors; if (errors === _errs51) { if (data22 && typeof data22 == "object" && !Array.isArray(data22)) { let missing5; if ((data22.task_uuid === undefined) && (missing5 = "task_uuid")) { validate244.errors = [{ instancePath: instancePath + "/dependencies/" + i2, schemaPath: "#/properties/dependencies/items/required", keyword: "required", params: { missingProperty: missing5 }, message: "must have required property '" + missing5 + "'" }]; return false; } else { const _errs53 = errors; for (const key6 in data22) { if (!((key6 === "task_uuid") || (key6 === "remarks"))) { validate244.errors = [{ instancePath: instancePath + "/dependencies/" + i2, schemaPath: "#/properties/dependencies/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key6 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs53 === errors) { if (data22.task_uuid !== undefined) { let data23 = data22.task_uuid; const _errs54 = errors; if (errors === _errs54) { if (typeof data23 === "string") { if (!pattern0.test(data23)) { validate244.errors = [{ instancePath: instancePath + "/dependencies/" + i2 + "/task_uuid", schemaPath: "#/properties/dependencies/items/properties/task_uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate244.errors = [{ instancePath: instancePath + "/dependencies/" + i2 + "/task_uuid", schemaPath: "#/properties/dependencies/items/properties/task_uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid10 = _errs54 === errors; } else { var valid10 = true; } if (valid10) { if (data22.remarks !== undefined) { const _errs56 = errors; if (typeof data22.remarks !== "string") { validate244.errors = [{ instancePath: instancePath + "/dependencies/" + i2 + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid10 = _errs56 === errors; } else { var valid10 = true; } } } } } else { validate244.errors = [{ instancePath: instancePath + "/dependencies/" + i2, schemaPath: "#/properties/dependencies/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid9 = _errs51 === errors; if (!valid9) { break; } } } } else { validate244.errors = [{ instancePath: instancePath + "/dependencies", schemaPath: "#/properties/dependencies/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs49 === errors; } else { var valid0 = true; } if (valid0) { if (data.tasks !== undefined) { let data25 = data.tasks; const _errs59 = errors; if (errors === _errs59) { if (Array.isArray(data25)) { if (data25.length < 1) { validate244.errors = [{ instancePath: instancePath + "/tasks", schemaPath: "#/properties/tasks/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid12 = true; const len3 = data25.length; for (let i3 = 0; i3 < len3; i3++) { const _errs61 = errors; if (!(wrapper5.validate(data25[i3], { instancePath: instancePath + "/tasks/" + i3, parentData: data25, parentDataProperty: i3, rootData }))) { vErrors = vErrors === null ? wrapper5.validate.errors : vErrors.concat(wrapper5.validate.errors); errors = vErrors.length; } var valid12 = _errs61 === errors; if (!valid12) { break; } } } } else { validate244.errors = [{ instancePath: instancePath + "/tasks", schemaPath: "#/properties/tasks/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs59 === errors; } else { var valid0 = true; } if (valid0) { if (data.associated_activities !== undefined) { let data27 = data.associated_activities; const _errs62 = errors; if (errors === _errs62) { if (Array.isArray(data27)) { if (data27.length < 1) { validate244.errors = [{ instancePath: instancePath + "/associated_activities", schemaPath: "#/properties/associated_activities/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid13 = true; const len4 = data27.length; for (let i4 = 0; i4 < len4; i4++) { let data28 = data27[i4]; const _errs64 = errors; if (errors === _errs64) { if (data28 && typeof data28 == "object" && !Array.isArray(data28)) { let missing6; if (((data28.activity_uuid === undefined) && (missing6 = "activity_uuid")) || ((data28.subjects === undefined) && (missing6 = "subjects"))) { validate244.errors = [{ instancePath: instancePath + "/associated_activities/" + i4, schemaPath: "#/properties/associated_activities/items/required", keyword: "required", params: { missingProperty: missing6 }, message: "must have required property '" + missing6 + "'" }]; return false; } else { const _errs66 = errors; for (const key7 in data28) { if (!((((((key7 === "activity_uuid") || (key7 === "props")) || (key7 === "links")) || (key7 === "responsible_roles")) || (key7 === "subjects")) || (key7 === "remarks"))) { validate244.errors = [{ instancePath: instancePath + "/associated_activities/" + i4, schemaPath: "#/properties/associated_activities/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key7 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs66 === errors) { if (data28.activity_uuid !== undefined) { let data29 = data28.activity_uuid; const _errs67 = errors; if (errors === _errs67) { if (typeof data29 === "string") { if (!pattern0.test(data29)) { validate244.errors = [{ instancePath: instancePath + "/associated_activities/" + i4 + "/activity_uuid", schemaPath: "#/properties/associated_activities/items/properties/activity_uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate244.errors = [{ instancePath: instancePath + "/associated_activities/" + i4 + "/activity_uuid", schemaPath: "#/properties/associated_activities/items/properties/activity_uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid14 = _errs67 === errors; } else { var valid14 = true; } if (valid14) { if (data28.props !== undefined) { let data30 = data28.props; const _errs69 = errors; if (errors === _errs69) { if (Array.isArray(data30)) { if (data30.length < 1) { validate244.errors = [{ instancePath: instancePath + "/associated_activities/" + i4 + "/props", schemaPath: "#/properties/associated_activities/items/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid15 = true; const len5 = data30.length; for (let i5 = 0; i5 < len5; i5++) { const _errs71 = errors; if (!(validate24(data30[i5], { instancePath: instancePath + "/associated_activities/" + i4 + "/props/" + i5, parentData: data30, parentDataProperty: i5, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid15 = _errs71 === errors; if (!valid15) { break; } } } } else { validate244.errors = [{ instancePath: instancePath + "/associated_activities/" + i4 + "/props", schemaPath: "#/properties/associated_activities/items/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid14 = _errs69 === errors; } else { var valid14 = true; } if (valid14) { if (data28.links !== undefined) { let data32 = data28.links; const _errs72 = errors; if (errors === _errs72) { if (Array.isArray(data32)) { if (data32.length < 1) { validate244.errors = [{ instancePath: instancePath + "/associated_activities/" + i4 + "/links", schemaPath: "#/properties/associated_activities/items/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid16 = true; const len6 = data32.length; for (let i6 = 0; i6 < len6; i6++) { let data33 = data32[i6]; const _errs74 = errors; const _errs75 = errors; if (errors === _errs75) { if (data33 && typeof data33 == "object" && !Array.isArray(data33)) { let missing7; if ((data33.href === undefined) && (missing7 = "href")) { validate244.errors = [{ instancePath: instancePath + "/associated_activities/" + i4 + "/links/" + i6, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing7 }, message: "must have required property '" + missing7 + "'" }]; return false; } else { const _errs77 = errors; for (const key8 in data33) { if (!((((key8 === "href") || (key8 === "rel")) || (key8 === "media_type")) || (key8 === "text"))) { validate244.errors = [{ instancePath: instancePath + "/associated_activities/" + i4 + "/links/" + i6, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key8 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs77 === errors) { if (data33.href !== undefined) { let data34 = data33.href; const _errs78 = errors; if (errors === _errs78) { if (errors === _errs78) { if (typeof data34 === "string") { if (!(formats10.test(data34))) { validate244.errors = [{ instancePath: instancePath + "/associated_activities/" + i4 + "/links/" + i6 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate244.errors = [{ instancePath: instancePath + "/associated_activities/" + i4 + "/links/" + i6 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid18 = _errs78 === errors; } else { var valid18 = true; } if (valid18) { if (data33.rel !== undefined) { let data35 = data33.rel; const _errs80 = errors; if (errors === _errs80) { if (typeof data35 === "string") { if (!pattern9.test(data35)) { validate244.errors = [{ instancePath: instancePath + "/associated_activities/" + i4 + "/links/" + i6 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate244.errors = [{ instancePath: instancePath + "/associated_activities/" + i4 + "/links/" + i6 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid18 = _errs80 === errors; } else { var valid18 = true; } if (valid18) { if (data33.media_type !== undefined) { let data36 = data33.media_type; const _errs82 = errors; if (errors === _errs82) { if (typeof data36 === "string") { if (!pattern3.test(data36)) { validate244.errors = [{ instancePath: instancePath + "/associated_activities/" + i4 + "/links/" + i6 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate244.errors = [{ instancePath: instancePath + "/associated_activities/" + i4 + "/links/" + i6 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid18 = _errs82 === errors; } else { var valid18 = true; } if (valid18) { if (data33.text !== undefined) { const _errs84 = errors; if (typeof data33.text !== "string") { validate244.errors = [{ instancePath: instancePath + "/associated_activities/" + i4 + "/links/" + i6 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid18 = _errs84 === errors; } else { var valid18 = true; } } } } } } } else { validate244.errors = [{ instancePath: instancePath + "/associated_activities/" + i4 + "/links/" + i6, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid16 = _errs74 === errors; if (!valid16) { break; } } } } else { validate244.errors = [{ instancePath: instancePath + "/associated_activities/" + i4 + "/links", schemaPath: "#/properties/associated_activities/items/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid14 = _errs72 === errors; } else { var valid14 = true; } if (valid14) { if (data28.responsible_roles !== undefined) { let data38 = data28.responsible_roles; const _errs86 = errors; if (errors === _errs86) { if (Array.isArray(data38)) { if (data38.length < 1) { validate244.errors = [{ instancePath: instancePath + "/associated_activities/" + i4 + "/responsible_roles", schemaPath: "#/properties/associated_activities/items/properties/responsible_roles/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid19 = true; const len7 = data38.length; for (let i7 = 0; i7 < len7; i7++) { const _errs88 = errors; if (!(validate102(data38[i7], { instancePath: instancePath + "/associated_activities/" + i4 + "/responsible_roles/" + i7, parentData: data38, parentDataProperty: i7, rootData }))) { vErrors = vErrors === null ? validate102.errors : vErrors.concat(validate102.errors); errors = vErrors.length; } var valid19 = _errs88 === errors; if (!valid19) { break; } } } } else { validate244.errors = [{ instancePath: instancePath + "/associated_activities/" + i4 + "/responsible_roles", schemaPath: "#/properties/associated_activities/items/properties/responsible_roles/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid14 = _errs86 === errors; } else { var valid14 = true; } if (valid14) { if (data28.subjects !== undefined) { let data40 = data28.subjects; const _errs89 = errors; if (errors === _errs89) { if (Array.isArray(data40)) { if (data40.length < 1) { validate244.errors = [{ instancePath: instancePath + "/associated_activities/" + i4 + "/subjects", schemaPath: "#/properties/associated_activities/items/properties/subjects/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid20 = true; const len8 = data40.length; for (let i8 = 0; i8 < len8; i8++) { const _errs91 = errors; if (!(validate229(data40[i8], { instancePath: instancePath + "/associated_activities/" + i4 + "/subjects/" + i8, parentData: data40, parentDataProperty: i8, rootData }))) { vErrors = vErrors === null ? validate229.errors : vErrors.concat(validate229.errors); errors = vErrors.length; } var valid20 = _errs91 === errors; if (!valid20) { break; } } } } else { validate244.errors = [{ instancePath: instancePath + "/associated_activities/" + i4 + "/subjects", schemaPath: "#/properties/associated_activities/items/properties/subjects/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid14 = _errs89 === errors; } else { var valid14 = true; } if (valid14) { if (data28.remarks !== undefined) { const _errs92 = errors; if (typeof data28.remarks !== "string") { validate244.errors = [{ instancePath: instancePath + "/associated_activities/" + i4 + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid14 = _errs92 === errors; } else { var valid14 = true; } } } } } } } } } else { validate244.errors = [{ instancePath: instancePath + "/associated_activities/" + i4, schemaPath: "#/properties/associated_activities/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid13 = _errs64 === errors; if (!valid13) { break; } } } } else { validate244.errors = [{ instancePath: instancePath + "/associated_activities", schemaPath: "#/properties/associated_activities/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs62 === errors; } else { var valid0 = true; } if (valid0) { if (data.subjects !== undefined) { let data43 = data.subjects; const _errs95 = errors; if (errors === _errs95) { if (Array.isArray(data43)) { if (data43.length < 1) { validate244.errors = [{ instancePath: instancePath + "/subjects", schemaPath: "#/properties/subjects/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid22 = true; const len9 = data43.length; for (let i9 = 0; i9 < len9; i9++) { const _errs97 = errors; if (!(validate229(data43[i9], { instancePath: instancePath + "/subjects/" + i9, parentData: data43, parentDataProperty: i9, rootData }))) { vErrors = vErrors === null ? validate229.errors : vErrors.concat(validate229.errors); errors = vErrors.length; } var valid22 = _errs97 === errors; if (!valid22) { break; } } } } else { validate244.errors = [{ instancePath: instancePath + "/subjects", schemaPath: "#/properties/subjects/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs95 === errors; } else { var valid0 = true; } if (valid0) { if (data.responsible_roles !== undefined) { let data45 = data.responsible_roles; const _errs98 = errors; if (errors === _errs98) { if (Array.isArray(data45)) { if (data45.length < 1) { validate244.errors = [{ instancePath: instancePath + "/responsible_roles", schemaPath: "#/properties/responsible_roles/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid23 = true; const len10 = data45.length; for (let i10 = 0; i10 < len10; i10++) { const _errs100 = errors; if (!(validate102(data45[i10], { instancePath: instancePath + "/responsible_roles/" + i10, parentData: data45, parentDataProperty: i10, rootData }))) { vErrors = vErrors === null ? validate102.errors : vErrors.concat(validate102.errors); errors = vErrors.length; } var valid23 = _errs100 === errors; if (!valid23) { break; } } } } else { validate244.errors = [{ instancePath: instancePath + "/responsible_roles", schemaPath: "#/properties/responsible_roles/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs98 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs101 = errors; if (typeof data.remarks !== "string") { validate244.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs101 === errors; } else { var valid0 = true; } } } } } } } } } } } } } } } } else { validate244.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate244.errors = vErrors; return errors === 0; } function validate202(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/assessment_plan" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if (((((data.uuid === undefined) && (missing0 = "uuid")) || ((data.metadata === undefined) && (missing0 = "metadata"))) || ((data.import_ssp === undefined) && (missing0 = "import_ssp"))) || ((data.reviewed_controls === undefined) && (missing0 = "reviewed_controls"))) { validate202.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(func8.call(schema202.properties, key0))) { validate202.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.uuid !== undefined) { let data0 = data.uuid; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern0.test(data0)) { validate202.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate202.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.metadata !== undefined) { const _errs4 = errors; if (!(validate22(data.metadata, { instancePath: instancePath + "/metadata", parentData: data, parentDataProperty: "metadata", rootData }))) { vErrors = vErrors === null ? validate22.errors : vErrors.concat(validate22.errors); errors = vErrors.length; } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.import_ssp !== undefined) { const _errs5 = errors; if (!(validate204(data.import_ssp, { instancePath: instancePath + "/import_ssp", parentData: data, parentDataProperty: "import_ssp", rootData }))) { vErrors = vErrors === null ? validate204.errors : vErrors.concat(validate204.errors); errors = vErrors.length; } var valid0 = _errs5 === errors; } else { var valid0 = true; } if (valid0) { if (data.local_definitions !== undefined) { let data3 = data.local_definitions; const _errs6 = errors; if (errors === _errs6) { if (data3 && typeof data3 == "object" && !Array.isArray(data3)) { const _errs8 = errors; for (const key1 in data3) { if (!((((((key1 === "components") || (key1 === "inventory_items")) || (key1 === "users")) || (key1 === "objectives_and_methods")) || (key1 === "activities")) || (key1 === "remarks"))) { validate202.errors = [{ instancePath: instancePath + "/local_definitions", schemaPath: "#/properties/local_definitions/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs8 === errors) { if (data3.components !== undefined) { let data4 = data3.components; const _errs9 = errors; if (errors === _errs9) { if (Array.isArray(data4)) { if (data4.length < 1) { validate202.errors = [{ instancePath: instancePath + "/local_definitions/components", schemaPath: "#/properties/local_definitions/properties/components/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len0 = data4.length; for (let i0 = 0; i0 < len0; i0++) { const _errs11 = errors; if (!(validate187(data4[i0], { instancePath: instancePath + "/local_definitions/components/" + i0, parentData: data4, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate187.errors : vErrors.concat(validate187.errors); errors = vErrors.length; } var valid2 = _errs11 === errors; if (!valid2) { break; } } } } else { validate202.errors = [{ instancePath: instancePath + "/local_definitions/components", schemaPath: "#/properties/local_definitions/properties/components/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid1 = _errs9 === errors; } else { var valid1 = true; } if (valid1) { if (data3.inventory_items !== undefined) { let data6 = data3.inventory_items; const _errs12 = errors; if (errors === _errs12) { if (Array.isArray(data6)) { if (data6.length < 1) { validate202.errors = [{ instancePath: instancePath + "/local_definitions/inventory_items", schemaPath: "#/properties/local_definitions/properties/inventory_items/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid3 = true; const len1 = data6.length; for (let i1 = 0; i1 < len1; i1++) { const _errs14 = errors; if (!(validate192(data6[i1], { instancePath: instancePath + "/local_definitions/inventory_items/" + i1, parentData: data6, parentDataProperty: i1, rootData }))) { vErrors = vErrors === null ? validate192.errors : vErrors.concat(validate192.errors); errors = vErrors.length; } var valid3 = _errs14 === errors; if (!valid3) { break; } } } } else { validate202.errors = [{ instancePath: instancePath + "/local_definitions/inventory_items", schemaPath: "#/properties/local_definitions/properties/inventory_items/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid1 = _errs12 === errors; } else { var valid1 = true; } if (valid1) { if (data3.users !== undefined) { let data8 = data3.users; const _errs15 = errors; if (errors === _errs15) { if (Array.isArray(data8)) { if (data8.length < 1) { validate202.errors = [{ instancePath: instancePath + "/local_definitions/users", schemaPath: "#/properties/local_definitions/properties/users/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid4 = true; const len2 = data8.length; for (let i2 = 0; i2 < len2; i2++) { const _errs17 = errors; if (!(validate182(data8[i2], { instancePath: instancePath + "/local_definitions/users/" + i2, parentData: data8, parentDataProperty: i2, rootData }))) { vErrors = vErrors === null ? validate182.errors : vErrors.concat(validate182.errors); errors = vErrors.length; } var valid4 = _errs17 === errors; if (!valid4) { break; } } } } else { validate202.errors = [{ instancePath: instancePath + "/local_definitions/users", schemaPath: "#/properties/local_definitions/properties/users/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid1 = _errs15 === errors; } else { var valid1 = true; } if (valid1) { if (data3.objectives_and_methods !== undefined) { let data10 = data3.objectives_and_methods; const _errs18 = errors; if (errors === _errs18) { if (Array.isArray(data10)) { if (data10.length < 1) { validate202.errors = [{ instancePath: instancePath + "/local_definitions/objectives_and_methods", schemaPath: "#/properties/local_definitions/properties/objectives_and_methods/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid5 = true; const len3 = data10.length; for (let i3 = 0; i3 < len3; i3++) { const _errs20 = errors; if (!(validate209(data10[i3], { instancePath: instancePath + "/local_definitions/objectives_and_methods/" + i3, parentData: data10, parentDataProperty: i3, rootData }))) { vErrors = vErrors === null ? validate209.errors : vErrors.concat(validate209.errors); errors = vErrors.length; } var valid5 = _errs20 === errors; if (!valid5) { break; } } } } else { validate202.errors = [{ instancePath: instancePath + "/local_definitions/objectives_and_methods", schemaPath: "#/properties/local_definitions/properties/objectives_and_methods/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid1 = _errs18 === errors; } else { var valid1 = true; } if (valid1) { if (data3.activities !== undefined) { let data12 = data3.activities; const _errs21 = errors; if (errors === _errs21) { if (Array.isArray(data12)) { if (data12.length < 1) { validate202.errors = [{ instancePath: instancePath + "/local_definitions/activities", schemaPath: "#/properties/local_definitions/properties/activities/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid6 = true; const len4 = data12.length; for (let i4 = 0; i4 < len4; i4++) { const _errs23 = errors; if (!(validate213(data12[i4], { instancePath: instancePath + "/local_definitions/activities/" + i4, parentData: data12, parentDataProperty: i4, rootData }))) { vErrors = vErrors === null ? validate213.errors : vErrors.concat(validate213.errors); errors = vErrors.length; } var valid6 = _errs23 === errors; if (!valid6) { break; } } } } else { validate202.errors = [{ instancePath: instancePath + "/local_definitions/activities", schemaPath: "#/properties/local_definitions/properties/activities/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid1 = _errs21 === errors; } else { var valid1 = true; } if (valid1) { if (data3.remarks !== undefined) { const _errs24 = errors; if (typeof data3.remarks !== "string") { validate202.errors = [{ instancePath: instancePath + "/local_definitions/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid1 = _errs24 === errors; } else { var valid1 = true; } } } } } } } } else { validate202.errors = [{ instancePath: instancePath + "/local_definitions", schemaPath: "#/properties/local_definitions/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.terms_and_conditions !== undefined) { let data15 = data.terms_and_conditions; const _errs27 = errors; if (errors === _errs27) { if (data15 && typeof data15 == "object" && !Array.isArray(data15)) { const _errs29 = errors; for (const key2 in data15) { if (!(key2 === "parts")) { validate202.errors = [{ instancePath: instancePath + "/terms_and_conditions", schemaPath: "#/properties/terms_and_conditions/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs29 === errors) { if (data15.parts !== undefined) { let data16 = data15.parts; const _errs30 = errors; if (errors === _errs30) { if (Array.isArray(data16)) { if (data16.length < 1) { validate202.errors = [{ instancePath: instancePath + "/terms_and_conditions/parts", schemaPath: "#/properties/terms_and_conditions/properties/parts/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid9 = true; const len5 = data16.length; for (let i5 = 0; i5 < len5; i5++) { const _errs32 = errors; if (!(validate225(data16[i5], { instancePath: instancePath + "/terms_and_conditions/parts/" + i5, parentData: data16, parentDataProperty: i5, rootData }))) { vErrors = vErrors === null ? validate225.errors : vErrors.concat(validate225.errors); errors = vErrors.length; } var valid9 = _errs32 === errors; if (!valid9) { break; } } } } else { validate202.errors = [{ instancePath: instancePath + "/terms_and_conditions/parts", schemaPath: "#/properties/terms_and_conditions/properties/parts/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } } } } else { validate202.errors = [{ instancePath: instancePath + "/terms_and_conditions", schemaPath: "#/properties/terms_and_conditions/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid0 = _errs27 === errors; } else { var valid0 = true; } if (valid0) { if (data.reviewed_controls !== undefined) { const _errs33 = errors; if (!(validate216(data.reviewed_controls, { instancePath: instancePath + "/reviewed_controls", parentData: data, parentDataProperty: "reviewed_controls", rootData }))) { vErrors = vErrors === null ? validate216.errors : vErrors.concat(validate216.errors); errors = vErrors.length; } var valid0 = _errs33 === errors; } else { var valid0 = true; } if (valid0) { if (data.assessment_subjects !== undefined) { let data19 = data.assessment_subjects; const _errs34 = errors; if (errors === _errs34) { if (Array.isArray(data19)) { if (data19.length < 1) { validate202.errors = [{ instancePath: instancePath + "/assessment_subjects", schemaPath: "#/properties/assessment_subjects/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid10 = true; const len6 = data19.length; for (let i6 = 0; i6 < len6; i6++) { const _errs36 = errors; if (!(validate229(data19[i6], { instancePath: instancePath + "/assessment_subjects/" + i6, parentData: data19, parentDataProperty: i6, rootData }))) { vErrors = vErrors === null ? validate229.errors : vErrors.concat(validate229.errors); errors = vErrors.length; } var valid10 = _errs36 === errors; if (!valid10) { break; } } } } else { validate202.errors = [{ instancePath: instancePath + "/assessment_subjects", schemaPath: "#/properties/assessment_subjects/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs34 === errors; } else { var valid0 = true; } if (valid0) { if (data.assessment_assets !== undefined) { const _errs37 = errors; if (!(validate236(data.assessment_assets, { instancePath: instancePath + "/assessment_assets", parentData: data, parentDataProperty: "assessment_assets", rootData }))) { vErrors = vErrors === null ? validate236.errors : vErrors.concat(validate236.errors); errors = vErrors.length; } var valid0 = _errs37 === errors; } else { var valid0 = true; } if (valid0) { if (data.tasks !== undefined) { let data22 = data.tasks; const _errs38 = errors; if (errors === _errs38) { if (Array.isArray(data22)) { if (data22.length < 1) { validate202.errors = [{ instancePath: instancePath + "/tasks", schemaPath: "#/properties/tasks/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid11 = true; const len7 = data22.length; for (let i7 = 0; i7 < len7; i7++) { const _errs40 = errors; if (!(validate244(data22[i7], { instancePath: instancePath + "/tasks/" + i7, parentData: data22, parentDataProperty: i7, rootData }))) { vErrors = vErrors === null ? validate244.errors : vErrors.concat(validate244.errors); errors = vErrors.length; } var valid11 = _errs40 === errors; if (!valid11) { break; } } } } else { validate202.errors = [{ instancePath: instancePath + "/tasks", schemaPath: "#/properties/tasks/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs38 === errors; } else { var valid0 = true; } if (valid0) { if (data.back_matter !== undefined) { const _errs41 = errors; if (!(validate62(data.back_matter, { instancePath: instancePath + "/back_matter", parentData: data, parentDataProperty: "back_matter", rootData }))) { vErrors = vErrors === null ? validate62.errors : vErrors.concat(validate62.errors); errors = vErrors.length; } var valid0 = _errs41 === errors; } else { var valid0 = true; } } } } } } } } } } } } } else { validate202.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate202.errors = vErrors; return errors === 0; } const schema245 = { "title": "Security Assessment Results (SAR)", "description": "Security assessment results, such as those provided by a FedRAMP assessor in the FedRAMP Security Assessment Report.", "$id": "#/definitions/assessment_results", "type": "object", "properties": { "uuid": { "title": "Assessment Results Universally Unique Identifier", "description": "Uniquely identifies this assessment results file. This UUID must be changed each time the content of the results changes.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "metadata": { "$ref": "#/definitions/metadata" }, "import_ap": { "$ref": "#/definitions/import_ap" }, "local_definitions": { "title": "Local Definitions", "description": "Used to define data objects that are used in the assessment plan, that do not appear in the referenced SSP.", "type": "object", "properties": { "objectives_and_methods": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/local_objective" } }, "activities": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/activity" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "additionalProperties": false }, "results": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/result" } }, "back_matter": { "$ref": "#/definitions/back_matter" } }, "required": ["uuid", "metadata", "import_ap", "results"], "additionalProperties": false }; const schema246 = { "title": "Import Assessment Plan", "description": "Used by assessment_results to import information about the original plan for assessing the system.", "$id": "#/definitions/import_ap", "type": "object", "properties": { "href": { "title": "Assessment Plan Reference", "description": ">A resolvable URL reference to the assessment plan governing the assessment activities.", "type": "string", "format": "uri-reference" }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["href"], "additionalProperties": false }; function validate256(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/import_ap" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((data.href === undefined) && (missing0 = "href")) { validate256.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!((key0 === "href") || (key0 === "remarks"))) { validate256.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.href !== undefined) { let data0 = data.href; const _errs2 = errors; if (errors === _errs2) { if (errors === _errs2) { if (typeof data0 === "string") { if (!(formats10.test(data0))) { validate256.errors = [{ instancePath: instancePath + "/href", schemaPath: "#/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate256.errors = [{ instancePath: instancePath + "/href", schemaPath: "#/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs4 = errors; if (typeof data.remarks !== "string") { validate256.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs4 === errors; } else { var valid0 = true; } } } } } else { validate256.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate256.errors = vErrors; return errors === 0; } const schema249 = { "title": "Assessment Result", "description": "Used by the assessment results and POA&M. In the assessment results, this identifies all of the assessment observations and findings, initial and residual risks, deviations, and disposition. In the POA&M, this identifies initial and residual risks, deviations, and disposition.", "$id": "#/definitions/result", "type": "object", "properties": { "uuid": { "title": "Results Universally Unique Identifier", "description": "Uniquely identifies this set of results. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given set of results across revisions.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "title": { "title": "Results Title", "description": "The title for this set of results.", "type": "string" }, "description": { "title": "Results Description", "description": "A human_readable description of this set of test results.", "type": "string" }, "start": { "title": "start field", "description": "Date/time stamp identifying the start of the evidence collection reflected in these results.", "type": "string", "format": "date-time", "pattern": "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, "end": { "title": "end field", "description": "Date/time stamp identifying the end of the evidence collection reflected in these results. In a continuous motoring scenario, this may contain the same value as start if appropriate.", "type": "string", "format": "date-time", "pattern": "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, "prop": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "local_definitions": { "title": "Local Definitions", "description": "Used to define data objects that are used in the assessment plan, that do not appear in the referenced SSP.", "type": "object", "properties": { "components": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/system_component" } }, "inventory_items": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/inventory_item" } }, "users": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/system_user" } }, "assessment_assets": { "$ref": "#/definitions/assessment_assets" }, "tasks": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/task" } } }, "additionalProperties": false }, "reviewed_controls": { "$ref": "#/definitions/reviewed_controls" }, "attestations": { "type": "array", "minItems": 1, "items": { "title": "Attestation Statements", "description": "A set of textual statements, typically written by the assessor.", "type": "object", "properties": { "responsible_parties": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_party" } }, "parts": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/assessment_part" } } }, "required": ["parts"], "additionalProperties": false } }, "assessment_log": { "title": "Assessment Log", "description": "A log of all assessment_related actions taken.", "type": "object", "properties": { "entries": { "type": "array", "minItems": 1, "items": { "title": "Assessment Log Entry", "description": "Identifies the result of an action and/or task that occurred as part of executing an assessment plan or an assessment event that occurred in producing the assessment results.", "type": "object", "properties": { "uuid": { "title": "Assessment Log Entry Universally Unique Identifier", "description": "Uniquely identifies an assessment event. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. A UUID should be consistently used for this schedule across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "title": { "title": "Action Title", "description": "The title for this event.", "type": "string" }, "description": { "title": "Action Description", "description": "A human_readable description of this event.", "type": "string" }, "start": { "title": "Start", "description": "Identifies the start date and time of an event.", "type": "string", "format": "date-time", "pattern": "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, "end": { "title": "End", "description": "Identifies the end date and time of an event. If the event is a point in time, the start and end will be the same date and time.", "type": "string", "format": "date-time", "pattern": "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "logged_by": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/logged_by" } }, "related_tasks": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/related_task" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "start"], "additionalProperties": false } } }, "required": ["entries"], "additionalProperties": false }, "observations": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/observation" } }, "risks": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/risk" } }, "findings": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/finding" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "title", "description", "start", "reviewed_controls"], "additionalProperties": false }; const schema252 = { "title": "Logged By", "description": "Used to indicate who created a log entry in what role.", "$id": "#/definitions/logged_by", "type": "object", "properties": { "party_uuid": { "title": "Party UUID Reference", "description": "A pointer to the party who is making the log entry.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "role_id": { "title": "Actor Role", "description": "A point to the role_id of the role in which the party is making the log entry.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" } }, "required": ["party_uuid"], "additionalProperties": false }; const schema253 = { "title": "Task Reference", "description": "Identifies an individual task for which the containing object is a consequence of.", "$id": "#/definitions/related_task", "type": "object", "properties": { "task_uuid": { "title": "Task Universally Unique Identifier Reference", "description": "References a unique task by UUID.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "responsible_parties": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/responsible_party" } }, "subjects": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/assessment_subject" } }, "identified_subject": { "title": "Identified Subject", "description": "Used to detail assessment subjects that were identfied by this task.", "type": "object", "properties": { "subject_placeholder_uuid": { "title": "Assessment Subject Placeholder Universally Unique Identifier Reference", "description": "References a unique assessment subject placeholder defined by this task.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "subjects": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/assessment_subject" } } }, "required": ["subject_placeholder_uuid", "subjects"], "additionalProperties": false }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["task_uuid"], "additionalProperties": false }; function validate271(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/related_task" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((data.task_uuid === undefined) && (missing0 = "task_uuid")) { validate271.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(((((((key0 === "task_uuid") || (key0 === "props")) || (key0 === "links")) || (key0 === "responsible_parties")) || (key0 === "subjects")) || (key0 === "identified_subject")) || (key0 === "remarks"))) { validate271.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.task_uuid !== undefined) { let data0 = data.task_uuid; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern0.test(data0)) { validate271.errors = [{ instancePath: instancePath + "/task_uuid", schemaPath: "#/properties/task_uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate271.errors = [{ instancePath: instancePath + "/task_uuid", schemaPath: "#/properties/task_uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data1 = data.props; const _errs4 = errors; if (errors === _errs4) { if (Array.isArray(data1)) { if (data1.length < 1) { validate271.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data1.length; for (let i0 = 0; i0 < len0; i0++) { const _errs6 = errors; if (!(validate24(data1[i0], { instancePath: instancePath + "/props/" + i0, parentData: data1, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs6 === errors; if (!valid1) { break; } } } } else { validate271.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data3 = data.links; const _errs7 = errors; if (errors === _errs7) { if (Array.isArray(data3)) { if (data3.length < 1) { validate271.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data3.length; for (let i1 = 0; i1 < len1; i1++) { let data4 = data3[i1]; const _errs9 = errors; const _errs10 = errors; if (errors === _errs10) { if (data4 && typeof data4 == "object" && !Array.isArray(data4)) { let missing1; if ((data4.href === undefined) && (missing1 = "href")) { validate271.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs12 = errors; for (const key1 in data4) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate271.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs12 === errors) { if (data4.href !== undefined) { let data5 = data4.href; const _errs13 = errors; if (errors === _errs13) { if (errors === _errs13) { if (typeof data5 === "string") { if (!(formats10.test(data5))) { validate271.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate271.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid4 = _errs13 === errors; } else { var valid4 = true; } if (valid4) { if (data4.rel !== undefined) { let data6 = data4.rel; const _errs15 = errors; if (errors === _errs15) { if (typeof data6 === "string") { if (!pattern9.test(data6)) { validate271.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate271.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs15 === errors; } else { var valid4 = true; } if (valid4) { if (data4.media_type !== undefined) { let data7 = data4.media_type; const _errs17 = errors; if (errors === _errs17) { if (typeof data7 === "string") { if (!pattern3.test(data7)) { validate271.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate271.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs17 === errors; } else { var valid4 = true; } if (valid4) { if (data4.text !== undefined) { const _errs19 = errors; if (typeof data4.text !== "string") { validate271.errors = [{ instancePath: instancePath + "/links/" + i1 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid4 = _errs19 === errors; } else { var valid4 = true; } } } } } } } else { validate271.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs9 === errors; if (!valid2) { break; } } } } else { validate271.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs7 === errors; } else { var valid0 = true; } if (valid0) { if (data.responsible_parties !== undefined) { let data9 = data.responsible_parties; const _errs21 = errors; if (errors === _errs21) { if (Array.isArray(data9)) { if (data9.length < 1) { validate271.errors = [{ instancePath: instancePath + "/responsible_parties", schemaPath: "#/properties/responsible_parties/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid5 = true; const len2 = data9.length; for (let i2 = 0; i2 < len2; i2++) { const _errs23 = errors; if (!(validate40(data9[i2], { instancePath: instancePath + "/responsible_parties/" + i2, parentData: data9, parentDataProperty: i2, rootData }))) { vErrors = vErrors === null ? validate40.errors : vErrors.concat(validate40.errors); errors = vErrors.length; } var valid5 = _errs23 === errors; if (!valid5) { break; } } } } else { validate271.errors = [{ instancePath: instancePath + "/responsible_parties", schemaPath: "#/properties/responsible_parties/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs21 === errors; } else { var valid0 = true; } if (valid0) { if (data.subjects !== undefined) { let data11 = data.subjects; const _errs24 = errors; if (errors === _errs24) { if (Array.isArray(data11)) { if (data11.length < 1) { validate271.errors = [{ instancePath: instancePath + "/subjects", schemaPath: "#/properties/subjects/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid6 = true; const len3 = data11.length; for (let i3 = 0; i3 < len3; i3++) { const _errs26 = errors; if (!(validate229(data11[i3], { instancePath: instancePath + "/subjects/" + i3, parentData: data11, parentDataProperty: i3, rootData }))) { vErrors = vErrors === null ? validate229.errors : vErrors.concat(validate229.errors); errors = vErrors.length; } var valid6 = _errs26 === errors; if (!valid6) { break; } } } } else { validate271.errors = [{ instancePath: instancePath + "/subjects", schemaPath: "#/properties/subjects/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs24 === errors; } else { var valid0 = true; } if (valid0) { if (data.identified_subject !== undefined) { let data13 = data.identified_subject; const _errs27 = errors; if (errors === _errs27) { if (data13 && typeof data13 == "object" && !Array.isArray(data13)) { let missing2; if (((data13.subject_placeholder_uuid === undefined) && (missing2 = "subject_placeholder_uuid")) || ((data13.subjects === undefined) && (missing2 = "subjects"))) { validate271.errors = [{ instancePath: instancePath + "/identified_subject", schemaPath: "#/properties/identified_subject/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" }]; return false; } else { const _errs29 = errors; for (const key2 in data13) { if (!((key2 === "subject_placeholder_uuid") || (key2 === "subjects"))) { validate271.errors = [{ instancePath: instancePath + "/identified_subject", schemaPath: "#/properties/identified_subject/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs29 === errors) { if (data13.subject_placeholder_uuid !== undefined) { let data14 = data13.subject_placeholder_uuid; const _errs30 = errors; if (errors === _errs30) { if (typeof data14 === "string") { if (!pattern0.test(data14)) { validate271.errors = [{ instancePath: instancePath + "/identified_subject/subject_placeholder_uuid", schemaPath: "#/properties/identified_subject/properties/subject_placeholder_uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate271.errors = [{ instancePath: instancePath + "/identified_subject/subject_placeholder_uuid", schemaPath: "#/properties/identified_subject/properties/subject_placeholder_uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid7 = _errs30 === errors; } else { var valid7 = true; } if (valid7) { if (data13.subjects !== undefined) { let data15 = data13.subjects; const _errs32 = errors; if (errors === _errs32) { if (Array.isArray(data15)) { if (data15.length < 1) { validate271.errors = [{ instancePath: instancePath + "/identified_subject/subjects", schemaPath: "#/properties/identified_subject/properties/subjects/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid8 = true; const len4 = data15.length; for (let i4 = 0; i4 < len4; i4++) { const _errs34 = errors; if (!(validate229(data15[i4], { instancePath: instancePath + "/identified_subject/subjects/" + i4, parentData: data15, parentDataProperty: i4, rootData }))) { vErrors = vErrors === null ? validate229.errors : vErrors.concat(validate229.errors); errors = vErrors.length; } var valid8 = _errs34 === errors; if (!valid8) { break; } } } } else { validate271.errors = [{ instancePath: instancePath + "/identified_subject/subjects", schemaPath: "#/properties/identified_subject/properties/subjects/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid7 = _errs32 === errors; } else { var valid7 = true; } } } } } else { validate271.errors = [{ instancePath: instancePath + "/identified_subject", schemaPath: "#/properties/identified_subject/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid0 = _errs27 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs35 = errors; if (typeof data.remarks !== "string") { validate271.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs35 === errors; } else { var valid0 = true; } } } } } } } } } } else { validate271.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate271.errors = vErrors; return errors === 0; } const schema257 = { "title": "Observation", "description": "Describes an individual observation.", "$id": "#/definitions/observation", "type": "object", "properties": { "uuid": { "title": "Observation Universally Unique Identifier", "description": "Uniquely identifies this observation. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given observation across revisions.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "title": { "title": "Observation Title", "description": "The title for this observation.", "type": "string" }, "description": { "title": "Observation Description", "description": "A human_readable description of this assessment observation.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "methods": { "type": "array", "minItems": 1, "items": { "title": "Observation Method", "description": "Identifies how the observation was made.", "type": "string", "pattern": "^\\S(.*\\S)?$" } }, "types": { "type": "array", "minItems": 1, "items": { "title": "Observation Type", "description": "Identifies the nature of the observation. More than one may be used to further qualify and enable filtering.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" } }, "origins": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/origin" } }, "subjects": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/subject_reference" } }, "relevant_evidence": { "type": "array", "minItems": 1, "items": { "title": "Relevant Evidence", "description": "Links this observation to relevant evidence.", "type": "object", "properties": { "href": { "title": "Relevant Evidence Reference", "description": ">A resolvable URL reference to relevant evidence.", "type": "string", "format": "uri-reference" }, "description": { "title": "Relevant Evidence Description", "description": "A human_readable description of this evidence.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["description"], "additionalProperties": false } }, "collected": { "title": "collected field", "description": "Date/time stamp identifying when the finding information was collected.", "type": "string", "format": "date-time", "pattern": "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, "expires": { "title": "expires field", "description": "Date/time identifying when the finding information is out_of_date and no longer valid. Typically used with continuous assessment scenarios.", "type": "string", "format": "date-time", "pattern": "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "description", "methods", "collected"], "additionalProperties": false }; const schema259 = { "title": "Origin", "description": "Identifies the source of the finding, such as a tool, interviewed person, or activity.", "$id": "#/definitions/origin", "type": "object", "properties": { "actors": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/origin_actor" } }, "related_tasks": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/related_task" } } }, "required": ["actors"], "additionalProperties": false }; const schema260 = { "title": "Originating Actor", "description": "The actor that produces an observation, a finding, or a risk. One or more actor type can be used to specify a person that is using a tool.", "$id": "#/definitions/origin_actor", "type": "object", "properties": { "type": { "title": "Actor Type", "description": "The kind of actor.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$", "enum": ["tool", "assessment_platform", "party"] }, "actor_uuid": { "title": "Actor Universally Unique Identifier Reference", "description": "A pointer to the tool or person based on the associated type.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "role_id": { "title": "Actor Role", "description": "For a party, this can optionally be used to specify the role the actor was performing.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } } }, "required": ["type", "actor_uuid"], "additionalProperties": false }; function validate280(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/origin_actor" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if (((data.type === undefined) && (missing0 = "type")) || ((data.actor_uuid === undefined) && (missing0 = "actor_uuid"))) { validate280.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(((((key0 === "type") || (key0 === "actor_uuid")) || (key0 === "role_id")) || (key0 === "props")) || (key0 === "links"))) { validate280.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.type !== undefined) { let data0 = data.type; const _errs2 = errors; if (!(((data0 === "tool") || (data0 === "assessment_platform")) || (data0 === "party"))) { validate280.errors = [{ instancePath: instancePath + "/type", schemaPath: "#/properties/type/enum", keyword: "enum", params: { allowedValues: schema260.properties.type.enum }, message: "must be equal to one of the allowed values" }]; return false; } if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern9.test(data0)) { validate280.errors = [{ instancePath: instancePath + "/type", schemaPath: "#/properties/type/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate280.errors = [{ instancePath: instancePath + "/type", schemaPath: "#/properties/type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.actor_uuid !== undefined) { let data1 = data.actor_uuid; const _errs4 = errors; if (errors === _errs4) { if (typeof data1 === "string") { if (!pattern0.test(data1)) { validate280.errors = [{ instancePath: instancePath + "/actor_uuid", schemaPath: "#/properties/actor_uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate280.errors = [{ instancePath: instancePath + "/actor_uuid", schemaPath: "#/properties/actor_uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.role_id !== undefined) { let data2 = data.role_id; const _errs6 = errors; if (errors === _errs6) { if (typeof data2 === "string") { if (!pattern9.test(data2)) { validate280.errors = [{ instancePath: instancePath + "/role_id", schemaPath: "#/properties/role_id/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate280.errors = [{ instancePath: instancePath + "/role_id", schemaPath: "#/properties/role_id/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data3 = data.props; const _errs8 = errors; if (errors === _errs8) { if (Array.isArray(data3)) { if (data3.length < 1) { validate280.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data3.length; for (let i0 = 0; i0 < len0; i0++) { const _errs10 = errors; if (!(validate24(data3[i0], { instancePath: instancePath + "/props/" + i0, parentData: data3, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs10 === errors; if (!valid1) { break; } } } } else { validate280.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs8 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data5 = data.links; const _errs11 = errors; if (errors === _errs11) { if (Array.isArray(data5)) { if (data5.length < 1) { validate280.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data5.length; for (let i1 = 0; i1 < len1; i1++) { let data6 = data5[i1]; const _errs13 = errors; const _errs14 = errors; if (errors === _errs14) { if (data6 && typeof data6 == "object" && !Array.isArray(data6)) { let missing1; if ((data6.href === undefined) && (missing1 = "href")) { validate280.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs16 = errors; for (const key1 in data6) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate280.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs16 === errors) { if (data6.href !== undefined) { let data7 = data6.href; const _errs17 = errors; if (errors === _errs17) { if (errors === _errs17) { if (typeof data7 === "string") { if (!(formats10.test(data7))) { validate280.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate280.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid4 = _errs17 === errors; } else { var valid4 = true; } if (valid4) { if (data6.rel !== undefined) { let data8 = data6.rel; const _errs19 = errors; if (errors === _errs19) { if (typeof data8 === "string") { if (!pattern9.test(data8)) { validate280.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate280.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs19 === errors; } else { var valid4 = true; } if (valid4) { if (data6.media_type !== undefined) { let data9 = data6.media_type; const _errs21 = errors; if (errors === _errs21) { if (typeof data9 === "string") { if (!pattern3.test(data9)) { validate280.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate280.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs21 === errors; } else { var valid4 = true; } if (valid4) { if (data6.text !== undefined) { const _errs23 = errors; if (typeof data6.text !== "string") { validate280.errors = [{ instancePath: instancePath + "/links/" + i1 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid4 = _errs23 === errors; } else { var valid4 = true; } } } } } } } else { validate280.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs13 === errors; if (!valid2) { break; } } } } else { validate280.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs11 === errors; } else { var valid0 = true; } } } } } } } } else { validate280.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate280.errors = vErrors; return errors === 0; } function validate279(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/origin" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((data.actors === undefined) && (missing0 = "actors")) { validate279.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!((key0 === "actors") || (key0 === "related_tasks"))) { validate279.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.actors !== undefined) { let data0 = data.actors; const _errs2 = errors; if (errors === _errs2) { if (Array.isArray(data0)) { if (data0.length < 1) { validate279.errors = [{ instancePath: instancePath + "/actors", schemaPath: "#/properties/actors/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data0.length; for (let i0 = 0; i0 < len0; i0++) { const _errs4 = errors; if (!(validate280(data0[i0], { instancePath: instancePath + "/actors/" + i0, parentData: data0, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate280.errors : vErrors.concat(validate280.errors); errors = vErrors.length; } var valid1 = _errs4 === errors; if (!valid1) { break; } } } } else { validate279.errors = [{ instancePath: instancePath + "/actors", schemaPath: "#/properties/actors/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.related_tasks !== undefined) { let data2 = data.related_tasks; const _errs5 = errors; if (errors === _errs5) { if (Array.isArray(data2)) { if (data2.length < 1) { validate279.errors = [{ instancePath: instancePath + "/related_tasks", schemaPath: "#/properties/related_tasks/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data2.length; for (let i1 = 0; i1 < len1; i1++) { const _errs7 = errors; if (!(validate271(data2[i1], { instancePath: instancePath + "/related_tasks/" + i1, parentData: data2, parentDataProperty: i1, rootData }))) { vErrors = vErrors === null ? validate271.errors : vErrors.concat(validate271.errors); errors = vErrors.length; } var valid2 = _errs7 === errors; if (!valid2) { break; } } } } else { validate279.errors = [{ instancePath: instancePath + "/related_tasks", schemaPath: "#/properties/related_tasks/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs5 === errors; } else { var valid0 = true; } } } } } else { validate279.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate279.errors = vErrors; return errors === 0; } const schema262 = { "title": "Identifies the Subject", "description": "A pointer to a resource based on its universally unique identifier (UUID). Use type to indicate whether the identified resource is a component, inventory item, location, user, or something else.", "$id": "#/definitions/subject_reference", "type": "object", "properties": { "subject_uuid": { "title": "Subject Universally Unique Identifier Reference", "description": "A pointer to a component, inventory_item, location, party, user, or resource using it's UUID.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "type": { "$id": "subject_uuid_reference_type", "title": "Subject Universally Unique Identifier Reference Type", "description": "Used to indicate the type of object pointed to by the uuid_ref within a subject.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "title": { "title": "Subject Reference Title", "description": "The title or name for the referenced subject.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["subject_uuid", "type"], "additionalProperties": false }; function validate285(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/subject_reference" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if (((data.subject_uuid === undefined) && (missing0 = "subject_uuid")) || ((data.type === undefined) && (missing0 = "type"))) { validate285.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!((((((key0 === "subject_uuid") || (key0 === "type")) || (key0 === "title")) || (key0 === "props")) || (key0 === "links")) || (key0 === "remarks"))) { validate285.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.subject_uuid !== undefined) { let data0 = data.subject_uuid; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern0.test(data0)) { validate285.errors = [{ instancePath: instancePath + "/subject_uuid", schemaPath: "#/properties/subject_uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate285.errors = [{ instancePath: instancePath + "/subject_uuid", schemaPath: "#/properties/subject_uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.type !== undefined) { let data1 = data.type; const _errs4 = errors; if (errors === _errs4) { if (typeof data1 === "string") { if (!pattern9.test(data1)) { validate285.errors = [{ instancePath: instancePath + "/type", schemaPath: "#/properties/type/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate285.errors = [{ instancePath: instancePath + "/type", schemaPath: "#/properties/type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.title !== undefined) { const _errs6 = errors; if (typeof data.title !== "string") { validate285.errors = [{ instancePath: instancePath + "/title", schemaPath: "#/properties/title/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data3 = data.props; const _errs8 = errors; if (errors === _errs8) { if (Array.isArray(data3)) { if (data3.length < 1) { validate285.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data3.length; for (let i0 = 0; i0 < len0; i0++) { const _errs10 = errors; if (!(validate24(data3[i0], { instancePath: instancePath + "/props/" + i0, parentData: data3, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs10 === errors; if (!valid1) { break; } } } } else { validate285.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs8 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data5 = data.links; const _errs11 = errors; if (errors === _errs11) { if (Array.isArray(data5)) { if (data5.length < 1) { validate285.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data5.length; for (let i1 = 0; i1 < len1; i1++) { let data6 = data5[i1]; const _errs13 = errors; const _errs14 = errors; if (errors === _errs14) { if (data6 && typeof data6 == "object" && !Array.isArray(data6)) { let missing1; if ((data6.href === undefined) && (missing1 = "href")) { validate285.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs16 = errors; for (const key1 in data6) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate285.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs16 === errors) { if (data6.href !== undefined) { let data7 = data6.href; const _errs17 = errors; if (errors === _errs17) { if (errors === _errs17) { if (typeof data7 === "string") { if (!(formats10.test(data7))) { validate285.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate285.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid4 = _errs17 === errors; } else { var valid4 = true; } if (valid4) { if (data6.rel !== undefined) { let data8 = data6.rel; const _errs19 = errors; if (errors === _errs19) { if (typeof data8 === "string") { if (!pattern9.test(data8)) { validate285.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate285.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs19 === errors; } else { var valid4 = true; } if (valid4) { if (data6.media_type !== undefined) { let data9 = data6.media_type; const _errs21 = errors; if (errors === _errs21) { if (typeof data9 === "string") { if (!pattern3.test(data9)) { validate285.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate285.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs21 === errors; } else { var valid4 = true; } if (valid4) { if (data6.text !== undefined) { const _errs23 = errors; if (typeof data6.text !== "string") { validate285.errors = [{ instancePath: instancePath + "/links/" + i1 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid4 = _errs23 === errors; } else { var valid4 = true; } } } } } } } else { validate285.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs13 === errors; if (!valid2) { break; } } } } else { validate285.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs11 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs25 = errors; if (typeof data.remarks !== "string") { validate285.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs25 === errors; } else { var valid0 = true; } } } } } } } } } else { validate285.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate285.errors = vErrors; return errors === 0; } function validate277(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/observation" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if (((((data.uuid === undefined) && (missing0 = "uuid")) || ((data.description === undefined) && (missing0 = "description"))) || ((data.methods === undefined) && (missing0 = "methods"))) || ((data.collected === undefined) && (missing0 = "collected"))) { validate277.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(func8.call(schema257.properties, key0))) { validate277.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.uuid !== undefined) { let data0 = data.uuid; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern0.test(data0)) { validate277.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate277.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.title !== undefined) { const _errs4 = errors; if (typeof data.title !== "string") { validate277.errors = [{ instancePath: instancePath + "/title", schemaPath: "#/properties/title/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.description !== undefined) { const _errs6 = errors; if (typeof data.description !== "string") { validate277.errors = [{ instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data3 = data.props; const _errs8 = errors; if (errors === _errs8) { if (Array.isArray(data3)) { if (data3.length < 1) { validate277.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data3.length; for (let i0 = 0; i0 < len0; i0++) { const _errs10 = errors; if (!(validate24(data3[i0], { instancePath: instancePath + "/props/" + i0, parentData: data3, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs10 === errors; if (!valid1) { break; } } } } else { validate277.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs8 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data5 = data.links; const _errs11 = errors; if (errors === _errs11) { if (Array.isArray(data5)) { if (data5.length < 1) { validate277.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data5.length; for (let i1 = 0; i1 < len1; i1++) { let data6 = data5[i1]; const _errs13 = errors; const _errs14 = errors; if (errors === _errs14) { if (data6 && typeof data6 == "object" && !Array.isArray(data6)) { let missing1; if ((data6.href === undefined) && (missing1 = "href")) { validate277.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs16 = errors; for (const key1 in data6) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate277.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs16 === errors) { if (data6.href !== undefined) { let data7 = data6.href; const _errs17 = errors; if (errors === _errs17) { if (errors === _errs17) { if (typeof data7 === "string") { if (!(formats10.test(data7))) { validate277.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate277.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid4 = _errs17 === errors; } else { var valid4 = true; } if (valid4) { if (data6.rel !== undefined) { let data8 = data6.rel; const _errs19 = errors; if (errors === _errs19) { if (typeof data8 === "string") { if (!pattern9.test(data8)) { validate277.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate277.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs19 === errors; } else { var valid4 = true; } if (valid4) { if (data6.media_type !== undefined) { let data9 = data6.media_type; const _errs21 = errors; if (errors === _errs21) { if (typeof data9 === "string") { if (!pattern3.test(data9)) { validate277.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate277.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs21 === errors; } else { var valid4 = true; } if (valid4) { if (data6.text !== undefined) { const _errs23 = errors; if (typeof data6.text !== "string") { validate277.errors = [{ instancePath: instancePath + "/links/" + i1 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid4 = _errs23 === errors; } else { var valid4 = true; } } } } } } } else { validate277.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs13 === errors; if (!valid2) { break; } } } } else { validate277.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs11 === errors; } else { var valid0 = true; } if (valid0) { if (data.methods !== undefined) { let data11 = data.methods; const _errs25 = errors; if (errors === _errs25) { if (Array.isArray(data11)) { if (data11.length < 1) { validate277.errors = [{ instancePath: instancePath + "/methods", schemaPath: "#/properties/methods/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid5 = true; const len2 = data11.length; for (let i2 = 0; i2 < len2; i2++) { let data12 = data11[i2]; const _errs27 = errors; if (errors === _errs27) { if (typeof data12 === "string") { if (!pattern3.test(data12)) { validate277.errors = [{ instancePath: instancePath + "/methods/" + i2, schemaPath: "#/properties/methods/items/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate277.errors = [{ instancePath: instancePath + "/methods/" + i2, schemaPath: "#/properties/methods/items/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid5 = _errs27 === errors; if (!valid5) { break; } } } } else { validate277.errors = [{ instancePath: instancePath + "/methods", schemaPath: "#/properties/methods/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs25 === errors; } else { var valid0 = true; } if (valid0) { if (data.types !== undefined) { let data13 = data.types; const _errs29 = errors; if (errors === _errs29) { if (Array.isArray(data13)) { if (data13.length < 1) { validate277.errors = [{ instancePath: instancePath + "/types", schemaPath: "#/properties/types/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid6 = true; const len3 = data13.length; for (let i3 = 0; i3 < len3; i3++) { let data14 = data13[i3]; const _errs31 = errors; if (errors === _errs31) { if (typeof data14 === "string") { if (!pattern9.test(data14)) { validate277.errors = [{ instancePath: instancePath + "/types/" + i3, schemaPath: "#/properties/types/items/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate277.errors = [{ instancePath: instancePath + "/types/" + i3, schemaPath: "#/properties/types/items/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid6 = _errs31 === errors; if (!valid6) { break; } } } } else { validate277.errors = [{ instancePath: instancePath + "/types", schemaPath: "#/properties/types/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs29 === errors; } else { var valid0 = true; } if (valid0) { if (data.origins !== undefined) { let data15 = data.origins; const _errs33 = errors; if (errors === _errs33) { if (Array.isArray(data15)) { if (data15.length < 1) { validate277.errors = [{ instancePath: instancePath + "/origins", schemaPath: "#/properties/origins/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid7 = true; const len4 = data15.length; for (let i4 = 0; i4 < len4; i4++) { const _errs35 = errors; if (!(validate279(data15[i4], { instancePath: instancePath + "/origins/" + i4, parentData: data15, parentDataProperty: i4, rootData }))) { vErrors = vErrors === null ? validate279.errors : vErrors.concat(validate279.errors); errors = vErrors.length; } var valid7 = _errs35 === errors; if (!valid7) { break; } } } } else { validate277.errors = [{ instancePath: instancePath + "/origins", schemaPath: "#/properties/origins/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs33 === errors; } else { var valid0 = true; } if (valid0) { if (data.subjects !== undefined) { let data17 = data.subjects; const _errs36 = errors; if (errors === _errs36) { if (Array.isArray(data17)) { if (data17.length < 1) { validate277.errors = [{ instancePath: instancePath + "/subjects", schemaPath: "#/properties/subjects/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid8 = true; const len5 = data17.length; for (let i5 = 0; i5 < len5; i5++) { const _errs38 = errors; if (!(validate285(data17[i5], { instancePath: instancePath + "/subjects/" + i5, parentData: data17, parentDataProperty: i5, rootData }))) { vErrors = vErrors === null ? validate285.errors : vErrors.concat(validate285.errors); errors = vErrors.length; } var valid8 = _errs38 === errors; if (!valid8) { break; } } } } else { validate277.errors = [{ instancePath: instancePath + "/subjects", schemaPath: "#/properties/subjects/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs36 === errors; } else { var valid0 = true; } if (valid0) { if (data.relevant_evidence !== undefined) { let data19 = data.relevant_evidence; const _errs39 = errors; if (errors === _errs39) { if (Array.isArray(data19)) { if (data19.length < 1) { validate277.errors = [{ instancePath: instancePath + "/relevant_evidence", schemaPath: "#/properties/relevant_evidence/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid9 = true; const len6 = data19.length; for (let i6 = 0; i6 < len6; i6++) { let data20 = data19[i6]; const _errs41 = errors; if (errors === _errs41) { if (data20 && typeof data20 == "object" && !Array.isArray(data20)) { let missing2; if ((data20.description === undefined) && (missing2 = "description")) { validate277.errors = [{ instancePath: instancePath + "/relevant_evidence/" + i6, schemaPath: "#/properties/relevant_evidence/items/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" }]; return false; } else { const _errs43 = errors; for (const key2 in data20) { if (!(((((key2 === "href") || (key2 === "description")) || (key2 === "props")) || (key2 === "links")) || (key2 === "remarks"))) { validate277.errors = [{ instancePath: instancePath + "/relevant_evidence/" + i6, schemaPath: "#/properties/relevant_evidence/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs43 === errors) { if (data20.href !== undefined) { let data21 = data20.href; const _errs44 = errors; if (errors === _errs44) { if (errors === _errs44) { if (typeof data21 === "string") { if (!(formats10.test(data21))) { validate277.errors = [{ instancePath: instancePath + "/relevant_evidence/" + i6 + "/href", schemaPath: "#/properties/relevant_evidence/items/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate277.errors = [{ instancePath: instancePath + "/relevant_evidence/" + i6 + "/href", schemaPath: "#/properties/relevant_evidence/items/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid10 = _errs44 === errors; } else { var valid10 = true; } if (valid10) { if (data20.description !== undefined) { const _errs46 = errors; if (typeof data20.description !== "string") { validate277.errors = [{ instancePath: instancePath + "/relevant_evidence/" + i6 + "/description", schemaPath: "#/properties/relevant_evidence/items/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid10 = _errs46 === errors; } else { var valid10 = true; } if (valid10) { if (data20.props !== undefined) { let data23 = data20.props; const _errs48 = errors; if (errors === _errs48) { if (Array.isArray(data23)) { if (data23.length < 1) { validate277.errors = [{ instancePath: instancePath + "/relevant_evidence/" + i6 + "/props", schemaPath: "#/properties/relevant_evidence/items/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid11 = true; const len7 = data23.length; for (let i7 = 0; i7 < len7; i7++) { const _errs50 = errors; if (!(validate24(data23[i7], { instancePath: instancePath + "/relevant_evidence/" + i6 + "/props/" + i7, parentData: data23, parentDataProperty: i7, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid11 = _errs50 === errors; if (!valid11) { break; } } } } else { validate277.errors = [{ instancePath: instancePath + "/relevant_evidence/" + i6 + "/props", schemaPath: "#/properties/relevant_evidence/items/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid10 = _errs48 === errors; } else { var valid10 = true; } if (valid10) { if (data20.links !== undefined) { let data25 = data20.links; const _errs51 = errors; if (errors === _errs51) { if (Array.isArray(data25)) { if (data25.length < 1) { validate277.errors = [{ instancePath: instancePath + "/relevant_evidence/" + i6 + "/links", schemaPath: "#/properties/relevant_evidence/items/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid12 = true; const len8 = data25.length; for (let i8 = 0; i8 < len8; i8++) { let data26 = data25[i8]; const _errs53 = errors; const _errs54 = errors; if (errors === _errs54) { if (data26 && typeof data26 == "object" && !Array.isArray(data26)) { let missing3; if ((data26.href === undefined) && (missing3 = "href")) { validate277.errors = [{ instancePath: instancePath + "/relevant_evidence/" + i6 + "/links/" + i8, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing3 }, message: "must have required property '" + missing3 + "'" }]; return false; } else { const _errs56 = errors; for (const key3 in data26) { if (!((((key3 === "href") || (key3 === "rel")) || (key3 === "media_type")) || (key3 === "text"))) { validate277.errors = [{ instancePath: instancePath + "/relevant_evidence/" + i6 + "/links/" + i8, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key3 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs56 === errors) { if (data26.href !== undefined) { let data27 = data26.href; const _errs57 = errors; if (errors === _errs57) { if (errors === _errs57) { if (typeof data27 === "string") { if (!(formats10.test(data27))) { validate277.errors = [{ instancePath: instancePath + "/relevant_evidence/" + i6 + "/links/" + i8 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate277.errors = [{ instancePath: instancePath + "/relevant_evidence/" + i6 + "/links/" + i8 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid14 = _errs57 === errors; } else { var valid14 = true; } if (valid14) { if (data26.rel !== undefined) { let data28 = data26.rel; const _errs59 = errors; if (errors === _errs59) { if (typeof data28 === "string") { if (!pattern9.test(data28)) { validate277.errors = [{ instancePath: instancePath + "/relevant_evidence/" + i6 + "/links/" + i8 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate277.errors = [{ instancePath: instancePath + "/relevant_evidence/" + i6 + "/links/" + i8 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid14 = _errs59 === errors; } else { var valid14 = true; } if (valid14) { if (data26.media_type !== undefined) { let data29 = data26.media_type; const _errs61 = errors; if (errors === _errs61) { if (typeof data29 === "string") { if (!pattern3.test(data29)) { validate277.errors = [{ instancePath: instancePath + "/relevant_evidence/" + i6 + "/links/" + i8 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate277.errors = [{ instancePath: instancePath + "/relevant_evidence/" + i6 + "/links/" + i8 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid14 = _errs61 === errors; } else { var valid14 = true; } if (valid14) { if (data26.text !== undefined) { const _errs63 = errors; if (typeof data26.text !== "string") { validate277.errors = [{ instancePath: instancePath + "/relevant_evidence/" + i6 + "/links/" + i8 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid14 = _errs63 === errors; } else { var valid14 = true; } } } } } } } else { validate277.errors = [{ instancePath: instancePath + "/relevant_evidence/" + i6 + "/links/" + i8, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid12 = _errs53 === errors; if (!valid12) { break; } } } } else { validate277.errors = [{ instancePath: instancePath + "/relevant_evidence/" + i6 + "/links", schemaPath: "#/properties/relevant_evidence/items/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid10 = _errs51 === errors; } else { var valid10 = true; } if (valid10) { if (data20.remarks !== undefined) { const _errs65 = errors; if (typeof data20.remarks !== "string") { validate277.errors = [{ instancePath: instancePath + "/relevant_evidence/" + i6 + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid10 = _errs65 === errors; } else { var valid10 = true; } } } } } } } } else { validate277.errors = [{ instancePath: instancePath + "/relevant_evidence/" + i6, schemaPath: "#/properties/relevant_evidence/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid9 = _errs41 === errors; if (!valid9) { break; } } } } else { validate277.errors = [{ instancePath: instancePath + "/relevant_evidence", schemaPath: "#/properties/relevant_evidence/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs39 === errors; } else { var valid0 = true; } if (valid0) { if (data.collected !== undefined) { let data32 = data.collected; const _errs68 = errors; if (errors === _errs68) { if (errors === _errs68) { if (typeof data32 === "string") { if (!pattern1.test(data32)) { validate277.errors = [{ instancePath: instancePath + "/collected", schemaPath: "#/properties/collected/pattern", keyword: "pattern", params: { pattern: "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, message: "must match pattern \"" + "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" + "\"" }]; return false; } else { if (!(formats0.validate(data32))) { validate277.errors = [{ instancePath: instancePath + "/collected", schemaPath: "#/properties/collected/format", keyword: "format", params: { format: "date-time" }, message: "must match format \"" + "date-time" + "\"" }]; return false; } } } else { validate277.errors = [{ instancePath: instancePath + "/collected", schemaPath: "#/properties/collected/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid0 = _errs68 === errors; } else { var valid0 = true; } if (valid0) { if (data.expires !== undefined) { let data33 = data.expires; const _errs70 = errors; if (errors === _errs70) { if (errors === _errs70) { if (typeof data33 === "string") { if (!pattern1.test(data33)) { validate277.errors = [{ instancePath: instancePath + "/expires", schemaPath: "#/properties/expires/pattern", keyword: "pattern", params: { pattern: "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, message: "must match pattern \"" + "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" + "\"" }]; return false; } else { if (!(formats0.validate(data33))) { validate277.errors = [{ instancePath: instancePath + "/expires", schemaPath: "#/properties/expires/format", keyword: "format", params: { format: "date-time" }, message: "must match format \"" + "date-time" + "\"" }]; return false; } } } else { validate277.errors = [{ instancePath: instancePath + "/expires", schemaPath: "#/properties/expires/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid0 = _errs70 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs72 = errors; if (typeof data.remarks !== "string") { validate277.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs72 === errors; } else { var valid0 = true; } } } } } } } } } } } } } } } } else { validate277.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate277.errors = vErrors; return errors === 0; } const schema268 = { "title": "Identified Risk", "description": "An identified risk.", "$id": "#/definitions/risk", "type": "object", "properties": { "uuid": { "title": "Risk Universally Unique Identifier", "description": "Uniquely identifies this risk. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given risk across revisions.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "title": { "title": "Risk Title", "description": "The title for this risk.", "type": "string" }, "description": { "title": "Risk Description", "description": "A human_readable summary of the identified risk, to include a statement of how the risk impacts the system.", "type": "string" }, "statement": { "title": "Risk Statement", "description": "An summary of impact for how the risk affects the system.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "status": { "title": "Status", "description": "Describes the status of the associated risk.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "origins": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/origin" } }, "threat_ids": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/threat_id" } }, "characterizations": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/characterization" } }, "mitigating_factors": { "type": "array", "minItems": 1, "items": { "title": "Mitigating Factor", "description": "Describes an existing mitigating factor that may affect the overall determination of the risk, with an optional link to an implementation statement in the SSP.", "type": "object", "properties": { "uuid": { "title": "Mitigating Factor Universally Unique Identifier", "description": "Uniquely identifies this mitigating factor. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given mitigating factor across revisions.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "implementation_uuid": { "title": "Implementation UUID", "description": "Points to an implementation statement in the SSP.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "description": { "title": "Mitigating Factor Description", "description": "A human_readable description of this mitigating factor.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "subjects": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/subject_reference" } } }, "required": ["uuid", "description"], "additionalProperties": false } }, "deadline": { "title": "Risk Resolution Deadline", "description": "The date/time by which the risk must be resolved.", "type": "string", "format": "date-time", "pattern": "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, "remediations": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/response" } }, "risk_log": { "title": "Risk Log", "description": "A log of all risk_related tasks taken.", "type": "object", "properties": { "entries": { "type": "array", "minItems": 1, "items": { "title": "Risk Log Entry", "description": "Identifies an individual risk response that occurred as part of managing an identified risk.", "type": "object", "properties": { "uuid": { "title": "Risk Log Entry Universally Unique Identifier", "description": "Uniquely identifies a risk log entry. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. A UUID should be consistently used for this schedule across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "title": { "title": "Title", "description": "The title for this risk log entry.", "type": "string" }, "description": { "title": "Risk Task Description", "description": "A human_readable description of what was done regarding the risk.", "type": "string" }, "start": { "title": "Start", "description": "Identifies the start date and time of the event.", "type": "string", "format": "date-time", "pattern": "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, "end": { "title": "End", "description": "Identifies the end date and time of the event. If the event is a point in time, the start and end will be the same date and time.", "type": "string", "format": "date-time", "pattern": "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "logged_by": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/logged_by" } }, "status_change": { "$ref": "#/definitions/risk_status" }, "related_responses": { "type": "array", "minItems": 1, "items": { "title": "Risk Response Reference", "description": "Identifies an individual risk response that this log entry is for.", "type": "object", "properties": { "response_uuid": { "title": "Response Universally Unique Identifier Reference", "description": "References a unique risk response by UUID.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "related_tasks": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/related_task" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["response_uuid"], "additionalProperties": false } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "start"], "additionalProperties": false } } }, "required": ["entries"], "additionalProperties": false }, "related_observations": { "type": "array", "minItems": 1, "items": { "title": "Related Observation", "description": "Relates the finding to a set of referenced observations that were used to determine the finding.", "type": "object", "properties": { "observation_uuid": { "title": "Observation Universally Unique Identifier Reference", "description": "References an observation defined in the list of observations.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" } }, "required": ["observation_uuid"], "additionalProperties": false } } }, "required": ["uuid", "title", "description", "statement", "status"], "additionalProperties": false }; const schema270 = { "title": "Threat ID", "description": "A pointer, by ID, to an externally_defined threat.", "$id": "#/definitions/threat_id", "type": "object", "properties": { "system": { "title": "Threat Type Identification System", "description": "Specifies the source of the threat information.", "type": "string", "format": "uri" }, "href": { "title": "Threat Information Resource Reference", "description": "An optional location for the threat data, from which this ID originates.", "type": "string", "format": "uri-reference" }, "id": { "type": "string" } }, "required": ["id", "system"], "additionalProperties": false }; const schema283 = { "title": "Risk Status", "description": "Describes the status of the associated risk.", "$id": "#/definitions/risk_status", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }; const schema271 = { "title": "Characterization", "description": "A collection of descriptive data about the containing object from a specific origin.", "$id": "#/definitions/characterization", "type": "object", "properties": { "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "origin": { "$ref": "#/definitions/origin" }, "facets": { "type": "array", "minItems": 1, "items": { "title": "Facet", "description": "An individual characteristic that is part of a larger set produced by the same actor.", "type": "object", "properties": { "name": { "title": "Facet Name", "description": "The name of the risk metric within the specified system.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "system": { "title": "Naming System", "description": "Specifies the naming system under which this risk metric is organized, which allows for the same names to be used in different systems controlled by different parties. This avoids the potential of a name clash.", "type": "string", "format": "uri" }, "value": { "title": "Facet Value", "description": "Indicates the value of the facet.", "type": "string", "pattern": "^\\S(.*\\S)?$" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["name", "system", "value"], "additionalProperties": false } } }, "required": ["origin", "facets"], "additionalProperties": false }; function validate293(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/characterization" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if (((data.origin === undefined) && (missing0 = "origin")) || ((data.facets === undefined) && (missing0 = "facets"))) { validate293.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!((((key0 === "props") || (key0 === "links")) || (key0 === "origin")) || (key0 === "facets"))) { validate293.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.props !== undefined) { let data0 = data.props; const _errs2 = errors; if (errors === _errs2) { if (Array.isArray(data0)) { if (data0.length < 1) { validate293.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data0.length; for (let i0 = 0; i0 < len0; i0++) { const _errs4 = errors; if (!(validate24(data0[i0], { instancePath: instancePath + "/props/" + i0, parentData: data0, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs4 === errors; if (!valid1) { break; } } } } else { validate293.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data2 = data.links; const _errs5 = errors; if (errors === _errs5) { if (Array.isArray(data2)) { if (data2.length < 1) { validate293.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data2.length; for (let i1 = 0; i1 < len1; i1++) { let data3 = data2[i1]; const _errs7 = errors; const _errs8 = errors; if (errors === _errs8) { if (data3 && typeof data3 == "object" && !Array.isArray(data3)) { let missing1; if ((data3.href === undefined) && (missing1 = "href")) { validate293.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs10 = errors; for (const key1 in data3) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate293.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs10 === errors) { if (data3.href !== undefined) { let data4 = data3.href; const _errs11 = errors; if (errors === _errs11) { if (errors === _errs11) { if (typeof data4 === "string") { if (!(formats10.test(data4))) { validate293.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate293.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid4 = _errs11 === errors; } else { var valid4 = true; } if (valid4) { if (data3.rel !== undefined) { let data5 = data3.rel; const _errs13 = errors; if (errors === _errs13) { if (typeof data5 === "string") { if (!pattern9.test(data5)) { validate293.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate293.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs13 === errors; } else { var valid4 = true; } if (valid4) { if (data3.media_type !== undefined) { let data6 = data3.media_type; const _errs15 = errors; if (errors === _errs15) { if (typeof data6 === "string") { if (!pattern3.test(data6)) { validate293.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate293.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs15 === errors; } else { var valid4 = true; } if (valid4) { if (data3.text !== undefined) { const _errs17 = errors; if (typeof data3.text !== "string") { validate293.errors = [{ instancePath: instancePath + "/links/" + i1 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid4 = _errs17 === errors; } else { var valid4 = true; } } } } } } } else { validate293.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs7 === errors; if (!valid2) { break; } } } } else { validate293.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs5 === errors; } else { var valid0 = true; } if (valid0) { if (data.origin !== undefined) { const _errs19 = errors; if (!(validate279(data.origin, { instancePath: instancePath + "/origin", parentData: data, parentDataProperty: "origin", rootData }))) { vErrors = vErrors === null ? validate279.errors : vErrors.concat(validate279.errors); errors = vErrors.length; } var valid0 = _errs19 === errors; } else { var valid0 = true; } if (valid0) { if (data.facets !== undefined) { let data9 = data.facets; const _errs20 = errors; if (errors === _errs20) { if (Array.isArray(data9)) { if (data9.length < 1) { validate293.errors = [{ instancePath: instancePath + "/facets", schemaPath: "#/properties/facets/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid5 = true; const len2 = data9.length; for (let i2 = 0; i2 < len2; i2++) { let data10 = data9[i2]; const _errs22 = errors; if (errors === _errs22) { if (data10 && typeof data10 == "object" && !Array.isArray(data10)) { let missing2; if ((((data10.name === undefined) && (missing2 = "name")) || ((data10.system === undefined) && (missing2 = "system"))) || ((data10.value === undefined) && (missing2 = "value"))) { validate293.errors = [{ instancePath: instancePath + "/facets/" + i2, schemaPath: "#/properties/facets/items/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" }]; return false; } else { const _errs24 = errors; for (const key2 in data10) { if (!((((((key2 === "name") || (key2 === "system")) || (key2 === "value")) || (key2 === "props")) || (key2 === "links")) || (key2 === "remarks"))) { validate293.errors = [{ instancePath: instancePath + "/facets/" + i2, schemaPath: "#/properties/facets/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs24 === errors) { if (data10.name !== undefined) { let data11 = data10.name; const _errs25 = errors; if (errors === _errs25) { if (typeof data11 === "string") { if (!pattern9.test(data11)) { validate293.errors = [{ instancePath: instancePath + "/facets/" + i2 + "/name", schemaPath: "#/properties/facets/items/properties/name/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate293.errors = [{ instancePath: instancePath + "/facets/" + i2 + "/name", schemaPath: "#/properties/facets/items/properties/name/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid6 = _errs25 === errors; } else { var valid6 = true; } if (valid6) { if (data10.system !== undefined) { let data12 = data10.system; const _errs27 = errors; if (errors === _errs27) { if (errors === _errs27) { if (typeof data12 === "string") { if (!(formats8(data12))) { validate293.errors = [{ instancePath: instancePath + "/facets/" + i2 + "/system", schemaPath: "#/properties/facets/items/properties/system/format", keyword: "format", params: { format: "uri" }, message: "must match format \"" + "uri" + "\"" }]; return false; } } else { validate293.errors = [{ instancePath: instancePath + "/facets/" + i2 + "/system", schemaPath: "#/properties/facets/items/properties/system/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid6 = _errs27 === errors; } else { var valid6 = true; } if (valid6) { if (data10.value !== undefined) { let data13 = data10.value; const _errs29 = errors; if (errors === _errs29) { if (typeof data13 === "string") { if (!pattern3.test(data13)) { validate293.errors = [{ instancePath: instancePath + "/facets/" + i2 + "/value", schemaPath: "#/properties/facets/items/properties/value/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate293.errors = [{ instancePath: instancePath + "/facets/" + i2 + "/value", schemaPath: "#/properties/facets/items/properties/value/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid6 = _errs29 === errors; } else { var valid6 = true; } if (valid6) { if (data10.props !== undefined) { let data14 = data10.props; const _errs31 = errors; if (errors === _errs31) { if (Array.isArray(data14)) { if (data14.length < 1) { validate293.errors = [{ instancePath: instancePath + "/facets/" + i2 + "/props", schemaPath: "#/properties/facets/items/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid7 = true; const len3 = data14.length; for (let i3 = 0; i3 < len3; i3++) { const _errs33 = errors; if (!(validate24(data14[i3], { instancePath: instancePath + "/facets/" + i2 + "/props/" + i3, parentData: data14, parentDataProperty: i3, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid7 = _errs33 === errors; if (!valid7) { break; } } } } else { validate293.errors = [{ instancePath: instancePath + "/facets/" + i2 + "/props", schemaPath: "#/properties/facets/items/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid6 = _errs31 === errors; } else { var valid6 = true; } if (valid6) { if (data10.links !== undefined) { let data16 = data10.links; const _errs34 = errors; if (errors === _errs34) { if (Array.isArray(data16)) { if (data16.length < 1) { validate293.errors = [{ instancePath: instancePath + "/facets/" + i2 + "/links", schemaPath: "#/properties/facets/items/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid8 = true; const len4 = data16.length; for (let i4 = 0; i4 < len4; i4++) { let data17 = data16[i4]; const _errs36 = errors; const _errs37 = errors; if (errors === _errs37) { if (data17 && typeof data17 == "object" && !Array.isArray(data17)) { let missing3; if ((data17.href === undefined) && (missing3 = "href")) { validate293.errors = [{ instancePath: instancePath + "/facets/" + i2 + "/links/" + i4, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing3 }, message: "must have required property '" + missing3 + "'" }]; return false; } else { const _errs39 = errors; for (const key3 in data17) { if (!((((key3 === "href") || (key3 === "rel")) || (key3 === "media_type")) || (key3 === "text"))) { validate293.errors = [{ instancePath: instancePath + "/facets/" + i2 + "/links/" + i4, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key3 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs39 === errors) { if (data17.href !== undefined) { let data18 = data17.href; const _errs40 = errors; if (errors === _errs40) { if (errors === _errs40) { if (typeof data18 === "string") { if (!(formats10.test(data18))) { validate293.errors = [{ instancePath: instancePath + "/facets/" + i2 + "/links/" + i4 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate293.errors = [{ instancePath: instancePath + "/facets/" + i2 + "/links/" + i4 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid10 = _errs40 === errors; } else { var valid10 = true; } if (valid10) { if (data17.rel !== undefined) { let data19 = data17.rel; const _errs42 = errors; if (errors === _errs42) { if (typeof data19 === "string") { if (!pattern9.test(data19)) { validate293.errors = [{ instancePath: instancePath + "/facets/" + i2 + "/links/" + i4 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate293.errors = [{ instancePath: instancePath + "/facets/" + i2 + "/links/" + i4 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid10 = _errs42 === errors; } else { var valid10 = true; } if (valid10) { if (data17.media_type !== undefined) { let data20 = data17.media_type; const _errs44 = errors; if (errors === _errs44) { if (typeof data20 === "string") { if (!pattern3.test(data20)) { validate293.errors = [{ instancePath: instancePath + "/facets/" + i2 + "/links/" + i4 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate293.errors = [{ instancePath: instancePath + "/facets/" + i2 + "/links/" + i4 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid10 = _errs44 === errors; } else { var valid10 = true; } if (valid10) { if (data17.text !== undefined) { const _errs46 = errors; if (typeof data17.text !== "string") { validate293.errors = [{ instancePath: instancePath + "/facets/" + i2 + "/links/" + i4 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid10 = _errs46 === errors; } else { var valid10 = true; } } } } } } } else { validate293.errors = [{ instancePath: instancePath + "/facets/" + i2 + "/links/" + i4, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid8 = _errs36 === errors; if (!valid8) { break; } } } } else { validate293.errors = [{ instancePath: instancePath + "/facets/" + i2 + "/links", schemaPath: "#/properties/facets/items/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid6 = _errs34 === errors; } else { var valid6 = true; } if (valid6) { if (data10.remarks !== undefined) { const _errs48 = errors; if (typeof data10.remarks !== "string") { validate293.errors = [{ instancePath: instancePath + "/facets/" + i2 + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid6 = _errs48 === errors; } else { var valid6 = true; } } } } } } } } } else { validate293.errors = [{ instancePath: instancePath + "/facets/" + i2, schemaPath: "#/properties/facets/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid5 = _errs22 === errors; if (!valid5) { break; } } } } else { validate293.errors = [{ instancePath: instancePath + "/facets", schemaPath: "#/properties/facets/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs20 === errors; } else { var valid0 = true; } } } } } } } else { validate293.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate293.errors = vErrors; return errors === 0; } const schema276 = { "title": "Risk Response", "description": "Describes either recommended or an actual plan for addressing the risk.", "$id": "#/definitions/response", "type": "object", "properties": { "uuid": { "title": "Remediation Universally Unique Identifier", "description": "Uniquely identifies this remediation. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given remediation across revisions.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "lifecycle": { "title": "Remediation Intent", "description": "Identifies whether this is a recommendation, such as from an assessor or tool, or an actual plan accepted by the system owner.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "title": { "title": "Response Title", "description": "The title for this response activity.", "type": "string" }, "description": { "title": "Response Description", "description": "A human_readable description of this response plan.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "origins": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/origin" } }, "required_assets": { "type": "array", "minItems": 1, "items": { "title": "Required Asset", "description": "Identifies an asset required to achieve remediation.", "type": "object", "properties": { "uuid": { "title": "Required Universally Unique Identifier", "description": "Uniquely identifies this required asset. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given required asset across revisions.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "subjects": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/subject_reference" } }, "title": { "title": "Title for Required Asset", "description": "The title for this required asset.", "type": "string" }, "description": { "title": "Description of Required Asset", "description": "A human_readable description of this required asset.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "description"], "additionalProperties": false } }, "tasks": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/task" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "lifecycle", "title", "description"], "additionalProperties": false }; function validate300(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/response" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if (((((data.uuid === undefined) && (missing0 = "uuid")) || ((data.lifecycle === undefined) && (missing0 = "lifecycle"))) || ((data.title === undefined) && (missing0 = "title"))) || ((data.description === undefined) && (missing0 = "description"))) { validate300.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(func8.call(schema276.properties, key0))) { validate300.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.uuid !== undefined) { let data0 = data.uuid; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern0.test(data0)) { validate300.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate300.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.lifecycle !== undefined) { let data1 = data.lifecycle; const _errs4 = errors; if (errors === _errs4) { if (typeof data1 === "string") { if (!pattern9.test(data1)) { validate300.errors = [{ instancePath: instancePath + "/lifecycle", schemaPath: "#/properties/lifecycle/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate300.errors = [{ instancePath: instancePath + "/lifecycle", schemaPath: "#/properties/lifecycle/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.title !== undefined) { const _errs6 = errors; if (typeof data.title !== "string") { validate300.errors = [{ instancePath: instancePath + "/title", schemaPath: "#/properties/title/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.description !== undefined) { const _errs8 = errors; if (typeof data.description !== "string") { validate300.errors = [{ instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs8 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data4 = data.props; const _errs10 = errors; if (errors === _errs10) { if (Array.isArray(data4)) { if (data4.length < 1) { validate300.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data4.length; for (let i0 = 0; i0 < len0; i0++) { const _errs12 = errors; if (!(validate24(data4[i0], { instancePath: instancePath + "/props/" + i0, parentData: data4, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs12 === errors; if (!valid1) { break; } } } } else { validate300.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs10 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data6 = data.links; const _errs13 = errors; if (errors === _errs13) { if (Array.isArray(data6)) { if (data6.length < 1) { validate300.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data6.length; for (let i1 = 0; i1 < len1; i1++) { let data7 = data6[i1]; const _errs15 = errors; const _errs16 = errors; if (errors === _errs16) { if (data7 && typeof data7 == "object" && !Array.isArray(data7)) { let missing1; if ((data7.href === undefined) && (missing1 = "href")) { validate300.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs18 = errors; for (const key1 in data7) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate300.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs18 === errors) { if (data7.href !== undefined) { let data8 = data7.href; const _errs19 = errors; if (errors === _errs19) { if (errors === _errs19) { if (typeof data8 === "string") { if (!(formats10.test(data8))) { validate300.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate300.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid4 = _errs19 === errors; } else { var valid4 = true; } if (valid4) { if (data7.rel !== undefined) { let data9 = data7.rel; const _errs21 = errors; if (errors === _errs21) { if (typeof data9 === "string") { if (!pattern9.test(data9)) { validate300.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate300.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs21 === errors; } else { var valid4 = true; } if (valid4) { if (data7.media_type !== undefined) { let data10 = data7.media_type; const _errs23 = errors; if (errors === _errs23) { if (typeof data10 === "string") { if (!pattern3.test(data10)) { validate300.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate300.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs23 === errors; } else { var valid4 = true; } if (valid4) { if (data7.text !== undefined) { const _errs25 = errors; if (typeof data7.text !== "string") { validate300.errors = [{ instancePath: instancePath + "/links/" + i1 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid4 = _errs25 === errors; } else { var valid4 = true; } } } } } } } else { validate300.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs15 === errors; if (!valid2) { break; } } } } else { validate300.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs13 === errors; } else { var valid0 = true; } if (valid0) { if (data.origins !== undefined) { let data12 = data.origins; const _errs27 = errors; if (errors === _errs27) { if (Array.isArray(data12)) { if (data12.length < 1) { validate300.errors = [{ instancePath: instancePath + "/origins", schemaPath: "#/properties/origins/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid5 = true; const len2 = data12.length; for (let i2 = 0; i2 < len2; i2++) { const _errs29 = errors; if (!(validate279(data12[i2], { instancePath: instancePath + "/origins/" + i2, parentData: data12, parentDataProperty: i2, rootData }))) { vErrors = vErrors === null ? validate279.errors : vErrors.concat(validate279.errors); errors = vErrors.length; } var valid5 = _errs29 === errors; if (!valid5) { break; } } } } else { validate300.errors = [{ instancePath: instancePath + "/origins", schemaPath: "#/properties/origins/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs27 === errors; } else { var valid0 = true; } if (valid0) { if (data.required_assets !== undefined) { let data14 = data.required_assets; const _errs30 = errors; if (errors === _errs30) { if (Array.isArray(data14)) { if (data14.length < 1) { validate300.errors = [{ instancePath: instancePath + "/required_assets", schemaPath: "#/properties/required_assets/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid6 = true; const len3 = data14.length; for (let i3 = 0; i3 < len3; i3++) { let data15 = data14[i3]; const _errs32 = errors; if (errors === _errs32) { if (data15 && typeof data15 == "object" && !Array.isArray(data15)) { let missing2; if (((data15.uuid === undefined) && (missing2 = "uuid")) || ((data15.description === undefined) && (missing2 = "description"))) { validate300.errors = [{ instancePath: instancePath + "/required_assets/" + i3, schemaPath: "#/properties/required_assets/items/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" }]; return false; } else { const _errs34 = errors; for (const key2 in data15) { if (!(((((((key2 === "uuid") || (key2 === "subjects")) || (key2 === "title")) || (key2 === "description")) || (key2 === "props")) || (key2 === "links")) || (key2 === "remarks"))) { validate300.errors = [{ instancePath: instancePath + "/required_assets/" + i3, schemaPath: "#/properties/required_assets/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs34 === errors) { if (data15.uuid !== undefined) { let data16 = data15.uuid; const _errs35 = errors; if (errors === _errs35) { if (typeof data16 === "string") { if (!pattern0.test(data16)) { validate300.errors = [{ instancePath: instancePath + "/required_assets/" + i3 + "/uuid", schemaPath: "#/properties/required_assets/items/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate300.errors = [{ instancePath: instancePath + "/required_assets/" + i3 + "/uuid", schemaPath: "#/properties/required_assets/items/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid7 = _errs35 === errors; } else { var valid7 = true; } if (valid7) { if (data15.subjects !== undefined) { let data17 = data15.subjects; const _errs37 = errors; if (errors === _errs37) { if (Array.isArray(data17)) { if (data17.length < 1) { validate300.errors = [{ instancePath: instancePath + "/required_assets/" + i3 + "/subjects", schemaPath: "#/properties/required_assets/items/properties/subjects/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid8 = true; const len4 = data17.length; for (let i4 = 0; i4 < len4; i4++) { const _errs39 = errors; if (!(validate285(data17[i4], { instancePath: instancePath + "/required_assets/" + i3 + "/subjects/" + i4, parentData: data17, parentDataProperty: i4, rootData }))) { vErrors = vErrors === null ? validate285.errors : vErrors.concat(validate285.errors); errors = vErrors.length; } var valid8 = _errs39 === errors; if (!valid8) { break; } } } } else { validate300.errors = [{ instancePath: instancePath + "/required_assets/" + i3 + "/subjects", schemaPath: "#/properties/required_assets/items/properties/subjects/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid7 = _errs37 === errors; } else { var valid7 = true; } if (valid7) { if (data15.title !== undefined) { const _errs40 = errors; if (typeof data15.title !== "string") { validate300.errors = [{ instancePath: instancePath + "/required_assets/" + i3 + "/title", schemaPath: "#/properties/required_assets/items/properties/title/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid7 = _errs40 === errors; } else { var valid7 = true; } if (valid7) { if (data15.description !== undefined) { const _errs42 = errors; if (typeof data15.description !== "string") { validate300.errors = [{ instancePath: instancePath + "/required_assets/" + i3 + "/description", schemaPath: "#/properties/required_assets/items/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid7 = _errs42 === errors; } else { var valid7 = true; } if (valid7) { if (data15.props !== undefined) { let data21 = data15.props; const _errs44 = errors; if (errors === _errs44) { if (Array.isArray(data21)) { if (data21.length < 1) { validate300.errors = [{ instancePath: instancePath + "/required_assets/" + i3 + "/props", schemaPath: "#/properties/required_assets/items/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid9 = true; const len5 = data21.length; for (let i5 = 0; i5 < len5; i5++) { const _errs46 = errors; if (!(validate24(data21[i5], { instancePath: instancePath + "/required_assets/" + i3 + "/props/" + i5, parentData: data21, parentDataProperty: i5, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid9 = _errs46 === errors; if (!valid9) { break; } } } } else { validate300.errors = [{ instancePath: instancePath + "/required_assets/" + i3 + "/props", schemaPath: "#/properties/required_assets/items/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid7 = _errs44 === errors; } else { var valid7 = true; } if (valid7) { if (data15.links !== undefined) { let data23 = data15.links; const _errs47 = errors; if (errors === _errs47) { if (Array.isArray(data23)) { if (data23.length < 1) { validate300.errors = [{ instancePath: instancePath + "/required_assets/" + i3 + "/links", schemaPath: "#/properties/required_assets/items/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid10 = true; const len6 = data23.length; for (let i6 = 0; i6 < len6; i6++) { let data24 = data23[i6]; const _errs49 = errors; const _errs50 = errors; if (errors === _errs50) { if (data24 && typeof data24 == "object" && !Array.isArray(data24)) { let missing3; if ((data24.href === undefined) && (missing3 = "href")) { validate300.errors = [{ instancePath: instancePath + "/required_assets/" + i3 + "/links/" + i6, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing3 }, message: "must have required property '" + missing3 + "'" }]; return false; } else { const _errs52 = errors; for (const key3 in data24) { if (!((((key3 === "href") || (key3 === "rel")) || (key3 === "media_type")) || (key3 === "text"))) { validate300.errors = [{ instancePath: instancePath + "/required_assets/" + i3 + "/links/" + i6, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key3 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs52 === errors) { if (data24.href !== undefined) { let data25 = data24.href; const _errs53 = errors; if (errors === _errs53) { if (errors === _errs53) { if (typeof data25 === "string") { if (!(formats10.test(data25))) { validate300.errors = [{ instancePath: instancePath + "/required_assets/" + i3 + "/links/" + i6 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate300.errors = [{ instancePath: instancePath + "/required_assets/" + i3 + "/links/" + i6 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid12 = _errs53 === errors; } else { var valid12 = true; } if (valid12) { if (data24.rel !== undefined) { let data26 = data24.rel; const _errs55 = errors; if (errors === _errs55) { if (typeof data26 === "string") { if (!pattern9.test(data26)) { validate300.errors = [{ instancePath: instancePath + "/required_assets/" + i3 + "/links/" + i6 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate300.errors = [{ instancePath: instancePath + "/required_assets/" + i3 + "/links/" + i6 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid12 = _errs55 === errors; } else { var valid12 = true; } if (valid12) { if (data24.media_type !== undefined) { let data27 = data24.media_type; const _errs57 = errors; if (errors === _errs57) { if (typeof data27 === "string") { if (!pattern3.test(data27)) { validate300.errors = [{ instancePath: instancePath + "/required_assets/" + i3 + "/links/" + i6 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate300.errors = [{ instancePath: instancePath + "/required_assets/" + i3 + "/links/" + i6 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid12 = _errs57 === errors; } else { var valid12 = true; } if (valid12) { if (data24.text !== undefined) { const _errs59 = errors; if (typeof data24.text !== "string") { validate300.errors = [{ instancePath: instancePath + "/required_assets/" + i3 + "/links/" + i6 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid12 = _errs59 === errors; } else { var valid12 = true; } } } } } } } else { validate300.errors = [{ instancePath: instancePath + "/required_assets/" + i3 + "/links/" + i6, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid10 = _errs49 === errors; if (!valid10) { break; } } } } else { validate300.errors = [{ instancePath: instancePath + "/required_assets/" + i3 + "/links", schemaPath: "#/properties/required_assets/items/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid7 = _errs47 === errors; } else { var valid7 = true; } if (valid7) { if (data15.remarks !== undefined) { const _errs61 = errors; if (typeof data15.remarks !== "string") { validate300.errors = [{ instancePath: instancePath + "/required_assets/" + i3 + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid7 = _errs61 === errors; } else { var valid7 = true; } } } } } } } } } } else { validate300.errors = [{ instancePath: instancePath + "/required_assets/" + i3, schemaPath: "#/properties/required_assets/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid6 = _errs32 === errors; if (!valid6) { break; } } } } else { validate300.errors = [{ instancePath: instancePath + "/required_assets", schemaPath: "#/properties/required_assets/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs30 === errors; } else { var valid0 = true; } if (valid0) { if (data.tasks !== undefined) { let data30 = data.tasks; const _errs64 = errors; if (errors === _errs64) { if (Array.isArray(data30)) { if (data30.length < 1) { validate300.errors = [{ instancePath: instancePath + "/tasks", schemaPath: "#/properties/tasks/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid14 = true; const len7 = data30.length; for (let i7 = 0; i7 < len7; i7++) { const _errs66 = errors; if (!(validate244(data30[i7], { instancePath: instancePath + "/tasks/" + i7, parentData: data30, parentDataProperty: i7, rootData }))) { vErrors = vErrors === null ? validate244.errors : vErrors.concat(validate244.errors); errors = vErrors.length; } var valid14 = _errs66 === errors; if (!valid14) { break; } } } } else { validate300.errors = [{ instancePath: instancePath + "/tasks", schemaPath: "#/properties/tasks/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs64 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs67 = errors; if (typeof data.remarks !== "string") { validate300.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs67 === errors; } else { var valid0 = true; } } } } } } } } } } } } } else { validate300.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate300.errors = vErrors; return errors === 0; } function validate290(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/risk" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((((((data.uuid === undefined) && (missing0 = "uuid")) || ((data.title === undefined) && (missing0 = "title"))) || ((data.description === undefined) && (missing0 = "description"))) || ((data.statement === undefined) && (missing0 = "statement"))) || ((data.status === undefined) && (missing0 = "status"))) { validate290.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(func8.call(schema268.properties, key0))) { validate290.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.uuid !== undefined) { let data0 = data.uuid; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern0.test(data0)) { validate290.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate290.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.title !== undefined) { const _errs4 = errors; if (typeof data.title !== "string") { validate290.errors = [{ instancePath: instancePath + "/title", schemaPath: "#/properties/title/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.description !== undefined) { const _errs6 = errors; if (typeof data.description !== "string") { validate290.errors = [{ instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.statement !== undefined) { const _errs8 = errors; if (typeof data.statement !== "string") { validate290.errors = [{ instancePath: instancePath + "/statement", schemaPath: "#/properties/statement/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs8 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data4 = data.props; const _errs10 = errors; if (errors === _errs10) { if (Array.isArray(data4)) { if (data4.length < 1) { validate290.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data4.length; for (let i0 = 0; i0 < len0; i0++) { const _errs12 = errors; if (!(validate24(data4[i0], { instancePath: instancePath + "/props/" + i0, parentData: data4, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs12 === errors; if (!valid1) { break; } } } } else { validate290.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs10 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data6 = data.links; const _errs13 = errors; if (errors === _errs13) { if (Array.isArray(data6)) { if (data6.length < 1) { validate290.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data6.length; for (let i1 = 0; i1 < len1; i1++) { let data7 = data6[i1]; const _errs15 = errors; const _errs16 = errors; if (errors === _errs16) { if (data7 && typeof data7 == "object" && !Array.isArray(data7)) { let missing1; if ((data7.href === undefined) && (missing1 = "href")) { validate290.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs18 = errors; for (const key1 in data7) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate290.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs18 === errors) { if (data7.href !== undefined) { let data8 = data7.href; const _errs19 = errors; if (errors === _errs19) { if (errors === _errs19) { if (typeof data8 === "string") { if (!(formats10.test(data8))) { validate290.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate290.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid4 = _errs19 === errors; } else { var valid4 = true; } if (valid4) { if (data7.rel !== undefined) { let data9 = data7.rel; const _errs21 = errors; if (errors === _errs21) { if (typeof data9 === "string") { if (!pattern9.test(data9)) { validate290.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate290.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs21 === errors; } else { var valid4 = true; } if (valid4) { if (data7.media_type !== undefined) { let data10 = data7.media_type; const _errs23 = errors; if (errors === _errs23) { if (typeof data10 === "string") { if (!pattern3.test(data10)) { validate290.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate290.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs23 === errors; } else { var valid4 = true; } if (valid4) { if (data7.text !== undefined) { const _errs25 = errors; if (typeof data7.text !== "string") { validate290.errors = [{ instancePath: instancePath + "/links/" + i1 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid4 = _errs25 === errors; } else { var valid4 = true; } } } } } } } else { validate290.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs15 === errors; if (!valid2) { break; } } } } else { validate290.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs13 === errors; } else { var valid0 = true; } if (valid0) { if (data.status !== undefined) { let data12 = data.status; const _errs27 = errors; if (errors === _errs27) { if (typeof data12 === "string") { if (!pattern9.test(data12)) { validate290.errors = [{ instancePath: instancePath + "/status", schemaPath: "#/properties/status/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate290.errors = [{ instancePath: instancePath + "/status", schemaPath: "#/properties/status/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs27 === errors; } else { var valid0 = true; } if (valid0) { if (data.origins !== undefined) { let data13 = data.origins; const _errs29 = errors; if (errors === _errs29) { if (Array.isArray(data13)) { if (data13.length < 1) { validate290.errors = [{ instancePath: instancePath + "/origins", schemaPath: "#/properties/origins/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid5 = true; const len2 = data13.length; for (let i2 = 0; i2 < len2; i2++) { const _errs31 = errors; if (!(validate279(data13[i2], { instancePath: instancePath + "/origins/" + i2, parentData: data13, parentDataProperty: i2, rootData }))) { vErrors = vErrors === null ? validate279.errors : vErrors.concat(validate279.errors); errors = vErrors.length; } var valid5 = _errs31 === errors; if (!valid5) { break; } } } } else { validate290.errors = [{ instancePath: instancePath + "/origins", schemaPath: "#/properties/origins/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs29 === errors; } else { var valid0 = true; } if (valid0) { if (data.threat_ids !== undefined) { let data15 = data.threat_ids; const _errs32 = errors; if (errors === _errs32) { if (Array.isArray(data15)) { if (data15.length < 1) { validate290.errors = [{ instancePath: instancePath + "/threat_ids", schemaPath: "#/properties/threat_ids/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid6 = true; const len3 = data15.length; for (let i3 = 0; i3 < len3; i3++) { let data16 = data15[i3]; const _errs34 = errors; const _errs35 = errors; if (errors === _errs35) { if (data16 && typeof data16 == "object" && !Array.isArray(data16)) { let missing2; if (((data16.id === undefined) && (missing2 = "id")) || ((data16.system === undefined) && (missing2 = "system"))) { validate290.errors = [{ instancePath: instancePath + "/threat_ids/" + i3, schemaPath: "#/definitions/threat_id/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" }]; return false; } else { const _errs37 = errors; for (const key2 in data16) { if (!(((key2 === "system") || (key2 === "href")) || (key2 === "id"))) { validate290.errors = [{ instancePath: instancePath + "/threat_ids/" + i3, schemaPath: "#/definitions/threat_id/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs37 === errors) { if (data16.system !== undefined) { let data17 = data16.system; const _errs38 = errors; if (errors === _errs38) { if (errors === _errs38) { if (typeof data17 === "string") { if (!(formats8(data17))) { validate290.errors = [{ instancePath: instancePath + "/threat_ids/" + i3 + "/system", schemaPath: "#/definitions/threat_id/properties/system/format", keyword: "format", params: { format: "uri" }, message: "must match format \"" + "uri" + "\"" }]; return false; } } else { validate290.errors = [{ instancePath: instancePath + "/threat_ids/" + i3 + "/system", schemaPath: "#/definitions/threat_id/properties/system/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid8 = _errs38 === errors; } else { var valid8 = true; } if (valid8) { if (data16.href !== undefined) { let data18 = data16.href; const _errs40 = errors; if (errors === _errs40) { if (errors === _errs40) { if (typeof data18 === "string") { if (!(formats10.test(data18))) { validate290.errors = [{ instancePath: instancePath + "/threat_ids/" + i3 + "/href", schemaPath: "#/definitions/threat_id/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate290.errors = [{ instancePath: instancePath + "/threat_ids/" + i3 + "/href", schemaPath: "#/definitions/threat_id/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid8 = _errs40 === errors; } else { var valid8 = true; } if (valid8) { if (data16.id !== undefined) { const _errs42 = errors; if (typeof data16.id !== "string") { validate290.errors = [{ instancePath: instancePath + "/threat_ids/" + i3 + "/id", schemaPath: "#/definitions/threat_id/properties/id/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid8 = _errs42 === errors; } else { var valid8 = true; } } } } } } else { validate290.errors = [{ instancePath: instancePath + "/threat_ids/" + i3, schemaPath: "#/definitions/threat_id/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid6 = _errs34 === errors; if (!valid6) { break; } } } } else { validate290.errors = [{ instancePath: instancePath + "/threat_ids", schemaPath: "#/properties/threat_ids/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs32 === errors; } else { var valid0 = true; } if (valid0) { if (data.characterizations !== undefined) { let data20 = data.characterizations; const _errs44 = errors; if (errors === _errs44) { if (Array.isArray(data20)) { if (data20.length < 1) { validate290.errors = [{ instancePath: instancePath + "/characterizations", schemaPath: "#/properties/characterizations/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid9 = true; const len4 = data20.length; for (let i4 = 0; i4 < len4; i4++) { const _errs46 = errors; if (!(validate293(data20[i4], { instancePath: instancePath + "/characterizations/" + i4, parentData: data20, parentDataProperty: i4, rootData }))) { vErrors = vErrors === null ? validate293.errors : vErrors.concat(validate293.errors); errors = vErrors.length; } var valid9 = _errs46 === errors; if (!valid9) { break; } } } } else { validate290.errors = [{ instancePath: instancePath + "/characterizations", schemaPath: "#/properties/characterizations/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs44 === errors; } else { var valid0 = true; } if (valid0) { if (data.mitigating_factors !== undefined) { let data22 = data.mitigating_factors; const _errs47 = errors; if (errors === _errs47) { if (Array.isArray(data22)) { if (data22.length < 1) { validate290.errors = [{ instancePath: instancePath + "/mitigating_factors", schemaPath: "#/properties/mitigating_factors/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid10 = true; const len5 = data22.length; for (let i5 = 0; i5 < len5; i5++) { let data23 = data22[i5]; const _errs49 = errors; if (errors === _errs49) { if (data23 && typeof data23 == "object" && !Array.isArray(data23)) { let missing3; if (((data23.uuid === undefined) && (missing3 = "uuid")) || ((data23.description === undefined) && (missing3 = "description"))) { validate290.errors = [{ instancePath: instancePath + "/mitigating_factors/" + i5, schemaPath: "#/properties/mitigating_factors/items/required", keyword: "required", params: { missingProperty: missing3 }, message: "must have required property '" + missing3 + "'" }]; return false; } else { const _errs51 = errors; for (const key3 in data23) { if (!((((((key3 === "uuid") || (key3 === "implementation_uuid")) || (key3 === "description")) || (key3 === "props")) || (key3 === "links")) || (key3 === "subjects"))) { validate290.errors = [{ instancePath: instancePath + "/mitigating_factors/" + i5, schemaPath: "#/properties/mitigating_factors/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key3 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs51 === errors) { if (data23.uuid !== undefined) { let data24 = data23.uuid; const _errs52 = errors; if (errors === _errs52) { if (typeof data24 === "string") { if (!pattern0.test(data24)) { validate290.errors = [{ instancePath: instancePath + "/mitigating_factors/" + i5 + "/uuid", schemaPath: "#/properties/mitigating_factors/items/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate290.errors = [{ instancePath: instancePath + "/mitigating_factors/" + i5 + "/uuid", schemaPath: "#/properties/mitigating_factors/items/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid11 = _errs52 === errors; } else { var valid11 = true; } if (valid11) { if (data23.implementation_uuid !== undefined) { let data25 = data23.implementation_uuid; const _errs54 = errors; if (errors === _errs54) { if (typeof data25 === "string") { if (!pattern0.test(data25)) { validate290.errors = [{ instancePath: instancePath + "/mitigating_factors/" + i5 + "/implementation_uuid", schemaPath: "#/properties/mitigating_factors/items/properties/implementation_uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate290.errors = [{ instancePath: instancePath + "/mitigating_factors/" + i5 + "/implementation_uuid", schemaPath: "#/properties/mitigating_factors/items/properties/implementation_uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid11 = _errs54 === errors; } else { var valid11 = true; } if (valid11) { if (data23.description !== undefined) { const _errs56 = errors; if (typeof data23.description !== "string") { validate290.errors = [{ instancePath: instancePath + "/mitigating_factors/" + i5 + "/description", schemaPath: "#/properties/mitigating_factors/items/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid11 = _errs56 === errors; } else { var valid11 = true; } if (valid11) { if (data23.props !== undefined) { let data27 = data23.props; const _errs58 = errors; if (errors === _errs58) { if (Array.isArray(data27)) { if (data27.length < 1) { validate290.errors = [{ instancePath: instancePath + "/mitigating_factors/" + i5 + "/props", schemaPath: "#/properties/mitigating_factors/items/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid12 = true; const len6 = data27.length; for (let i6 = 0; i6 < len6; i6++) { const _errs60 = errors; if (!(validate24(data27[i6], { instancePath: instancePath + "/mitigating_factors/" + i5 + "/props/" + i6, parentData: data27, parentDataProperty: i6, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid12 = _errs60 === errors; if (!valid12) { break; } } } } else { validate290.errors = [{ instancePath: instancePath + "/mitigating_factors/" + i5 + "/props", schemaPath: "#/properties/mitigating_factors/items/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid11 = _errs58 === errors; } else { var valid11 = true; } if (valid11) { if (data23.links !== undefined) { let data29 = data23.links; const _errs61 = errors; if (errors === _errs61) { if (Array.isArray(data29)) { if (data29.length < 1) { validate290.errors = [{ instancePath: instancePath + "/mitigating_factors/" + i5 + "/links", schemaPath: "#/properties/mitigating_factors/items/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid13 = true; const len7 = data29.length; for (let i7 = 0; i7 < len7; i7++) { let data30 = data29[i7]; const _errs63 = errors; const _errs64 = errors; if (errors === _errs64) { if (data30 && typeof data30 == "object" && !Array.isArray(data30)) { let missing4; if ((data30.href === undefined) && (missing4 = "href")) { validate290.errors = [{ instancePath: instancePath + "/mitigating_factors/" + i5 + "/links/" + i7, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing4 }, message: "must have required property '" + missing4 + "'" }]; return false; } else { const _errs66 = errors; for (const key4 in data30) { if (!((((key4 === "href") || (key4 === "rel")) || (key4 === "media_type")) || (key4 === "text"))) { validate290.errors = [{ instancePath: instancePath + "/mitigating_factors/" + i5 + "/links/" + i7, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key4 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs66 === errors) { if (data30.href !== undefined) { let data31 = data30.href; const _errs67 = errors; if (errors === _errs67) { if (errors === _errs67) { if (typeof data31 === "string") { if (!(formats10.test(data31))) { validate290.errors = [{ instancePath: instancePath + "/mitigating_factors/" + i5 + "/links/" + i7 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate290.errors = [{ instancePath: instancePath + "/mitigating_factors/" + i5 + "/links/" + i7 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid15 = _errs67 === errors; } else { var valid15 = true; } if (valid15) { if (data30.rel !== undefined) { let data32 = data30.rel; const _errs69 = errors; if (errors === _errs69) { if (typeof data32 === "string") { if (!pattern9.test(data32)) { validate290.errors = [{ instancePath: instancePath + "/mitigating_factors/" + i5 + "/links/" + i7 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate290.errors = [{ instancePath: instancePath + "/mitigating_factors/" + i5 + "/links/" + i7 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid15 = _errs69 === errors; } else { var valid15 = true; } if (valid15) { if (data30.media_type !== undefined) { let data33 = data30.media_type; const _errs71 = errors; if (errors === _errs71) { if (typeof data33 === "string") { if (!pattern3.test(data33)) { validate290.errors = [{ instancePath: instancePath + "/mitigating_factors/" + i5 + "/links/" + i7 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate290.errors = [{ instancePath: instancePath + "/mitigating_factors/" + i5 + "/links/" + i7 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid15 = _errs71 === errors; } else { var valid15 = true; } if (valid15) { if (data30.text !== undefined) { const _errs73 = errors; if (typeof data30.text !== "string") { validate290.errors = [{ instancePath: instancePath + "/mitigating_factors/" + i5 + "/links/" + i7 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid15 = _errs73 === errors; } else { var valid15 = true; } } } } } } } else { validate290.errors = [{ instancePath: instancePath + "/mitigating_factors/" + i5 + "/links/" + i7, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid13 = _errs63 === errors; if (!valid13) { break; } } } } else { validate290.errors = [{ instancePath: instancePath + "/mitigating_factors/" + i5 + "/links", schemaPath: "#/properties/mitigating_factors/items/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid11 = _errs61 === errors; } else { var valid11 = true; } if (valid11) { if (data23.subjects !== undefined) { let data35 = data23.subjects; const _errs75 = errors; if (errors === _errs75) { if (Array.isArray(data35)) { if (data35.length < 1) { validate290.errors = [{ instancePath: instancePath + "/mitigating_factors/" + i5 + "/subjects", schemaPath: "#/properties/mitigating_factors/items/properties/subjects/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid16 = true; const len8 = data35.length; for (let i8 = 0; i8 < len8; i8++) { const _errs77 = errors; if (!(validate285(data35[i8], { instancePath: instancePath + "/mitigating_factors/" + i5 + "/subjects/" + i8, parentData: data35, parentDataProperty: i8, rootData }))) { vErrors = vErrors === null ? validate285.errors : vErrors.concat(validate285.errors); errors = vErrors.length; } var valid16 = _errs77 === errors; if (!valid16) { break; } } } } else { validate290.errors = [{ instancePath: instancePath + "/mitigating_factors/" + i5 + "/subjects", schemaPath: "#/properties/mitigating_factors/items/properties/subjects/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid11 = _errs75 === errors; } else { var valid11 = true; } } } } } } } } } else { validate290.errors = [{ instancePath: instancePath + "/mitigating_factors/" + i5, schemaPath: "#/properties/mitigating_factors/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid10 = _errs49 === errors; if (!valid10) { break; } } } } else { validate290.errors = [{ instancePath: instancePath + "/mitigating_factors", schemaPath: "#/properties/mitigating_factors/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs47 === errors; } else { var valid0 = true; } if (valid0) { if (data.deadline !== undefined) { let data37 = data.deadline; const _errs78 = errors; if (errors === _errs78) { if (errors === _errs78) { if (typeof data37 === "string") { if (!pattern1.test(data37)) { validate290.errors = [{ instancePath: instancePath + "/deadline", schemaPath: "#/properties/deadline/pattern", keyword: "pattern", params: { pattern: "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, message: "must match pattern \"" + "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" + "\"" }]; return false; } else { if (!(formats0.validate(data37))) { validate290.errors = [{ instancePath: instancePath + "/deadline", schemaPath: "#/properties/deadline/format", keyword: "format", params: { format: "date-time" }, message: "must match format \"" + "date-time" + "\"" }]; return false; } } } else { validate290.errors = [{ instancePath: instancePath + "/deadline", schemaPath: "#/properties/deadline/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid0 = _errs78 === errors; } else { var valid0 = true; } if (valid0) { if (data.remediations !== undefined) { let data38 = data.remediations; const _errs80 = errors; if (errors === _errs80) { if (Array.isArray(data38)) { if (data38.length < 1) { validate290.errors = [{ instancePath: instancePath + "/remediations", schemaPath: "#/properties/remediations/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid17 = true; const len9 = data38.length; for (let i9 = 0; i9 < len9; i9++) { const _errs82 = errors; if (!(validate300(data38[i9], { instancePath: instancePath + "/remediations/" + i9, parentData: data38, parentDataProperty: i9, rootData }))) { vErrors = vErrors === null ? validate300.errors : vErrors.concat(validate300.errors); errors = vErrors.length; } var valid17 = _errs82 === errors; if (!valid17) { break; } } } } else { validate290.errors = [{ instancePath: instancePath + "/remediations", schemaPath: "#/properties/remediations/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs80 === errors; } else { var valid0 = true; } if (valid0) { if (data.risk_log !== undefined) { let data40 = data.risk_log; const _errs83 = errors; if (errors === _errs83) { if (data40 && typeof data40 == "object" && !Array.isArray(data40)) { let missing5; if ((data40.entries === undefined) && (missing5 = "entries")) { validate290.errors = [{ instancePath: instancePath + "/risk_log", schemaPath: "#/properties/risk_log/required", keyword: "required", params: { missingProperty: missing5 }, message: "must have required property '" + missing5 + "'" }]; return false; } else { const _errs85 = errors; for (const key5 in data40) { if (!(key5 === "entries")) { validate290.errors = [{ instancePath: instancePath + "/risk_log", schemaPath: "#/properties/risk_log/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key5 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs85 === errors) { if (data40.entries !== undefined) { let data41 = data40.entries; const _errs86 = errors; if (errors === _errs86) { if (Array.isArray(data41)) { if (data41.length < 1) { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries", schemaPath: "#/properties/risk_log/properties/entries/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid19 = true; const len10 = data41.length; for (let i10 = 0; i10 < len10; i10++) { let data42 = data41[i10]; const _errs88 = errors; if (errors === _errs88) { if (data42 && typeof data42 == "object" && !Array.isArray(data42)) { let missing6; if (((data42.uuid === undefined) && (missing6 = "uuid")) || ((data42.start === undefined) && (missing6 = "start"))) { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10, schemaPath: "#/properties/risk_log/properties/entries/items/required", keyword: "required", params: { missingProperty: missing6 }, message: "must have required property '" + missing6 + "'" }]; return false; } else { const _errs90 = errors; for (const key6 in data42) { if (!(func8.call(schema268.properties.risk_log.properties.entries.items.properties, key6))) { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10, schemaPath: "#/properties/risk_log/properties/entries/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key6 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs90 === errors) { if (data42.uuid !== undefined) { let data43 = data42.uuid; const _errs91 = errors; if (errors === _errs91) { if (typeof data43 === "string") { if (!pattern0.test(data43)) { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/uuid", schemaPath: "#/properties/risk_log/properties/entries/items/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/uuid", schemaPath: "#/properties/risk_log/properties/entries/items/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid20 = _errs91 === errors; } else { var valid20 = true; } if (valid20) { if (data42.title !== undefined) { const _errs93 = errors; if (typeof data42.title !== "string") { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/title", schemaPath: "#/properties/risk_log/properties/entries/items/properties/title/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid20 = _errs93 === errors; } else { var valid20 = true; } if (valid20) { if (data42.description !== undefined) { const _errs95 = errors; if (typeof data42.description !== "string") { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/description", schemaPath: "#/properties/risk_log/properties/entries/items/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid20 = _errs95 === errors; } else { var valid20 = true; } if (valid20) { if (data42.start !== undefined) { let data46 = data42.start; const _errs97 = errors; if (errors === _errs97) { if (errors === _errs97) { if (typeof data46 === "string") { if (!pattern1.test(data46)) { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/start", schemaPath: "#/properties/risk_log/properties/entries/items/properties/start/pattern", keyword: "pattern", params: { pattern: "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, message: "must match pattern \"" + "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" + "\"" }]; return false; } else { if (!(formats0.validate(data46))) { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/start", schemaPath: "#/properties/risk_log/properties/entries/items/properties/start/format", keyword: "format", params: { format: "date-time" }, message: "must match format \"" + "date-time" + "\"" }]; return false; } } } else { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/start", schemaPath: "#/properties/risk_log/properties/entries/items/properties/start/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid20 = _errs97 === errors; } else { var valid20 = true; } if (valid20) { if (data42.end !== undefined) { let data47 = data42.end; const _errs99 = errors; if (errors === _errs99) { if (errors === _errs99) { if (typeof data47 === "string") { if (!pattern1.test(data47)) { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/end", schemaPath: "#/properties/risk_log/properties/entries/items/properties/end/pattern", keyword: "pattern", params: { pattern: "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, message: "must match pattern \"" + "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" + "\"" }]; return false; } else { if (!(formats0.validate(data47))) { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/end", schemaPath: "#/properties/risk_log/properties/entries/items/properties/end/format", keyword: "format", params: { format: "date-time" }, message: "must match format \"" + "date-time" + "\"" }]; return false; } } } else { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/end", schemaPath: "#/properties/risk_log/properties/entries/items/properties/end/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid20 = _errs99 === errors; } else { var valid20 = true; } if (valid20) { if (data42.props !== undefined) { let data48 = data42.props; const _errs101 = errors; if (errors === _errs101) { if (Array.isArray(data48)) { if (data48.length < 1) { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/props", schemaPath: "#/properties/risk_log/properties/entries/items/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid21 = true; const len11 = data48.length; for (let i11 = 0; i11 < len11; i11++) { const _errs103 = errors; if (!(validate24(data48[i11], { instancePath: instancePath + "/risk_log/entries/" + i10 + "/props/" + i11, parentData: data48, parentDataProperty: i11, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid21 = _errs103 === errors; if (!valid21) { break; } } } } else { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/props", schemaPath: "#/properties/risk_log/properties/entries/items/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid20 = _errs101 === errors; } else { var valid20 = true; } if (valid20) { if (data42.links !== undefined) { let data50 = data42.links; const _errs104 = errors; if (errors === _errs104) { if (Array.isArray(data50)) { if (data50.length < 1) { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/links", schemaPath: "#/properties/risk_log/properties/entries/items/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid22 = true; const len12 = data50.length; for (let i12 = 0; i12 < len12; i12++) { let data51 = data50[i12]; const _errs106 = errors; const _errs107 = errors; if (errors === _errs107) { if (data51 && typeof data51 == "object" && !Array.isArray(data51)) { let missing7; if ((data51.href === undefined) && (missing7 = "href")) { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/links/" + i12, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing7 }, message: "must have required property '" + missing7 + "'" }]; return false; } else { const _errs109 = errors; for (const key7 in data51) { if (!((((key7 === "href") || (key7 === "rel")) || (key7 === "media_type")) || (key7 === "text"))) { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/links/" + i12, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key7 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs109 === errors) { if (data51.href !== undefined) { let data52 = data51.href; const _errs110 = errors; if (errors === _errs110) { if (errors === _errs110) { if (typeof data52 === "string") { if (!(formats10.test(data52))) { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/links/" + i12 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/links/" + i12 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid24 = _errs110 === errors; } else { var valid24 = true; } if (valid24) { if (data51.rel !== undefined) { let data53 = data51.rel; const _errs112 = errors; if (errors === _errs112) { if (typeof data53 === "string") { if (!pattern9.test(data53)) { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/links/" + i12 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/links/" + i12 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid24 = _errs112 === errors; } else { var valid24 = true; } if (valid24) { if (data51.media_type !== undefined) { let data54 = data51.media_type; const _errs114 = errors; if (errors === _errs114) { if (typeof data54 === "string") { if (!pattern3.test(data54)) { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/links/" + i12 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/links/" + i12 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid24 = _errs114 === errors; } else { var valid24 = true; } if (valid24) { if (data51.text !== undefined) { const _errs116 = errors; if (typeof data51.text !== "string") { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/links/" + i12 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid24 = _errs116 === errors; } else { var valid24 = true; } } } } } } } else { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/links/" + i12, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid22 = _errs106 === errors; if (!valid22) { break; } } } } else { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/links", schemaPath: "#/properties/risk_log/properties/entries/items/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid20 = _errs104 === errors; } else { var valid20 = true; } if (valid20) { if (data42.logged_by !== undefined) { let data56 = data42.logged_by; const _errs118 = errors; if (errors === _errs118) { if (Array.isArray(data56)) { if (data56.length < 1) { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/logged_by", schemaPath: "#/properties/risk_log/properties/entries/items/properties/logged_by/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid25 = true; const len13 = data56.length; for (let i13 = 0; i13 < len13; i13++) { let data57 = data56[i13]; const _errs120 = errors; const _errs121 = errors; if (errors === _errs121) { if (data57 && typeof data57 == "object" && !Array.isArray(data57)) { let missing8; if ((data57.party_uuid === undefined) && (missing8 = "party_uuid")) { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/logged_by/" + i13, schemaPath: "#/definitions/logged_by/required", keyword: "required", params: { missingProperty: missing8 }, message: "must have required property '" + missing8 + "'" }]; return false; } else { const _errs123 = errors; for (const key8 in data57) { if (!((key8 === "party_uuid") || (key8 === "role_id"))) { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/logged_by/" + i13, schemaPath: "#/definitions/logged_by/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key8 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs123 === errors) { if (data57.party_uuid !== undefined) { let data58 = data57.party_uuid; const _errs124 = errors; if (errors === _errs124) { if (typeof data58 === "string") { if (!pattern0.test(data58)) { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/logged_by/" + i13 + "/party_uuid", schemaPath: "#/definitions/logged_by/properties/party_uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/logged_by/" + i13 + "/party_uuid", schemaPath: "#/definitions/logged_by/properties/party_uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid27 = _errs124 === errors; } else { var valid27 = true; } if (valid27) { if (data57.role_id !== undefined) { let data59 = data57.role_id; const _errs126 = errors; if (errors === _errs126) { if (typeof data59 === "string") { if (!pattern9.test(data59)) { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/logged_by/" + i13 + "/role_id", schemaPath: "#/definitions/logged_by/properties/role_id/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/logged_by/" + i13 + "/role_id", schemaPath: "#/definitions/logged_by/properties/role_id/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid27 = _errs126 === errors; } else { var valid27 = true; } } } } } else { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/logged_by/" + i13, schemaPath: "#/definitions/logged_by/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid25 = _errs120 === errors; if (!valid25) { break; } } } } else { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/logged_by", schemaPath: "#/properties/risk_log/properties/entries/items/properties/logged_by/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid20 = _errs118 === errors; } else { var valid20 = true; } if (valid20) { if (data42.status_change !== undefined) { let data60 = data42.status_change; const _errs128 = errors; const _errs129 = errors; if (errors === _errs129) { if (typeof data60 === "string") { if (!pattern9.test(data60)) { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/status_change", schemaPath: "#/definitions/risk_status/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/status_change", schemaPath: "#/definitions/risk_status/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid20 = _errs128 === errors; } else { var valid20 = true; } if (valid20) { if (data42.related_responses !== undefined) { let data61 = data42.related_responses; const _errs131 = errors; if (errors === _errs131) { if (Array.isArray(data61)) { if (data61.length < 1) { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/related_responses", schemaPath: "#/properties/risk_log/properties/entries/items/properties/related_responses/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid29 = true; const len14 = data61.length; for (let i14 = 0; i14 < len14; i14++) { let data62 = data61[i14]; const _errs133 = errors; if (errors === _errs133) { if (data62 && typeof data62 == "object" && !Array.isArray(data62)) { let missing9; if ((data62.response_uuid === undefined) && (missing9 = "response_uuid")) { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/related_responses/" + i14, schemaPath: "#/properties/risk_log/properties/entries/items/properties/related_responses/items/required", keyword: "required", params: { missingProperty: missing9 }, message: "must have required property '" + missing9 + "'" }]; return false; } else { const _errs135 = errors; for (const key9 in data62) { if (!(((((key9 === "response_uuid") || (key9 === "props")) || (key9 === "links")) || (key9 === "related_tasks")) || (key9 === "remarks"))) { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/related_responses/" + i14, schemaPath: "#/properties/risk_log/properties/entries/items/properties/related_responses/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key9 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs135 === errors) { if (data62.response_uuid !== undefined) { let data63 = data62.response_uuid; const _errs136 = errors; if (errors === _errs136) { if (typeof data63 === "string") { if (!pattern0.test(data63)) { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/related_responses/" + i14 + "/response_uuid", schemaPath: "#/properties/risk_log/properties/entries/items/properties/related_responses/items/properties/response_uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/related_responses/" + i14 + "/response_uuid", schemaPath: "#/properties/risk_log/properties/entries/items/properties/related_responses/items/properties/response_uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid30 = _errs136 === errors; } else { var valid30 = true; } if (valid30) { if (data62.props !== undefined) { let data64 = data62.props; const _errs138 = errors; if (errors === _errs138) { if (Array.isArray(data64)) { if (data64.length < 1) { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/related_responses/" + i14 + "/props", schemaPath: "#/properties/risk_log/properties/entries/items/properties/related_responses/items/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid31 = true; const len15 = data64.length; for (let i15 = 0; i15 < len15; i15++) { const _errs140 = errors; if (!(validate24(data64[i15], { instancePath: instancePath + "/risk_log/entries/" + i10 + "/related_responses/" + i14 + "/props/" + i15, parentData: data64, parentDataProperty: i15, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid31 = _errs140 === errors; if (!valid31) { break; } } } } else { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/related_responses/" + i14 + "/props", schemaPath: "#/properties/risk_log/properties/entries/items/properties/related_responses/items/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid30 = _errs138 === errors; } else { var valid30 = true; } if (valid30) { if (data62.links !== undefined) { let data66 = data62.links; const _errs141 = errors; if (errors === _errs141) { if (Array.isArray(data66)) { if (data66.length < 1) { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/related_responses/" + i14 + "/links", schemaPath: "#/properties/risk_log/properties/entries/items/properties/related_responses/items/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid32 = true; const len16 = data66.length; for (let i16 = 0; i16 < len16; i16++) { let data67 = data66[i16]; const _errs143 = errors; const _errs144 = errors; if (errors === _errs144) { if (data67 && typeof data67 == "object" && !Array.isArray(data67)) { let missing10; if ((data67.href === undefined) && (missing10 = "href")) { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/related_responses/" + i14 + "/links/" + i16, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing10 }, message: "must have required property '" + missing10 + "'" }]; return false; } else { const _errs146 = errors; for (const key10 in data67) { if (!((((key10 === "href") || (key10 === "rel")) || (key10 === "media_type")) || (key10 === "text"))) { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/related_responses/" + i14 + "/links/" + i16, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key10 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs146 === errors) { if (data67.href !== undefined) { let data68 = data67.href; const _errs147 = errors; if (errors === _errs147) { if (errors === _errs147) { if (typeof data68 === "string") { if (!(formats10.test(data68))) { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/related_responses/" + i14 + "/links/" + i16 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/related_responses/" + i14 + "/links/" + i16 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid34 = _errs147 === errors; } else { var valid34 = true; } if (valid34) { if (data67.rel !== undefined) { let data69 = data67.rel; const _errs149 = errors; if (errors === _errs149) { if (typeof data69 === "string") { if (!pattern9.test(data69)) { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/related_responses/" + i14 + "/links/" + i16 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/related_responses/" + i14 + "/links/" + i16 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid34 = _errs149 === errors; } else { var valid34 = true; } if (valid34) { if (data67.media_type !== undefined) { let data70 = data67.media_type; const _errs151 = errors; if (errors === _errs151) { if (typeof data70 === "string") { if (!pattern3.test(data70)) { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/related_responses/" + i14 + "/links/" + i16 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/related_responses/" + i14 + "/links/" + i16 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid34 = _errs151 === errors; } else { var valid34 = true; } if (valid34) { if (data67.text !== undefined) { const _errs153 = errors; if (typeof data67.text !== "string") { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/related_responses/" + i14 + "/links/" + i16 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid34 = _errs153 === errors; } else { var valid34 = true; } } } } } } } else { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/related_responses/" + i14 + "/links/" + i16, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid32 = _errs143 === errors; if (!valid32) { break; } } } } else { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/related_responses/" + i14 + "/links", schemaPath: "#/properties/risk_log/properties/entries/items/properties/related_responses/items/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid30 = _errs141 === errors; } else { var valid30 = true; } if (valid30) { if (data62.related_tasks !== undefined) { let data72 = data62.related_tasks; const _errs155 = errors; if (errors === _errs155) { if (Array.isArray(data72)) { if (data72.length < 1) { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/related_responses/" + i14 + "/related_tasks", schemaPath: "#/properties/risk_log/properties/entries/items/properties/related_responses/items/properties/related_tasks/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid35 = true; const len17 = data72.length; for (let i17 = 0; i17 < len17; i17++) { const _errs157 = errors; if (!(validate271(data72[i17], { instancePath: instancePath + "/risk_log/entries/" + i10 + "/related_responses/" + i14 + "/related_tasks/" + i17, parentData: data72, parentDataProperty: i17, rootData }))) { vErrors = vErrors === null ? validate271.errors : vErrors.concat(validate271.errors); errors = vErrors.length; } var valid35 = _errs157 === errors; if (!valid35) { break; } } } } else { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/related_responses/" + i14 + "/related_tasks", schemaPath: "#/properties/risk_log/properties/entries/items/properties/related_responses/items/properties/related_tasks/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid30 = _errs155 === errors; } else { var valid30 = true; } if (valid30) { if (data62.remarks !== undefined) { const _errs158 = errors; if (typeof data62.remarks !== "string") { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/related_responses/" + i14 + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid30 = _errs158 === errors; } else { var valid30 = true; } } } } } } } } else { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/related_responses/" + i14, schemaPath: "#/properties/risk_log/properties/entries/items/properties/related_responses/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid29 = _errs133 === errors; if (!valid29) { break; } } } } else { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/related_responses", schemaPath: "#/properties/risk_log/properties/entries/items/properties/related_responses/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid20 = _errs131 === errors; } else { var valid20 = true; } if (valid20) { if (data42.remarks !== undefined) { const _errs161 = errors; if (typeof data42.remarks !== "string") { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10 + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid20 = _errs161 === errors; } else { var valid20 = true; } } } } } } } } } } } } } } else { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries/" + i10, schemaPath: "#/properties/risk_log/properties/entries/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid19 = _errs88 === errors; if (!valid19) { break; } } } } else { validate290.errors = [{ instancePath: instancePath + "/risk_log/entries", schemaPath: "#/properties/risk_log/properties/entries/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } } } } } else { validate290.errors = [{ instancePath: instancePath + "/risk_log", schemaPath: "#/properties/risk_log/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid0 = _errs83 === errors; } else { var valid0 = true; } if (valid0) { if (data.related_observations !== undefined) { let data76 = data.related_observations; const _errs164 = errors; if (errors === _errs164) { if (Array.isArray(data76)) { if (data76.length < 1) { validate290.errors = [{ instancePath: instancePath + "/related_observations", schemaPath: "#/properties/related_observations/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid38 = true; const len18 = data76.length; for (let i18 = 0; i18 < len18; i18++) { let data77 = data76[i18]; const _errs166 = errors; if (errors === _errs166) { if (data77 && typeof data77 == "object" && !Array.isArray(data77)) { let missing11; if ((data77.observation_uuid === undefined) && (missing11 = "observation_uuid")) { validate290.errors = [{ instancePath: instancePath + "/related_observations/" + i18, schemaPath: "#/properties/related_observations/items/required", keyword: "required", params: { missingProperty: missing11 }, message: "must have required property '" + missing11 + "'" }]; return false; } else { const _errs168 = errors; for (const key11 in data77) { if (!(key11 === "observation_uuid")) { validate290.errors = [{ instancePath: instancePath + "/related_observations/" + i18, schemaPath: "#/properties/related_observations/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key11 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs168 === errors) { if (data77.observation_uuid !== undefined) { let data78 = data77.observation_uuid; const _errs169 = errors; if (errors === _errs169) { if (typeof data78 === "string") { if (!pattern0.test(data78)) { validate290.errors = [{ instancePath: instancePath + "/related_observations/" + i18 + "/observation_uuid", schemaPath: "#/properties/related_observations/items/properties/observation_uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate290.errors = [{ instancePath: instancePath + "/related_observations/" + i18 + "/observation_uuid", schemaPath: "#/properties/related_observations/items/properties/observation_uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } } } } else { validate290.errors = [{ instancePath: instancePath + "/related_observations/" + i18, schemaPath: "#/properties/related_observations/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid38 = _errs166 === errors; if (!valid38) { break; } } } } else { validate290.errors = [{ instancePath: instancePath + "/related_observations", schemaPath: "#/properties/related_observations/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs164 === errors; } else { var valid0 = true; } } } } } } } } } } } } } } } } } } else { validate290.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate290.errors = vErrors; return errors === 0; } const schema287 = { "title": "Finding", "description": "Describes an individual finding.", "$id": "#/definitions/finding", "type": "object", "properties": { "uuid": { "title": "Finding Universally Unique Identifier", "description": "Uniquely identifies this finding. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. Once assigned, a UUID should be consistently used for a given finding across revisions.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "title": { "title": "Finding Title", "description": "The title for this finding.", "type": "string" }, "description": { "title": "Finding Description", "description": "A human_readable description of this finding.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "origins": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/origin" } }, "target": { "$ref": "#/definitions/finding_target" }, "implementation_statement_uuid": { "title": "Implementation Statement UUID", "description": "Identifies the implementation statement in the SSP to which this finding is related.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "related_observations": { "type": "array", "minItems": 1, "items": { "title": "Related Observation", "description": "Relates the finding to a set of referenced observations that were used to determine the finding.", "type": "object", "properties": { "observation_uuid": { "title": "Observation Universally Unique Identifier Reference", "description": "References an observation defined in the list of observations.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" } }, "required": ["observation_uuid"], "additionalProperties": false } }, "related_risks": { "type": "array", "minItems": 1, "items": { "title": "Associated Risk", "description": "Relates the finding to a set of referenced risks that were used to determine the finding.", "type": "object", "properties": { "risk_uuid": { "title": "Risk Universally Unique Identifier Reference", "description": "References an risk defined in the list of risks.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" } }, "required": ["risk_uuid"], "additionalProperties": false } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["uuid", "title", "description", "target"], "additionalProperties": false }; const schema289 = { "title": "Objective Status", "description": "Captures an assessor's conclusions regarding the degree to which an objective is satisfied.", "$id": "#/definitions/finding_target", "type": "object", "properties": { "type": { "title": "Finding Target Type", "description": "Identifies the type of the target.", "type": "string", "pattern": "^\\S(.*\\S)?$", "enum": ["statement_id", "objective_id"] }, "target_id": { "title": "Finding Target Identifier Reference", "description": "Identifies the specific target qualified by the type.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "title": { "title": "Objective Status Title", "description": "The title for this objective status.", "type": "string" }, "description": { "title": "Objective Status Description", "description": "A human_readable description of the assessor's conclusions regarding the degree to which an objective is satisfied.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "status": { "title": "Objective Status", "description": "A determination of if the objective is satisfied or not within a given system.", "type": "object", "properties": { "state": { "title": "Objective Status State", "description": "An indication as to whether the objective is satisfied or not.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$", "enum": ["satisfied", "not_satisfied"] }, "reason": { "title": "Objective Status Reason", "description": "The reason the objective was given it's status.", "type": "string", "pattern": "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["state"], "additionalProperties": false }, "implementation_status": { "$ref": "#/definitions/implementation_status" }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["type", "target_id", "status"], "additionalProperties": false }; function validate314(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/finding_target" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((((data.type === undefined) && (missing0 = "type")) || ((data.target_id === undefined) && (missing0 = "target_id"))) || ((data.status === undefined) && (missing0 = "status"))) { validate314.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(func8.call(schema289.properties, key0))) { validate314.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.type !== undefined) { let data0 = data.type; const _errs2 = errors; if (!((data0 === "statement_id") || (data0 === "objective_id"))) { validate314.errors = [{ instancePath: instancePath + "/type", schemaPath: "#/properties/type/enum", keyword: "enum", params: { allowedValues: schema289.properties.type.enum }, message: "must be equal to one of the allowed values" }]; return false; } if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern3.test(data0)) { validate314.errors = [{ instancePath: instancePath + "/type", schemaPath: "#/properties/type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate314.errors = [{ instancePath: instancePath + "/type", schemaPath: "#/properties/type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.target_id !== undefined) { let data1 = data.target_id; const _errs4 = errors; if (errors === _errs4) { if (typeof data1 === "string") { if (!pattern9.test(data1)) { validate314.errors = [{ instancePath: instancePath + "/target_id", schemaPath: "#/properties/target_id/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate314.errors = [{ instancePath: instancePath + "/target_id", schemaPath: "#/properties/target_id/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.title !== undefined) { const _errs6 = errors; if (typeof data.title !== "string") { validate314.errors = [{ instancePath: instancePath + "/title", schemaPath: "#/properties/title/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.description !== undefined) { const _errs8 = errors; if (typeof data.description !== "string") { validate314.errors = [{ instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs8 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data4 = data.props; const _errs10 = errors; if (errors === _errs10) { if (Array.isArray(data4)) { if (data4.length < 1) { validate314.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data4.length; for (let i0 = 0; i0 < len0; i0++) { const _errs12 = errors; if (!(validate24(data4[i0], { instancePath: instancePath + "/props/" + i0, parentData: data4, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs12 === errors; if (!valid1) { break; } } } } else { validate314.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs10 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data6 = data.links; const _errs13 = errors; if (errors === _errs13) { if (Array.isArray(data6)) { if (data6.length < 1) { validate314.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data6.length; for (let i1 = 0; i1 < len1; i1++) { let data7 = data6[i1]; const _errs15 = errors; const _errs16 = errors; if (errors === _errs16) { if (data7 && typeof data7 == "object" && !Array.isArray(data7)) { let missing1; if ((data7.href === undefined) && (missing1 = "href")) { validate314.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs18 = errors; for (const key1 in data7) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate314.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs18 === errors) { if (data7.href !== undefined) { let data8 = data7.href; const _errs19 = errors; if (errors === _errs19) { if (errors === _errs19) { if (typeof data8 === "string") { if (!(formats10.test(data8))) { validate314.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate314.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid4 = _errs19 === errors; } else { var valid4 = true; } if (valid4) { if (data7.rel !== undefined) { let data9 = data7.rel; const _errs21 = errors; if (errors === _errs21) { if (typeof data9 === "string") { if (!pattern9.test(data9)) { validate314.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate314.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs21 === errors; } else { var valid4 = true; } if (valid4) { if (data7.media_type !== undefined) { let data10 = data7.media_type; const _errs23 = errors; if (errors === _errs23) { if (typeof data10 === "string") { if (!pattern3.test(data10)) { validate314.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate314.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs23 === errors; } else { var valid4 = true; } if (valid4) { if (data7.text !== undefined) { const _errs25 = errors; if (typeof data7.text !== "string") { validate314.errors = [{ instancePath: instancePath + "/links/" + i1 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid4 = _errs25 === errors; } else { var valid4 = true; } } } } } } } else { validate314.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs15 === errors; if (!valid2) { break; } } } } else { validate314.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs13 === errors; } else { var valid0 = true; } if (valid0) { if (data.status !== undefined) { let data12 = data.status; const _errs27 = errors; if (errors === _errs27) { if (data12 && typeof data12 == "object" && !Array.isArray(data12)) { let missing2; if ((data12.state === undefined) && (missing2 = "state")) { validate314.errors = [{ instancePath: instancePath + "/status", schemaPath: "#/properties/status/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" }]; return false; } else { const _errs29 = errors; for (const key2 in data12) { if (!(((key2 === "state") || (key2 === "reason")) || (key2 === "remarks"))) { validate314.errors = [{ instancePath: instancePath + "/status", schemaPath: "#/properties/status/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs29 === errors) { if (data12.state !== undefined) { let data13 = data12.state; const _errs30 = errors; if (!((data13 === "satisfied") || (data13 === "not_satisfied"))) { validate314.errors = [{ instancePath: instancePath + "/status/state", schemaPath: "#/properties/status/properties/state/enum", keyword: "enum", params: { allowedValues: schema289.properties.status.properties.state.enum }, message: "must be equal to one of the allowed values" }]; return false; } if (errors === _errs30) { if (typeof data13 === "string") { if (!pattern9.test(data13)) { validate314.errors = [{ instancePath: instancePath + "/status/state", schemaPath: "#/properties/status/properties/state/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate314.errors = [{ instancePath: instancePath + "/status/state", schemaPath: "#/properties/status/properties/state/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid5 = _errs30 === errors; } else { var valid5 = true; } if (valid5) { if (data12.reason !== undefined) { let data14 = data12.reason; const _errs32 = errors; if (errors === _errs32) { if (typeof data14 === "string") { if (!pattern9.test(data14)) { validate314.errors = [{ instancePath: instancePath + "/status/reason", schemaPath: "#/properties/status/properties/reason/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate314.errors = [{ instancePath: instancePath + "/status/reason", schemaPath: "#/properties/status/properties/reason/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid5 = _errs32 === errors; } else { var valid5 = true; } if (valid5) { if (data12.remarks !== undefined) { const _errs34 = errors; if (typeof data12.remarks !== "string") { validate314.errors = [{ instancePath: instancePath + "/status/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid5 = _errs34 === errors; } else { var valid5 = true; } } } } } } else { validate314.errors = [{ instancePath: instancePath + "/status", schemaPath: "#/properties/status/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid0 = _errs27 === errors; } else { var valid0 = true; } if (valid0) { if (data.implementation_status !== undefined) { const _errs37 = errors; if (!(validate121(data.implementation_status, { instancePath: instancePath + "/implementation_status", parentData: data, parentDataProperty: "implementation_status", rootData }))) { vErrors = vErrors === null ? validate121.errors : vErrors.concat(validate121.errors); errors = vErrors.length; } var valid0 = _errs37 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs38 = errors; if (typeof data.remarks !== "string") { validate314.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs38 === errors; } else { var valid0 = true; } } } } } } } } } } } } else { validate314.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate314.errors = vErrors; return errors === 0; } function validate311(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/finding" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if (((((data.uuid === undefined) && (missing0 = "uuid")) || ((data.title === undefined) && (missing0 = "title"))) || ((data.description === undefined) && (missing0 = "description"))) || ((data.target === undefined) && (missing0 = "target"))) { validate311.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(func8.call(schema287.properties, key0))) { validate311.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.uuid !== undefined) { let data0 = data.uuid; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern0.test(data0)) { validate311.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate311.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.title !== undefined) { const _errs4 = errors; if (typeof data.title !== "string") { validate311.errors = [{ instancePath: instancePath + "/title", schemaPath: "#/properties/title/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.description !== undefined) { const _errs6 = errors; if (typeof data.description !== "string") { validate311.errors = [{ instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data3 = data.props; const _errs8 = errors; if (errors === _errs8) { if (Array.isArray(data3)) { if (data3.length < 1) { validate311.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data3.length; for (let i0 = 0; i0 < len0; i0++) { const _errs10 = errors; if (!(validate24(data3[i0], { instancePath: instancePath + "/props/" + i0, parentData: data3, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs10 === errors; if (!valid1) { break; } } } } else { validate311.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs8 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data5 = data.links; const _errs11 = errors; if (errors === _errs11) { if (Array.isArray(data5)) { if (data5.length < 1) { validate311.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data5.length; for (let i1 = 0; i1 < len1; i1++) { let data6 = data5[i1]; const _errs13 = errors; const _errs14 = errors; if (errors === _errs14) { if (data6 && typeof data6 == "object" && !Array.isArray(data6)) { let missing1; if ((data6.href === undefined) && (missing1 = "href")) { validate311.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs16 = errors; for (const key1 in data6) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate311.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs16 === errors) { if (data6.href !== undefined) { let data7 = data6.href; const _errs17 = errors; if (errors === _errs17) { if (errors === _errs17) { if (typeof data7 === "string") { if (!(formats10.test(data7))) { validate311.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate311.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid4 = _errs17 === errors; } else { var valid4 = true; } if (valid4) { if (data6.rel !== undefined) { let data8 = data6.rel; const _errs19 = errors; if (errors === _errs19) { if (typeof data8 === "string") { if (!pattern9.test(data8)) { validate311.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate311.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs19 === errors; } else { var valid4 = true; } if (valid4) { if (data6.media_type !== undefined) { let data9 = data6.media_type; const _errs21 = errors; if (errors === _errs21) { if (typeof data9 === "string") { if (!pattern3.test(data9)) { validate311.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate311.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs21 === errors; } else { var valid4 = true; } if (valid4) { if (data6.text !== undefined) { const _errs23 = errors; if (typeof data6.text !== "string") { validate311.errors = [{ instancePath: instancePath + "/links/" + i1 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid4 = _errs23 === errors; } else { var valid4 = true; } } } } } } } else { validate311.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs13 === errors; if (!valid2) { break; } } } } else { validate311.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs11 === errors; } else { var valid0 = true; } if (valid0) { if (data.origins !== undefined) { let data11 = data.origins; const _errs25 = errors; if (errors === _errs25) { if (Array.isArray(data11)) { if (data11.length < 1) { validate311.errors = [{ instancePath: instancePath + "/origins", schemaPath: "#/properties/origins/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid5 = true; const len2 = data11.length; for (let i2 = 0; i2 < len2; i2++) { const _errs27 = errors; if (!(validate279(data11[i2], { instancePath: instancePath + "/origins/" + i2, parentData: data11, parentDataProperty: i2, rootData }))) { vErrors = vErrors === null ? validate279.errors : vErrors.concat(validate279.errors); errors = vErrors.length; } var valid5 = _errs27 === errors; if (!valid5) { break; } } } } else { validate311.errors = [{ instancePath: instancePath + "/origins", schemaPath: "#/properties/origins/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs25 === errors; } else { var valid0 = true; } if (valid0) { if (data.target !== undefined) { const _errs28 = errors; if (!(validate314(data.target, { instancePath: instancePath + "/target", parentData: data, parentDataProperty: "target", rootData }))) { vErrors = vErrors === null ? validate314.errors : vErrors.concat(validate314.errors); errors = vErrors.length; } var valid0 = _errs28 === errors; } else { var valid0 = true; } if (valid0) { if (data.implementation_statement_uuid !== undefined) { let data14 = data.implementation_statement_uuid; const _errs29 = errors; if (errors === _errs29) { if (typeof data14 === "string") { if (!pattern0.test(data14)) { validate311.errors = [{ instancePath: instancePath + "/implementation_statement_uuid", schemaPath: "#/properties/implementation_statement_uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate311.errors = [{ instancePath: instancePath + "/implementation_statement_uuid", schemaPath: "#/properties/implementation_statement_uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs29 === errors; } else { var valid0 = true; } if (valid0) { if (data.related_observations !== undefined) { let data15 = data.related_observations; const _errs31 = errors; if (errors === _errs31) { if (Array.isArray(data15)) { if (data15.length < 1) { validate311.errors = [{ instancePath: instancePath + "/related_observations", schemaPath: "#/properties/related_observations/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid6 = true; const len3 = data15.length; for (let i3 = 0; i3 < len3; i3++) { let data16 = data15[i3]; const _errs33 = errors; if (errors === _errs33) { if (data16 && typeof data16 == "object" && !Array.isArray(data16)) { let missing2; if ((data16.observation_uuid === undefined) && (missing2 = "observation_uuid")) { validate311.errors = [{ instancePath: instancePath + "/related_observations/" + i3, schemaPath: "#/properties/related_observations/items/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" }]; return false; } else { const _errs35 = errors; for (const key2 in data16) { if (!(key2 === "observation_uuid")) { validate311.errors = [{ instancePath: instancePath + "/related_observations/" + i3, schemaPath: "#/properties/related_observations/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs35 === errors) { if (data16.observation_uuid !== undefined) { let data17 = data16.observation_uuid; const _errs36 = errors; if (errors === _errs36) { if (typeof data17 === "string") { if (!pattern0.test(data17)) { validate311.errors = [{ instancePath: instancePath + "/related_observations/" + i3 + "/observation_uuid", schemaPath: "#/properties/related_observations/items/properties/observation_uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate311.errors = [{ instancePath: instancePath + "/related_observations/" + i3 + "/observation_uuid", schemaPath: "#/properties/related_observations/items/properties/observation_uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } } } } else { validate311.errors = [{ instancePath: instancePath + "/related_observations/" + i3, schemaPath: "#/properties/related_observations/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid6 = _errs33 === errors; if (!valid6) { break; } } } } else { validate311.errors = [{ instancePath: instancePath + "/related_observations", schemaPath: "#/properties/related_observations/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs31 === errors; } else { var valid0 = true; } if (valid0) { if (data.related_risks !== undefined) { let data18 = data.related_risks; const _errs38 = errors; if (errors === _errs38) { if (Array.isArray(data18)) { if (data18.length < 1) { validate311.errors = [{ instancePath: instancePath + "/related_risks", schemaPath: "#/properties/related_risks/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid8 = true; const len4 = data18.length; for (let i4 = 0; i4 < len4; i4++) { let data19 = data18[i4]; const _errs40 = errors; if (errors === _errs40) { if (data19 && typeof data19 == "object" && !Array.isArray(data19)) { let missing3; if ((data19.risk_uuid === undefined) && (missing3 = "risk_uuid")) { validate311.errors = [{ instancePath: instancePath + "/related_risks/" + i4, schemaPath: "#/properties/related_risks/items/required", keyword: "required", params: { missingProperty: missing3 }, message: "must have required property '" + missing3 + "'" }]; return false; } else { const _errs42 = errors; for (const key3 in data19) { if (!(key3 === "risk_uuid")) { validate311.errors = [{ instancePath: instancePath + "/related_risks/" + i4, schemaPath: "#/properties/related_risks/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key3 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs42 === errors) { if (data19.risk_uuid !== undefined) { let data20 = data19.risk_uuid; const _errs43 = errors; if (errors === _errs43) { if (typeof data20 === "string") { if (!pattern0.test(data20)) { validate311.errors = [{ instancePath: instancePath + "/related_risks/" + i4 + "/risk_uuid", schemaPath: "#/properties/related_risks/items/properties/risk_uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate311.errors = [{ instancePath: instancePath + "/related_risks/" + i4 + "/risk_uuid", schemaPath: "#/properties/related_risks/items/properties/risk_uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } } } } else { validate311.errors = [{ instancePath: instancePath + "/related_risks/" + i4, schemaPath: "#/properties/related_risks/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid8 = _errs40 === errors; if (!valid8) { break; } } } } else { validate311.errors = [{ instancePath: instancePath + "/related_risks", schemaPath: "#/properties/related_risks/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs38 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs45 = errors; if (typeof data.remarks !== "string") { validate311.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs45 === errors; } else { var valid0 = true; } } } } } } } } } } } } } } else { validate311.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate311.errors = vErrors; return errors === 0; } function validate260(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/result" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((((((data.uuid === undefined) && (missing0 = "uuid")) || ((data.title === undefined) && (missing0 = "title"))) || ((data.description === undefined) && (missing0 = "description"))) || ((data.start === undefined) && (missing0 = "start"))) || ((data.reviewed_controls === undefined) && (missing0 = "reviewed_controls"))) { validate260.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(func8.call(schema249.properties, key0))) { validate260.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.uuid !== undefined) { let data0 = data.uuid; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern0.test(data0)) { validate260.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate260.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.title !== undefined) { const _errs4 = errors; if (typeof data.title !== "string") { validate260.errors = [{ instancePath: instancePath + "/title", schemaPath: "#/properties/title/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.description !== undefined) { const _errs6 = errors; if (typeof data.description !== "string") { validate260.errors = [{ instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.start !== undefined) { let data3 = data.start; const _errs8 = errors; if (errors === _errs8) { if (errors === _errs8) { if (typeof data3 === "string") { if (!pattern1.test(data3)) { validate260.errors = [{ instancePath: instancePath + "/start", schemaPath: "#/properties/start/pattern", keyword: "pattern", params: { pattern: "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, message: "must match pattern \"" + "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" + "\"" }]; return false; } else { if (!(formats0.validate(data3))) { validate260.errors = [{ instancePath: instancePath + "/start", schemaPath: "#/properties/start/format", keyword: "format", params: { format: "date-time" }, message: "must match format \"" + "date-time" + "\"" }]; return false; } } } else { validate260.errors = [{ instancePath: instancePath + "/start", schemaPath: "#/properties/start/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid0 = _errs8 === errors; } else { var valid0 = true; } if (valid0) { if (data.end !== undefined) { let data4 = data.end; const _errs10 = errors; if (errors === _errs10) { if (errors === _errs10) { if (typeof data4 === "string") { if (!pattern1.test(data4)) { validate260.errors = [{ instancePath: instancePath + "/end", schemaPath: "#/properties/end/pattern", keyword: "pattern", params: { pattern: "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, message: "must match pattern \"" + "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" + "\"" }]; return false; } else { if (!(formats0.validate(data4))) { validate260.errors = [{ instancePath: instancePath + "/end", schemaPath: "#/properties/end/format", keyword: "format", params: { format: "date-time" }, message: "must match format \"" + "date-time" + "\"" }]; return false; } } } else { validate260.errors = [{ instancePath: instancePath + "/end", schemaPath: "#/properties/end/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid0 = _errs10 === errors; } else { var valid0 = true; } if (valid0) { if (data.prop !== undefined) { let data5 = data.prop; const _errs12 = errors; if (errors === _errs12) { if (Array.isArray(data5)) { if (data5.length < 1) { validate260.errors = [{ instancePath: instancePath + "/prop", schemaPath: "#/properties/prop/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data5.length; for (let i0 = 0; i0 < len0; i0++) { const _errs14 = errors; if (!(validate24(data5[i0], { instancePath: instancePath + "/prop/" + i0, parentData: data5, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs14 === errors; if (!valid1) { break; } } } } else { validate260.errors = [{ instancePath: instancePath + "/prop", schemaPath: "#/properties/prop/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs12 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data7 = data.links; const _errs15 = errors; if (errors === _errs15) { if (Array.isArray(data7)) { if (data7.length < 1) { validate260.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data7.length; for (let i1 = 0; i1 < len1; i1++) { let data8 = data7[i1]; const _errs17 = errors; const _errs18 = errors; if (errors === _errs18) { if (data8 && typeof data8 == "object" && !Array.isArray(data8)) { let missing1; if ((data8.href === undefined) && (missing1 = "href")) { validate260.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs20 = errors; for (const key1 in data8) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate260.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs20 === errors) { if (data8.href !== undefined) { let data9 = data8.href; const _errs21 = errors; if (errors === _errs21) { if (errors === _errs21) { if (typeof data9 === "string") { if (!(formats10.test(data9))) { validate260.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate260.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid4 = _errs21 === errors; } else { var valid4 = true; } if (valid4) { if (data8.rel !== undefined) { let data10 = data8.rel; const _errs23 = errors; if (errors === _errs23) { if (typeof data10 === "string") { if (!pattern9.test(data10)) { validate260.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate260.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs23 === errors; } else { var valid4 = true; } if (valid4) { if (data8.media_type !== undefined) { let data11 = data8.media_type; const _errs25 = errors; if (errors === _errs25) { if (typeof data11 === "string") { if (!pattern3.test(data11)) { validate260.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate260.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs25 === errors; } else { var valid4 = true; } if (valid4) { if (data8.text !== undefined) { const _errs27 = errors; if (typeof data8.text !== "string") { validate260.errors = [{ instancePath: instancePath + "/links/" + i1 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid4 = _errs27 === errors; } else { var valid4 = true; } } } } } } } else { validate260.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs17 === errors; if (!valid2) { break; } } } } else { validate260.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs15 === errors; } else { var valid0 = true; } if (valid0) { if (data.local_definitions !== undefined) { let data13 = data.local_definitions; const _errs29 = errors; if (errors === _errs29) { if (data13 && typeof data13 == "object" && !Array.isArray(data13)) { const _errs31 = errors; for (const key2 in data13) { if (!(((((key2 === "components") || (key2 === "inventory_items")) || (key2 === "users")) || (key2 === "assessment_assets")) || (key2 === "tasks"))) { validate260.errors = [{ instancePath: instancePath + "/local_definitions", schemaPath: "#/properties/local_definitions/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs31 === errors) { if (data13.components !== undefined) { let data14 = data13.components; const _errs32 = errors; if (errors === _errs32) { if (Array.isArray(data14)) { if (data14.length < 1) { validate260.errors = [{ instancePath: instancePath + "/local_definitions/components", schemaPath: "#/properties/local_definitions/properties/components/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid6 = true; const len2 = data14.length; for (let i2 = 0; i2 < len2; i2++) { const _errs34 = errors; if (!(validate187(data14[i2], { instancePath: instancePath + "/local_definitions/components/" + i2, parentData: data14, parentDataProperty: i2, rootData }))) { vErrors = vErrors === null ? validate187.errors : vErrors.concat(validate187.errors); errors = vErrors.length; } var valid6 = _errs34 === errors; if (!valid6) { break; } } } } else { validate260.errors = [{ instancePath: instancePath + "/local_definitions/components", schemaPath: "#/properties/local_definitions/properties/components/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid5 = _errs32 === errors; } else { var valid5 = true; } if (valid5) { if (data13.inventory_items !== undefined) { let data16 = data13.inventory_items; const _errs35 = errors; if (errors === _errs35) { if (Array.isArray(data16)) { if (data16.length < 1) { validate260.errors = [{ instancePath: instancePath + "/local_definitions/inventory_items", schemaPath: "#/properties/local_definitions/properties/inventory_items/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid7 = true; const len3 = data16.length; for (let i3 = 0; i3 < len3; i3++) { const _errs37 = errors; if (!(validate192(data16[i3], { instancePath: instancePath + "/local_definitions/inventory_items/" + i3, parentData: data16, parentDataProperty: i3, rootData }))) { vErrors = vErrors === null ? validate192.errors : vErrors.concat(validate192.errors); errors = vErrors.length; } var valid7 = _errs37 === errors; if (!valid7) { break; } } } } else { validate260.errors = [{ instancePath: instancePath + "/local_definitions/inventory_items", schemaPath: "#/properties/local_definitions/properties/inventory_items/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid5 = _errs35 === errors; } else { var valid5 = true; } if (valid5) { if (data13.users !== undefined) { let data18 = data13.users; const _errs38 = errors; if (errors === _errs38) { if (Array.isArray(data18)) { if (data18.length < 1) { validate260.errors = [{ instancePath: instancePath + "/local_definitions/users", schemaPath: "#/properties/local_definitions/properties/users/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid8 = true; const len4 = data18.length; for (let i4 = 0; i4 < len4; i4++) { const _errs40 = errors; if (!(validate182(data18[i4], { instancePath: instancePath + "/local_definitions/users/" + i4, parentData: data18, parentDataProperty: i4, rootData }))) { vErrors = vErrors === null ? validate182.errors : vErrors.concat(validate182.errors); errors = vErrors.length; } var valid8 = _errs40 === errors; if (!valid8) { break; } } } } else { validate260.errors = [{ instancePath: instancePath + "/local_definitions/users", schemaPath: "#/properties/local_definitions/properties/users/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid5 = _errs38 === errors; } else { var valid5 = true; } if (valid5) { if (data13.assessment_assets !== undefined) { const _errs41 = errors; if (!(validate236(data13.assessment_assets, { instancePath: instancePath + "/local_definitions/assessment_assets", parentData: data13, parentDataProperty: "assessment_assets", rootData }))) { vErrors = vErrors === null ? validate236.errors : vErrors.concat(validate236.errors); errors = vErrors.length; } var valid5 = _errs41 === errors; } else { var valid5 = true; } if (valid5) { if (data13.tasks !== undefined) { let data21 = data13.tasks; const _errs42 = errors; if (errors === _errs42) { if (Array.isArray(data21)) { if (data21.length < 1) { validate260.errors = [{ instancePath: instancePath + "/local_definitions/tasks", schemaPath: "#/properties/local_definitions/properties/tasks/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid9 = true; const len5 = data21.length; for (let i5 = 0; i5 < len5; i5++) { const _errs44 = errors; if (!(validate244(data21[i5], { instancePath: instancePath + "/local_definitions/tasks/" + i5, parentData: data21, parentDataProperty: i5, rootData }))) { vErrors = vErrors === null ? validate244.errors : vErrors.concat(validate244.errors); errors = vErrors.length; } var valid9 = _errs44 === errors; if (!valid9) { break; } } } } else { validate260.errors = [{ instancePath: instancePath + "/local_definitions/tasks", schemaPath: "#/properties/local_definitions/properties/tasks/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid5 = _errs42 === errors; } else { var valid5 = true; } } } } } } } else { validate260.errors = [{ instancePath: instancePath + "/local_definitions", schemaPath: "#/properties/local_definitions/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid0 = _errs29 === errors; } else { var valid0 = true; } if (valid0) { if (data.reviewed_controls !== undefined) { const _errs45 = errors; if (!(validate216(data.reviewed_controls, { instancePath: instancePath + "/reviewed_controls", parentData: data, parentDataProperty: "reviewed_controls", rootData }))) { vErrors = vErrors === null ? validate216.errors : vErrors.concat(validate216.errors); errors = vErrors.length; } var valid0 = _errs45 === errors; } else { var valid0 = true; } if (valid0) { if (data.attestations !== undefined) { let data24 = data.attestations; const _errs46 = errors; if (errors === _errs46) { if (Array.isArray(data24)) { if (data24.length < 1) { validate260.errors = [{ instancePath: instancePath + "/attestations", schemaPath: "#/properties/attestations/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid10 = true; const len6 = data24.length; for (let i6 = 0; i6 < len6; i6++) { let data25 = data24[i6]; const _errs48 = errors; if (errors === _errs48) { if (data25 && typeof data25 == "object" && !Array.isArray(data25)) { let missing2; if ((data25.parts === undefined) && (missing2 = "parts")) { validate260.errors = [{ instancePath: instancePath + "/attestations/" + i6, schemaPath: "#/properties/attestations/items/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" }]; return false; } else { const _errs50 = errors; for (const key3 in data25) { if (!((key3 === "responsible_parties") || (key3 === "parts"))) { validate260.errors = [{ instancePath: instancePath + "/attestations/" + i6, schemaPath: "#/properties/attestations/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key3 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs50 === errors) { if (data25.responsible_parties !== undefined) { let data26 = data25.responsible_parties; const _errs51 = errors; if (errors === _errs51) { if (Array.isArray(data26)) { if (data26.length < 1) { validate260.errors = [{ instancePath: instancePath + "/attestations/" + i6 + "/responsible_parties", schemaPath: "#/properties/attestations/items/properties/responsible_parties/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid12 = true; const len7 = data26.length; for (let i7 = 0; i7 < len7; i7++) { const _errs53 = errors; if (!(validate40(data26[i7], { instancePath: instancePath + "/attestations/" + i6 + "/responsible_parties/" + i7, parentData: data26, parentDataProperty: i7, rootData }))) { vErrors = vErrors === null ? validate40.errors : vErrors.concat(validate40.errors); errors = vErrors.length; } var valid12 = _errs53 === errors; if (!valid12) { break; } } } } else { validate260.errors = [{ instancePath: instancePath + "/attestations/" + i6 + "/responsible_parties", schemaPath: "#/properties/attestations/items/properties/responsible_parties/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid11 = _errs51 === errors; } else { var valid11 = true; } if (valid11) { if (data25.parts !== undefined) { let data28 = data25.parts; const _errs54 = errors; if (errors === _errs54) { if (Array.isArray(data28)) { if (data28.length < 1) { validate260.errors = [{ instancePath: instancePath + "/attestations/" + i6 + "/parts", schemaPath: "#/properties/attestations/items/properties/parts/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid13 = true; const len8 = data28.length; for (let i8 = 0; i8 < len8; i8++) { const _errs56 = errors; if (!(validate225(data28[i8], { instancePath: instancePath + "/attestations/" + i6 + "/parts/" + i8, parentData: data28, parentDataProperty: i8, rootData }))) { vErrors = vErrors === null ? validate225.errors : vErrors.concat(validate225.errors); errors = vErrors.length; } var valid13 = _errs56 === errors; if (!valid13) { break; } } } } else { validate260.errors = [{ instancePath: instancePath + "/attestations/" + i6 + "/parts", schemaPath: "#/properties/attestations/items/properties/parts/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid11 = _errs54 === errors; } else { var valid11 = true; } } } } } else { validate260.errors = [{ instancePath: instancePath + "/attestations/" + i6, schemaPath: "#/properties/attestations/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid10 = _errs48 === errors; if (!valid10) { break; } } } } else { validate260.errors = [{ instancePath: instancePath + "/attestations", schemaPath: "#/properties/attestations/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs46 === errors; } else { var valid0 = true; } if (valid0) { if (data.assessment_log !== undefined) { let data30 = data.assessment_log; const _errs57 = errors; if (errors === _errs57) { if (data30 && typeof data30 == "object" && !Array.isArray(data30)) { let missing3; if ((data30.entries === undefined) && (missing3 = "entries")) { validate260.errors = [{ instancePath: instancePath + "/assessment_log", schemaPath: "#/properties/assessment_log/required", keyword: "required", params: { missingProperty: missing3 }, message: "must have required property '" + missing3 + "'" }]; return false; } else { const _errs59 = errors; for (const key4 in data30) { if (!(key4 === "entries")) { validate260.errors = [{ instancePath: instancePath + "/assessment_log", schemaPath: "#/properties/assessment_log/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key4 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs59 === errors) { if (data30.entries !== undefined) { let data31 = data30.entries; const _errs60 = errors; if (errors === _errs60) { if (Array.isArray(data31)) { if (data31.length < 1) { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries", schemaPath: "#/properties/assessment_log/properties/entries/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid15 = true; const len9 = data31.length; for (let i9 = 0; i9 < len9; i9++) { let data32 = data31[i9]; const _errs62 = errors; if (errors === _errs62) { if (data32 && typeof data32 == "object" && !Array.isArray(data32)) { let missing4; if (((data32.uuid === undefined) && (missing4 = "uuid")) || ((data32.start === undefined) && (missing4 = "start"))) { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9, schemaPath: "#/properties/assessment_log/properties/entries/items/required", keyword: "required", params: { missingProperty: missing4 }, message: "must have required property '" + missing4 + "'" }]; return false; } else { const _errs64 = errors; for (const key5 in data32) { if (!(func8.call(schema249.properties.assessment_log.properties.entries.items.properties, key5))) { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9, schemaPath: "#/properties/assessment_log/properties/entries/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key5 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs64 === errors) { if (data32.uuid !== undefined) { let data33 = data32.uuid; const _errs65 = errors; if (errors === _errs65) { if (typeof data33 === "string") { if (!pattern0.test(data33)) { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9 + "/uuid", schemaPath: "#/properties/assessment_log/properties/entries/items/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9 + "/uuid", schemaPath: "#/properties/assessment_log/properties/entries/items/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid16 = _errs65 === errors; } else { var valid16 = true; } if (valid16) { if (data32.title !== undefined) { const _errs67 = errors; if (typeof data32.title !== "string") { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9 + "/title", schemaPath: "#/properties/assessment_log/properties/entries/items/properties/title/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid16 = _errs67 === errors; } else { var valid16 = true; } if (valid16) { if (data32.description !== undefined) { const _errs69 = errors; if (typeof data32.description !== "string") { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9 + "/description", schemaPath: "#/properties/assessment_log/properties/entries/items/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid16 = _errs69 === errors; } else { var valid16 = true; } if (valid16) { if (data32.start !== undefined) { let data36 = data32.start; const _errs71 = errors; if (errors === _errs71) { if (errors === _errs71) { if (typeof data36 === "string") { if (!pattern1.test(data36)) { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9 + "/start", schemaPath: "#/properties/assessment_log/properties/entries/items/properties/start/pattern", keyword: "pattern", params: { pattern: "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, message: "must match pattern \"" + "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" + "\"" }]; return false; } else { if (!(formats0.validate(data36))) { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9 + "/start", schemaPath: "#/properties/assessment_log/properties/entries/items/properties/start/format", keyword: "format", params: { format: "date-time" }, message: "must match format \"" + "date-time" + "\"" }]; return false; } } } else { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9 + "/start", schemaPath: "#/properties/assessment_log/properties/entries/items/properties/start/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid16 = _errs71 === errors; } else { var valid16 = true; } if (valid16) { if (data32.end !== undefined) { let data37 = data32.end; const _errs73 = errors; if (errors === _errs73) { if (errors === _errs73) { if (typeof data37 === "string") { if (!pattern1.test(data37)) { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9 + "/end", schemaPath: "#/properties/assessment_log/properties/entries/items/properties/end/pattern", keyword: "pattern", params: { pattern: "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" }, message: "must match pattern \"" + "^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$" + "\"" }]; return false; } else { if (!(formats0.validate(data37))) { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9 + "/end", schemaPath: "#/properties/assessment_log/properties/entries/items/properties/end/format", keyword: "format", params: { format: "date-time" }, message: "must match format \"" + "date-time" + "\"" }]; return false; } } } else { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9 + "/end", schemaPath: "#/properties/assessment_log/properties/entries/items/properties/end/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid16 = _errs73 === errors; } else { var valid16 = true; } if (valid16) { if (data32.props !== undefined) { let data38 = data32.props; const _errs75 = errors; if (errors === _errs75) { if (Array.isArray(data38)) { if (data38.length < 1) { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9 + "/props", schemaPath: "#/properties/assessment_log/properties/entries/items/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid17 = true; const len10 = data38.length; for (let i10 = 0; i10 < len10; i10++) { const _errs77 = errors; if (!(validate24(data38[i10], { instancePath: instancePath + "/assessment_log/entries/" + i9 + "/props/" + i10, parentData: data38, parentDataProperty: i10, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid17 = _errs77 === errors; if (!valid17) { break; } } } } else { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9 + "/props", schemaPath: "#/properties/assessment_log/properties/entries/items/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid16 = _errs75 === errors; } else { var valid16 = true; } if (valid16) { if (data32.links !== undefined) { let data40 = data32.links; const _errs78 = errors; if (errors === _errs78) { if (Array.isArray(data40)) { if (data40.length < 1) { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9 + "/links", schemaPath: "#/properties/assessment_log/properties/entries/items/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid18 = true; const len11 = data40.length; for (let i11 = 0; i11 < len11; i11++) { let data41 = data40[i11]; const _errs80 = errors; const _errs81 = errors; if (errors === _errs81) { if (data41 && typeof data41 == "object" && !Array.isArray(data41)) { let missing5; if ((data41.href === undefined) && (missing5 = "href")) { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9 + "/links/" + i11, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing5 }, message: "must have required property '" + missing5 + "'" }]; return false; } else { const _errs83 = errors; for (const key6 in data41) { if (!((((key6 === "href") || (key6 === "rel")) || (key6 === "media_type")) || (key6 === "text"))) { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9 + "/links/" + i11, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key6 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs83 === errors) { if (data41.href !== undefined) { let data42 = data41.href; const _errs84 = errors; if (errors === _errs84) { if (errors === _errs84) { if (typeof data42 === "string") { if (!(formats10.test(data42))) { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9 + "/links/" + i11 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9 + "/links/" + i11 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid20 = _errs84 === errors; } else { var valid20 = true; } if (valid20) { if (data41.rel !== undefined) { let data43 = data41.rel; const _errs86 = errors; if (errors === _errs86) { if (typeof data43 === "string") { if (!pattern9.test(data43)) { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9 + "/links/" + i11 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9 + "/links/" + i11 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid20 = _errs86 === errors; } else { var valid20 = true; } if (valid20) { if (data41.media_type !== undefined) { let data44 = data41.media_type; const _errs88 = errors; if (errors === _errs88) { if (typeof data44 === "string") { if (!pattern3.test(data44)) { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9 + "/links/" + i11 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9 + "/links/" + i11 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid20 = _errs88 === errors; } else { var valid20 = true; } if (valid20) { if (data41.text !== undefined) { const _errs90 = errors; if (typeof data41.text !== "string") { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9 + "/links/" + i11 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid20 = _errs90 === errors; } else { var valid20 = true; } } } } } } } else { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9 + "/links/" + i11, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid18 = _errs80 === errors; if (!valid18) { break; } } } } else { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9 + "/links", schemaPath: "#/properties/assessment_log/properties/entries/items/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid16 = _errs78 === errors; } else { var valid16 = true; } if (valid16) { if (data32.logged_by !== undefined) { let data46 = data32.logged_by; const _errs92 = errors; if (errors === _errs92) { if (Array.isArray(data46)) { if (data46.length < 1) { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9 + "/logged_by", schemaPath: "#/properties/assessment_log/properties/entries/items/properties/logged_by/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid21 = true; const len12 = data46.length; for (let i12 = 0; i12 < len12; i12++) { let data47 = data46[i12]; const _errs94 = errors; const _errs95 = errors; if (errors === _errs95) { if (data47 && typeof data47 == "object" && !Array.isArray(data47)) { let missing6; if ((data47.party_uuid === undefined) && (missing6 = "party_uuid")) { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9 + "/logged_by/" + i12, schemaPath: "#/definitions/logged_by/required", keyword: "required", params: { missingProperty: missing6 }, message: "must have required property '" + missing6 + "'" }]; return false; } else { const _errs97 = errors; for (const key7 in data47) { if (!((key7 === "party_uuid") || (key7 === "role_id"))) { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9 + "/logged_by/" + i12, schemaPath: "#/definitions/logged_by/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key7 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs97 === errors) { if (data47.party_uuid !== undefined) { let data48 = data47.party_uuid; const _errs98 = errors; if (errors === _errs98) { if (typeof data48 === "string") { if (!pattern0.test(data48)) { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9 + "/logged_by/" + i12 + "/party_uuid", schemaPath: "#/definitions/logged_by/properties/party_uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9 + "/logged_by/" + i12 + "/party_uuid", schemaPath: "#/definitions/logged_by/properties/party_uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid23 = _errs98 === errors; } else { var valid23 = true; } if (valid23) { if (data47.role_id !== undefined) { let data49 = data47.role_id; const _errs100 = errors; if (errors === _errs100) { if (typeof data49 === "string") { if (!pattern9.test(data49)) { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9 + "/logged_by/" + i12 + "/role_id", schemaPath: "#/definitions/logged_by/properties/role_id/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9 + "/logged_by/" + i12 + "/role_id", schemaPath: "#/definitions/logged_by/properties/role_id/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid23 = _errs100 === errors; } else { var valid23 = true; } } } } } else { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9 + "/logged_by/" + i12, schemaPath: "#/definitions/logged_by/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid21 = _errs94 === errors; if (!valid21) { break; } } } } else { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9 + "/logged_by", schemaPath: "#/properties/assessment_log/properties/entries/items/properties/logged_by/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid16 = _errs92 === errors; } else { var valid16 = true; } if (valid16) { if (data32.related_tasks !== undefined) { let data50 = data32.related_tasks; const _errs102 = errors; if (errors === _errs102) { if (Array.isArray(data50)) { if (data50.length < 1) { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9 + "/related_tasks", schemaPath: "#/properties/assessment_log/properties/entries/items/properties/related_tasks/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid24 = true; const len13 = data50.length; for (let i13 = 0; i13 < len13; i13++) { const _errs104 = errors; if (!(validate271(data50[i13], { instancePath: instancePath + "/assessment_log/entries/" + i9 + "/related_tasks/" + i13, parentData: data50, parentDataProperty: i13, rootData }))) { vErrors = vErrors === null ? validate271.errors : vErrors.concat(validate271.errors); errors = vErrors.length; } var valid24 = _errs104 === errors; if (!valid24) { break; } } } } else { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9 + "/related_tasks", schemaPath: "#/properties/assessment_log/properties/entries/items/properties/related_tasks/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid16 = _errs102 === errors; } else { var valid16 = true; } if (valid16) { if (data32.remarks !== undefined) { const _errs105 = errors; if (typeof data32.remarks !== "string") { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9 + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid16 = _errs105 === errors; } else { var valid16 = true; } } } } } } } } } } } } } else { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries/" + i9, schemaPath: "#/properties/assessment_log/properties/entries/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid15 = _errs62 === errors; if (!valid15) { break; } } } } else { validate260.errors = [{ instancePath: instancePath + "/assessment_log/entries", schemaPath: "#/properties/assessment_log/properties/entries/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } } } } } else { validate260.errors = [{ instancePath: instancePath + "/assessment_log", schemaPath: "#/properties/assessment_log/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid0 = _errs57 === errors; } else { var valid0 = true; } if (valid0) { if (data.observations !== undefined) { let data53 = data.observations; const _errs108 = errors; if (errors === _errs108) { if (Array.isArray(data53)) { if (data53.length < 1) { validate260.errors = [{ instancePath: instancePath + "/observations", schemaPath: "#/properties/observations/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid26 = true; const len14 = data53.length; for (let i14 = 0; i14 < len14; i14++) { const _errs110 = errors; if (!(validate277(data53[i14], { instancePath: instancePath + "/observations/" + i14, parentData: data53, parentDataProperty: i14, rootData }))) { vErrors = vErrors === null ? validate277.errors : vErrors.concat(validate277.errors); errors = vErrors.length; } var valid26 = _errs110 === errors; if (!valid26) { break; } } } } else { validate260.errors = [{ instancePath: instancePath + "/observations", schemaPath: "#/properties/observations/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs108 === errors; } else { var valid0 = true; } if (valid0) { if (data.risks !== undefined) { let data55 = data.risks; const _errs111 = errors; if (errors === _errs111) { if (Array.isArray(data55)) { if (data55.length < 1) { validate260.errors = [{ instancePath: instancePath + "/risks", schemaPath: "#/properties/risks/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid27 = true; const len15 = data55.length; for (let i15 = 0; i15 < len15; i15++) { const _errs113 = errors; if (!(validate290(data55[i15], { instancePath: instancePath + "/risks/" + i15, parentData: data55, parentDataProperty: i15, rootData }))) { vErrors = vErrors === null ? validate290.errors : vErrors.concat(validate290.errors); errors = vErrors.length; } var valid27 = _errs113 === errors; if (!valid27) { break; } } } } else { validate260.errors = [{ instancePath: instancePath + "/risks", schemaPath: "#/properties/risks/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs111 === errors; } else { var valid0 = true; } if (valid0) { if (data.findings !== undefined) { let data57 = data.findings; const _errs114 = errors; if (errors === _errs114) { if (Array.isArray(data57)) { if (data57.length < 1) { validate260.errors = [{ instancePath: instancePath + "/findings", schemaPath: "#/properties/findings/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid28 = true; const len16 = data57.length; for (let i16 = 0; i16 < len16; i16++) { const _errs116 = errors; if (!(validate311(data57[i16], { instancePath: instancePath + "/findings/" + i16, parentData: data57, parentDataProperty: i16, rootData }))) { vErrors = vErrors === null ? validate311.errors : vErrors.concat(validate311.errors); errors = vErrors.length; } var valid28 = _errs116 === errors; if (!valid28) { break; } } } } else { validate260.errors = [{ instancePath: instancePath + "/findings", schemaPath: "#/properties/findings/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs114 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs117 = errors; if (typeof data.remarks !== "string") { validate260.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs117 === errors; } else { var valid0 = true; } } } } } } } } } } } } } } } } } } else { validate260.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate260.errors = vErrors; return errors === 0; } function validate254(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/assessment_results" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if (((((data.uuid === undefined) && (missing0 = "uuid")) || ((data.metadata === undefined) && (missing0 = "metadata"))) || ((data.import_ap === undefined) && (missing0 = "import_ap"))) || ((data.results === undefined) && (missing0 = "results"))) { validate254.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!((((((key0 === "uuid") || (key0 === "metadata")) || (key0 === "import_ap")) || (key0 === "local_definitions")) || (key0 === "results")) || (key0 === "back_matter"))) { validate254.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.uuid !== undefined) { let data0 = data.uuid; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern0.test(data0)) { validate254.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate254.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.metadata !== undefined) { const _errs4 = errors; if (!(validate22(data.metadata, { instancePath: instancePath + "/metadata", parentData: data, parentDataProperty: "metadata", rootData }))) { vErrors = vErrors === null ? validate22.errors : vErrors.concat(validate22.errors); errors = vErrors.length; } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.import_ap !== undefined) { const _errs5 = errors; if (!(validate256(data.import_ap, { instancePath: instancePath + "/import_ap", parentData: data, parentDataProperty: "import_ap", rootData }))) { vErrors = vErrors === null ? validate256.errors : vErrors.concat(validate256.errors); errors = vErrors.length; } var valid0 = _errs5 === errors; } else { var valid0 = true; } if (valid0) { if (data.local_definitions !== undefined) { let data3 = data.local_definitions; const _errs6 = errors; if (errors === _errs6) { if (data3 && typeof data3 == "object" && !Array.isArray(data3)) { const _errs8 = errors; for (const key1 in data3) { if (!(((key1 === "objectives_and_methods") || (key1 === "activities")) || (key1 === "remarks"))) { validate254.errors = [{ instancePath: instancePath + "/local_definitions", schemaPath: "#/properties/local_definitions/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs8 === errors) { if (data3.objectives_and_methods !== undefined) { let data4 = data3.objectives_and_methods; const _errs9 = errors; if (errors === _errs9) { if (Array.isArray(data4)) { if (data4.length < 1) { validate254.errors = [{ instancePath: instancePath + "/local_definitions/objectives_and_methods", schemaPath: "#/properties/local_definitions/properties/objectives_and_methods/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len0 = data4.length; for (let i0 = 0; i0 < len0; i0++) { const _errs11 = errors; if (!(validate209(data4[i0], { instancePath: instancePath + "/local_definitions/objectives_and_methods/" + i0, parentData: data4, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate209.errors : vErrors.concat(validate209.errors); errors = vErrors.length; } var valid2 = _errs11 === errors; if (!valid2) { break; } } } } else { validate254.errors = [{ instancePath: instancePath + "/local_definitions/objectives_and_methods", schemaPath: "#/properties/local_definitions/properties/objectives_and_methods/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid1 = _errs9 === errors; } else { var valid1 = true; } if (valid1) { if (data3.activities !== undefined) { let data6 = data3.activities; const _errs12 = errors; if (errors === _errs12) { if (Array.isArray(data6)) { if (data6.length < 1) { validate254.errors = [{ instancePath: instancePath + "/local_definitions/activities", schemaPath: "#/properties/local_definitions/properties/activities/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid3 = true; const len1 = data6.length; for (let i1 = 0; i1 < len1; i1++) { const _errs14 = errors; if (!(validate213(data6[i1], { instancePath: instancePath + "/local_definitions/activities/" + i1, parentData: data6, parentDataProperty: i1, rootData }))) { vErrors = vErrors === null ? validate213.errors : vErrors.concat(validate213.errors); errors = vErrors.length; } var valid3 = _errs14 === errors; if (!valid3) { break; } } } } else { validate254.errors = [{ instancePath: instancePath + "/local_definitions/activities", schemaPath: "#/properties/local_definitions/properties/activities/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid1 = _errs12 === errors; } else { var valid1 = true; } if (valid1) { if (data3.remarks !== undefined) { const _errs15 = errors; if (typeof data3.remarks !== "string") { validate254.errors = [{ instancePath: instancePath + "/local_definitions/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid1 = _errs15 === errors; } else { var valid1 = true; } } } } } else { validate254.errors = [{ instancePath: instancePath + "/local_definitions", schemaPath: "#/properties/local_definitions/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.results !== undefined) { let data9 = data.results; const _errs18 = errors; if (errors === _errs18) { if (Array.isArray(data9)) { if (data9.length < 1) { validate254.errors = [{ instancePath: instancePath + "/results", schemaPath: "#/properties/results/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid5 = true; const len2 = data9.length; for (let i2 = 0; i2 < len2; i2++) { const _errs20 = errors; if (!(validate260(data9[i2], { instancePath: instancePath + "/results/" + i2, parentData: data9, parentDataProperty: i2, rootData }))) { vErrors = vErrors === null ? validate260.errors : vErrors.concat(validate260.errors); errors = vErrors.length; } var valid5 = _errs20 === errors; if (!valid5) { break; } } } } else { validate254.errors = [{ instancePath: instancePath + "/results", schemaPath: "#/properties/results/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs18 === errors; } else { var valid0 = true; } if (valid0) { if (data.back_matter !== undefined) { const _errs21 = errors; if (!(validate62(data.back_matter, { instancePath: instancePath + "/back_matter", parentData: data, parentDataProperty: "back_matter", rootData }))) { vErrors = vErrors === null ? validate62.errors : vErrors.concat(validate62.errors); errors = vErrors.length; } var valid0 = _errs21 === errors; } else { var valid0 = true; } } } } } } } } } else { validate254.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate254.errors = vErrors; return errors === 0; } const schema295 = { "title": "Plan of Action and Milestones (POA&M)", "description": "A plan of action and milestones which identifies initial and residual risks, deviations, and disposition, such as those required by FedRAMP.", "$id": "#/definitions/plan_of_action_and_milestones", "type": "object", "properties": { "uuid": { "title": "POA&M Universally Unique Identifier", "description": "Uniquely identifies this POA&M. This UUID must be changed each time the content of the POA&M changes.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "metadata": { "$ref": "#/definitions/metadata" }, "import_ssp": { "$ref": "#/definitions/import_ssp" }, "system_id": { "$ref": "#/definitions/system_id" }, "local_definitions": { "$ref": "#/definitions/poam_local_definitions" }, "observations": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/observation" } }, "risks": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/risk" } }, "poam_items": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/poam_item" } }, "back_matter": { "$ref": "#/definitions/back_matter" } }, "required": ["uuid", "metadata", "poam_items"], "additionalProperties": false }; const schema297 = { "title": "Local Definitions", "description": "Allows components, and inventory_items to be defined within the POA&M for circumstances where no OSCAL_based SSP exists, or is not delivered with the POA&M.", "$id": "#/definitions/poam_local_definitions", "type": "object", "properties": { "components": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/system_component" } }, "inventory_items": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/inventory_item" } }, "remarks": { "$ref": "#/definitions/remarks" } }, "additionalProperties": false }; function validate325(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/poam_local_definitions" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { const _errs1 = errors; for (const key0 in data) { if (!(((key0 === "components") || (key0 === "inventory_items")) || (key0 === "remarks"))) { validate325.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.components !== undefined) { let data0 = data.components; const _errs2 = errors; if (errors === _errs2) { if (Array.isArray(data0)) { if (data0.length < 1) { validate325.errors = [{ instancePath: instancePath + "/components", schemaPath: "#/properties/components/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data0.length; for (let i0 = 0; i0 < len0; i0++) { const _errs4 = errors; if (!(validate187(data0[i0], { instancePath: instancePath + "/components/" + i0, parentData: data0, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate187.errors : vErrors.concat(validate187.errors); errors = vErrors.length; } var valid1 = _errs4 === errors; if (!valid1) { break; } } } } else { validate325.errors = [{ instancePath: instancePath + "/components", schemaPath: "#/properties/components/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.inventory_items !== undefined) { let data2 = data.inventory_items; const _errs5 = errors; if (errors === _errs5) { if (Array.isArray(data2)) { if (data2.length < 1) { validate325.errors = [{ instancePath: instancePath + "/inventory_items", schemaPath: "#/properties/inventory_items/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data2.length; for (let i1 = 0; i1 < len1; i1++) { const _errs7 = errors; if (!(validate192(data2[i1], { instancePath: instancePath + "/inventory_items/" + i1, parentData: data2, parentDataProperty: i1, rootData }))) { vErrors = vErrors === null ? validate192.errors : vErrors.concat(validate192.errors); errors = vErrors.length; } var valid2 = _errs7 === errors; if (!valid2) { break; } } } } else { validate325.errors = [{ instancePath: instancePath + "/inventory_items", schemaPath: "#/properties/inventory_items/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs5 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs8 = errors; if (typeof data.remarks !== "string") { validate325.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs8 === errors; } else { var valid0 = true; } } } } } else { validate325.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate325.errors = vErrors; return errors === 0; } const schema299 = { "title": "POA&M Item", "description": "Describes an individual POA&M item.", "$id": "#/definitions/poam_item", "type": "object", "properties": { "uuid": { "title": "POA&M Item Universally Unique Identifier", "description": "Uniquely identifies the POA&M entry. This UUID may be referenced elsewhere in an OSCAL document when referring to this information. A UUID should be consistently used for a given POA&M item across revisions of the document.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, "title": { "title": "POA&M Item Title", "description": "The title or name for this POA&M item .", "type": "string" }, "description": { "title": "POA&M Item Description", "description": "A human_readable description of POA&M item.", "type": "string" }, "props": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/property" } }, "links": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/link" } }, "origins": { "type": "array", "minItems": 1, "items": { "title": "Origin", "description": "Identifies the source of the finding, such as a tool or person.", "type": "object", "properties": { "actors": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/origin_actor" } } }, "required": ["actors"], "additionalProperties": false } }, "related_observations": { "type": "array", "minItems": 1, "items": { "title": "Related Observation", "description": "Relates the poam_item to a set of referenced observations that were used to determine the finding.", "type": "object", "properties": { "observation_uuid": { "title": "Observation Universally Unique Identifier Reference", "description": "References an observation defined in the list of observations.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" } }, "required": ["observation_uuid"], "additionalProperties": false } }, "related_risks": { "type": "array", "minItems": 1, "items": { "title": "Associated Risk", "description": "Relates the finding to a set of referenced risks that were used to determine the finding.", "type": "object", "properties": { "risk_uuid": { "title": "Risk Universally Unique Identifier Reference", "description": "References an risk defined in the list of risks.", "type": "string", "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" } }, "required": ["risk_uuid"], "additionalProperties": false } }, "remarks": { "$ref": "#/definitions/remarks" } }, "required": ["title", "description"], "additionalProperties": false }; function validate331(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/poam_item" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if (((data.title === undefined) && (missing0 = "title")) || ((data.description === undefined) && (missing0 = "description"))) { validate331.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(func8.call(schema299.properties, key0))) { validate331.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.uuid !== undefined) { let data0 = data.uuid; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern0.test(data0)) { validate331.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate331.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.title !== undefined) { const _errs4 = errors; if (typeof data.title !== "string") { validate331.errors = [{ instancePath: instancePath + "/title", schemaPath: "#/properties/title/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.description !== undefined) { const _errs6 = errors; if (typeof data.description !== "string") { validate331.errors = [{ instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.props !== undefined) { let data3 = data.props; const _errs8 = errors; if (errors === _errs8) { if (Array.isArray(data3)) { if (data3.length < 1) { validate331.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid1 = true; const len0 = data3.length; for (let i0 = 0; i0 < len0; i0++) { const _errs10 = errors; if (!(validate24(data3[i0], { instancePath: instancePath + "/props/" + i0, parentData: data3, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors); errors = vErrors.length; } var valid1 = _errs10 === errors; if (!valid1) { break; } } } } else { validate331.errors = [{ instancePath: instancePath + "/props", schemaPath: "#/properties/props/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs8 === errors; } else { var valid0 = true; } if (valid0) { if (data.links !== undefined) { let data5 = data.links; const _errs11 = errors; if (errors === _errs11) { if (Array.isArray(data5)) { if (data5.length < 1) { validate331.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid2 = true; const len1 = data5.length; for (let i1 = 0; i1 < len1; i1++) { let data6 = data5[i1]; const _errs13 = errors; const _errs14 = errors; if (errors === _errs14) { if (data6 && typeof data6 == "object" && !Array.isArray(data6)) { let missing1; if ((data6.href === undefined) && (missing1 = "href")) { validate331.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs16 = errors; for (const key1 in data6) { if (!((((key1 === "href") || (key1 === "rel")) || (key1 === "media_type")) || (key1 === "text"))) { validate331.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs16 === errors) { if (data6.href !== undefined) { let data7 = data6.href; const _errs17 = errors; if (errors === _errs17) { if (errors === _errs17) { if (typeof data7 === "string") { if (!(formats10.test(data7))) { validate331.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }]; return false; } } else { validate331.errors = [{ instancePath: instancePath + "/links/" + i1 + "/href", schemaPath: "#/definitions/link/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid4 = _errs17 === errors; } else { var valid4 = true; } if (valid4) { if (data6.rel !== undefined) { let data8 = data6.rel; const _errs19 = errors; if (errors === _errs19) { if (typeof data8 === "string") { if (!pattern9.test(data8)) { validate331.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/pattern", keyword: "pattern", params: { pattern: "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" }, message: "must match pattern \"" + "^[_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$" + "\"" }]; return false; } } else { validate331.errors = [{ instancePath: instancePath + "/links/" + i1 + "/rel", schemaPath: "#/definitions/link/properties/rel/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs19 === errors; } else { var valid4 = true; } if (valid4) { if (data6.media_type !== undefined) { let data9 = data6.media_type; const _errs21 = errors; if (errors === _errs21) { if (typeof data9 === "string") { if (!pattern3.test(data9)) { validate331.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/pattern", keyword: "pattern", params: { pattern: "^\\S(.*\\S)?$" }, message: "must match pattern \"" + "^\\S(.*\\S)?$" + "\"" }]; return false; } } else { validate331.errors = [{ instancePath: instancePath + "/links/" + i1 + "/media_type", schemaPath: "#/definitions/link/properties/media_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid4 = _errs21 === errors; } else { var valid4 = true; } if (valid4) { if (data6.text !== undefined) { const _errs23 = errors; if (typeof data6.text !== "string") { validate331.errors = [{ instancePath: instancePath + "/links/" + i1 + "/text", schemaPath: "#/definitions/link/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid4 = _errs23 === errors; } else { var valid4 = true; } } } } } } } else { validate331.errors = [{ instancePath: instancePath + "/links/" + i1, schemaPath: "#/definitions/link/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid2 = _errs13 === errors; if (!valid2) { break; } } } } else { validate331.errors = [{ instancePath: instancePath + "/links", schemaPath: "#/properties/links/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs11 === errors; } else { var valid0 = true; } if (valid0) { if (data.origins !== undefined) { let data11 = data.origins; const _errs25 = errors; if (errors === _errs25) { if (Array.isArray(data11)) { if (data11.length < 1) { validate331.errors = [{ instancePath: instancePath + "/origins", schemaPath: "#/properties/origins/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid5 = true; const len2 = data11.length; for (let i2 = 0; i2 < len2; i2++) { let data12 = data11[i2]; const _errs27 = errors; if (errors === _errs27) { if (data12 && typeof data12 == "object" && !Array.isArray(data12)) { let missing2; if ((data12.actors === undefined) && (missing2 = "actors")) { validate331.errors = [{ instancePath: instancePath + "/origins/" + i2, schemaPath: "#/properties/origins/items/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" }]; return false; } else { const _errs29 = errors; for (const key2 in data12) { if (!(key2 === "actors")) { validate331.errors = [{ instancePath: instancePath + "/origins/" + i2, schemaPath: "#/properties/origins/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs29 === errors) { if (data12.actors !== undefined) { let data13 = data12.actors; const _errs30 = errors; if (errors === _errs30) { if (Array.isArray(data13)) { if (data13.length < 1) { validate331.errors = [{ instancePath: instancePath + "/origins/" + i2 + "/actors", schemaPath: "#/properties/origins/items/properties/actors/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid7 = true; const len3 = data13.length; for (let i3 = 0; i3 < len3; i3++) { const _errs32 = errors; if (!(validate280(data13[i3], { instancePath: instancePath + "/origins/" + i2 + "/actors/" + i3, parentData: data13, parentDataProperty: i3, rootData }))) { vErrors = vErrors === null ? validate280.errors : vErrors.concat(validate280.errors); errors = vErrors.length; } var valid7 = _errs32 === errors; if (!valid7) { break; } } } } else { validate331.errors = [{ instancePath: instancePath + "/origins/" + i2 + "/actors", schemaPath: "#/properties/origins/items/properties/actors/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } } } } } else { validate331.errors = [{ instancePath: instancePath + "/origins/" + i2, schemaPath: "#/properties/origins/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid5 = _errs27 === errors; if (!valid5) { break; } } } } else { validate331.errors = [{ instancePath: instancePath + "/origins", schemaPath: "#/properties/origins/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs25 === errors; } else { var valid0 = true; } if (valid0) { if (data.related_observations !== undefined) { let data15 = data.related_observations; const _errs33 = errors; if (errors === _errs33) { if (Array.isArray(data15)) { if (data15.length < 1) { validate331.errors = [{ instancePath: instancePath + "/related_observations", schemaPath: "#/properties/related_observations/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid8 = true; const len4 = data15.length; for (let i4 = 0; i4 < len4; i4++) { let data16 = data15[i4]; const _errs35 = errors; if (errors === _errs35) { if (data16 && typeof data16 == "object" && !Array.isArray(data16)) { let missing3; if ((data16.observation_uuid === undefined) && (missing3 = "observation_uuid")) { validate331.errors = [{ instancePath: instancePath + "/related_observations/" + i4, schemaPath: "#/properties/related_observations/items/required", keyword: "required", params: { missingProperty: missing3 }, message: "must have required property '" + missing3 + "'" }]; return false; } else { const _errs37 = errors; for (const key3 in data16) { if (!(key3 === "observation_uuid")) { validate331.errors = [{ instancePath: instancePath + "/related_observations/" + i4, schemaPath: "#/properties/related_observations/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key3 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs37 === errors) { if (data16.observation_uuid !== undefined) { let data17 = data16.observation_uuid; const _errs38 = errors; if (errors === _errs38) { if (typeof data17 === "string") { if (!pattern0.test(data17)) { validate331.errors = [{ instancePath: instancePath + "/related_observations/" + i4 + "/observation_uuid", schemaPath: "#/properties/related_observations/items/properties/observation_uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate331.errors = [{ instancePath: instancePath + "/related_observations/" + i4 + "/observation_uuid", schemaPath: "#/properties/related_observations/items/properties/observation_uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } } } } else { validate331.errors = [{ instancePath: instancePath + "/related_observations/" + i4, schemaPath: "#/properties/related_observations/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid8 = _errs35 === errors; if (!valid8) { break; } } } } else { validate331.errors = [{ instancePath: instancePath + "/related_observations", schemaPath: "#/properties/related_observations/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs33 === errors; } else { var valid0 = true; } if (valid0) { if (data.related_risks !== undefined) { let data18 = data.related_risks; const _errs40 = errors; if (errors === _errs40) { if (Array.isArray(data18)) { if (data18.length < 1) { validate331.errors = [{ instancePath: instancePath + "/related_risks", schemaPath: "#/properties/related_risks/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid10 = true; const len5 = data18.length; for (let i5 = 0; i5 < len5; i5++) { let data19 = data18[i5]; const _errs42 = errors; if (errors === _errs42) { if (data19 && typeof data19 == "object" && !Array.isArray(data19)) { let missing4; if ((data19.risk_uuid === undefined) && (missing4 = "risk_uuid")) { validate331.errors = [{ instancePath: instancePath + "/related_risks/" + i5, schemaPath: "#/properties/related_risks/items/required", keyword: "required", params: { missingProperty: missing4 }, message: "must have required property '" + missing4 + "'" }]; return false; } else { const _errs44 = errors; for (const key4 in data19) { if (!(key4 === "risk_uuid")) { validate331.errors = [{ instancePath: instancePath + "/related_risks/" + i5, schemaPath: "#/properties/related_risks/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key4 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs44 === errors) { if (data19.risk_uuid !== undefined) { let data20 = data19.risk_uuid; const _errs45 = errors; if (errors === _errs45) { if (typeof data20 === "string") { if (!pattern0.test(data20)) { validate331.errors = [{ instancePath: instancePath + "/related_risks/" + i5 + "/risk_uuid", schemaPath: "#/properties/related_risks/items/properties/risk_uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate331.errors = [{ instancePath: instancePath + "/related_risks/" + i5 + "/risk_uuid", schemaPath: "#/properties/related_risks/items/properties/risk_uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } } } } else { validate331.errors = [{ instancePath: instancePath + "/related_risks/" + i5, schemaPath: "#/properties/related_risks/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid10 = _errs42 === errors; if (!valid10) { break; } } } } else { validate331.errors = [{ instancePath: instancePath + "/related_risks", schemaPath: "#/properties/related_risks/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs40 === errors; } else { var valid0 = true; } if (valid0) { if (data.remarks !== undefined) { const _errs47 = errors; if (typeof data.remarks !== "string") { validate331.errors = [{ instancePath: instancePath + "/remarks", schemaPath: "#/definitions/remarks/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid0 = _errs47 === errors; } else { var valid0 = true; } } } } } } } } } } } } else { validate331.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate331.errors = vErrors; return errors === 0; } function validate322(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="#/definitions/plan_of_action_and_milestones" */; let vErrors = null; let errors = 0; if (errors === 0) { if (data && typeof data == "object" && !Array.isArray(data)) { let missing0; if ((((data.uuid === undefined) && (missing0 = "uuid")) || ((data.metadata === undefined) && (missing0 = "metadata"))) || ((data.poam_items === undefined) && (missing0 = "poam_items"))) { validate322.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }]; return false; } else { const _errs1 = errors; for (const key0 in data) { if (!(func8.call(schema295.properties, key0))) { validate322.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs1 === errors) { if (data.uuid !== undefined) { let data0 = data.uuid; const _errs2 = errors; if (errors === _errs2) { if (typeof data0 === "string") { if (!pattern0.test(data0)) { validate322.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/pattern", keyword: "pattern", params: { pattern: "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" }, message: "must match pattern \"" + "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$" + "\"" }]; return false; } } else { validate322.errors = [{ instancePath: instancePath + "/uuid", schemaPath: "#/properties/uuid/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } var valid0 = _errs2 === errors; } else { var valid0 = true; } if (valid0) { if (data.metadata !== undefined) { const _errs4 = errors; if (!(validate22(data.metadata, { instancePath: instancePath + "/metadata", parentData: data, parentDataProperty: "metadata", rootData }))) { vErrors = vErrors === null ? validate22.errors : vErrors.concat(validate22.errors); errors = vErrors.length; } var valid0 = _errs4 === errors; } else { var valid0 = true; } if (valid0) { if (data.import_ssp !== undefined) { const _errs5 = errors; if (!(validate204(data.import_ssp, { instancePath: instancePath + "/import_ssp", parentData: data, parentDataProperty: "import_ssp", rootData }))) { vErrors = vErrors === null ? validate204.errors : vErrors.concat(validate204.errors); errors = vErrors.length; } var valid0 = _errs5 === errors; } else { var valid0 = true; } if (valid0) { if (data.system_id !== undefined) { let data3 = data.system_id; const _errs6 = errors; const _errs7 = errors; if (errors === _errs7) { if (data3 && typeof data3 == "object" && !Array.isArray(data3)) { let missing1; if ((data3.id === undefined) && (missing1 = "id")) { validate322.errors = [{ instancePath: instancePath + "/system_id", schemaPath: "#/definitions/system_id/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }]; return false; } else { const _errs9 = errors; for (const key1 in data3) { if (!((key1 === "identifier_type") || (key1 === "id"))) { validate322.errors = [{ instancePath: instancePath + "/system_id", schemaPath: "#/definitions/system_id/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }]; return false; break; } } if (_errs9 === errors) { if (data3.identifier_type !== undefined) { let data4 = data3.identifier_type; const _errs10 = errors; if (errors === _errs10) { if (errors === _errs10) { if (typeof data4 === "string") { if (!(formats8(data4))) { validate322.errors = [{ instancePath: instancePath + "/system_id/identifier_type", schemaPath: "#/definitions/system_id/properties/identifier_type/format", keyword: "format", params: { format: "uri" }, message: "must match format \"" + "uri" + "\"" }]; return false; } } else { validate322.errors = [{ instancePath: instancePath + "/system_id/identifier_type", schemaPath: "#/definitions/system_id/properties/identifier_type/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } } } var valid2 = _errs10 === errors; } else { var valid2 = true; } if (valid2) { if (data3.id !== undefined) { const _errs12 = errors; if (typeof data3.id !== "string") { validate322.errors = [{ instancePath: instancePath + "/system_id/id", schemaPath: "#/definitions/system_id/properties/id/type", keyword: "type", params: { type: "string" }, message: "must be string" }]; return false; } var valid2 = _errs12 === errors; } else { var valid2 = true; } } } } } else { validate322.errors = [{ instancePath: instancePath + "/system_id", schemaPath: "#/definitions/system_id/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } var valid0 = _errs6 === errors; } else { var valid0 = true; } if (valid0) { if (data.local_definitions !== undefined) { const _errs14 = errors; if (!(validate325(data.local_definitions, { instancePath: instancePath + "/local_definitions", parentData: data, parentDataProperty: "local_definitions", rootData }))) { vErrors = vErrors === null ? validate325.errors : vErrors.concat(validate325.errors); errors = vErrors.length; } var valid0 = _errs14 === errors; } else { var valid0 = true; } if (valid0) { if (data.observations !== undefined) { let data7 = data.observations; const _errs15 = errors; if (errors === _errs15) { if (Array.isArray(data7)) { if (data7.length < 1) { validate322.errors = [{ instancePath: instancePath + "/observations", schemaPath: "#/properties/observations/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid3 = true; const len0 = data7.length; for (let i0 = 0; i0 < len0; i0++) { const _errs17 = errors; if (!(validate277(data7[i0], { instancePath: instancePath + "/observations/" + i0, parentData: data7, parentDataProperty: i0, rootData }))) { vErrors = vErrors === null ? validate277.errors : vErrors.concat(validate277.errors); errors = vErrors.length; } var valid3 = _errs17 === errors; if (!valid3) { break; } } } } else { validate322.errors = [{ instancePath: instancePath + "/observations", schemaPath: "#/properties/observations/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs15 === errors; } else { var valid0 = true; } if (valid0) { if (data.risks !== undefined) { let data9 = data.risks; const _errs18 = errors; if (errors === _errs18) { if (Array.isArray(data9)) { if (data9.length < 1) { validate322.errors = [{ instancePath: instancePath + "/risks", schemaPath: "#/properties/risks/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid4 = true; const len1 = data9.length; for (let i1 = 0; i1 < len1; i1++) { const _errs20 = errors; if (!(validate290(data9[i1], { instancePath: instancePath + "/risks/" + i1, parentData: data9, parentDataProperty: i1, rootData }))) { vErrors = vErrors === null ? validate290.errors : vErrors.concat(validate290.errors); errors = vErrors.length; } var valid4 = _errs20 === errors; if (!valid4) { break; } } } } else { validate322.errors = [{ instancePath: instancePath + "/risks", schemaPath: "#/properties/risks/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs18 === errors; } else { var valid0 = true; } if (valid0) { if (data.poam_items !== undefined) { let data11 = data.poam_items; const _errs21 = errors; if (errors === _errs21) { if (Array.isArray(data11)) { if (data11.length < 1) { validate322.errors = [{ instancePath: instancePath + "/poam_items", schemaPath: "#/properties/poam_items/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }]; return false; } else { var valid5 = true; const len2 = data11.length; for (let i2 = 0; i2 < len2; i2++) { const _errs23 = errors; if (!(validate331(data11[i2], { instancePath: instancePath + "/poam_items/" + i2, parentData: data11, parentDataProperty: i2, rootData }))) { vErrors = vErrors === null ? validate331.errors : vErrors.concat(validate331.errors); errors = vErrors.length; } var valid5 = _errs23 === errors; if (!valid5) { break; } } } } else { validate322.errors = [{ instancePath: instancePath + "/poam_items", schemaPath: "#/properties/poam_items/type", keyword: "type", params: { type: "array" }, message: "must be array" }]; return false; } } var valid0 = _errs21 === errors; } else { var valid0 = true; } if (valid0) { if (data.back_matter !== undefined) { const _errs24 = errors; if (!(validate62(data.back_matter, { instancePath: instancePath + "/back_matter", parentData: data, parentDataProperty: "back_matter", rootData }))) { vErrors = vErrors === null ? validate62.errors : vErrors.concat(validate62.errors); errors = vErrors.length; } var valid0 = _errs24 === errors; } else { var valid0 = true; } } } } } } } } } } } } else { validate322.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } } validate322.errors = vErrors; return errors === 0; } function validate20(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) {/*# sourceURL="http://csrc.nist.gov/ns/oscal/1.0.0/oscal_complete_schema.json" */; let vErrors = null; let errors = 0; if (!(data && typeof data == "object" && !Array.isArray(data))) { validate20.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }]; return false; } const _errs2 = errors; let valid0 = false; let passing0 = null; const _errs3 = errors; if (data && typeof data == "object" && !Array.isArray(data)) { if (Object.keys(data).length > 1) { const err0 = { instancePath, schemaPath: "#/oneOf/0/maxProperties", keyword: "maxProperties", params: { limit: 1 }, message: "must NOT have more than 1 items" }; if (vErrors === null) { vErrors = [err0]; } else { vErrors.push(err0); } errors++; } else { let missing0; if ((data.catalog === undefined) && (missing0 = "catalog")) { const err1 = { instancePath, schemaPath: "#/oneOf/0/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }; if (vErrors === null) { vErrors = [err1]; } else { vErrors.push(err1); } errors++; } else { const _errs4 = errors; for (const key0 in data) { if (!(key0 === "catalog")) { const err2 = { instancePath, schemaPath: "#/oneOf/0/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }; if (vErrors === null) { vErrors = [err2]; } else { vErrors.push(err2); } errors++; break; } } if (_errs4 === errors) { if (data.catalog !== undefined) { if (!(validate21(data.catalog, { instancePath: instancePath + "/catalog", parentData: data, parentDataProperty: "catalog", rootData }))) { vErrors = vErrors === null ? validate21.errors : vErrors.concat(validate21.errors); errors = vErrors.length; } } } } } } var _valid0 = _errs3 === errors; if (_valid0) { valid0 = true; passing0 = 0; } const _errs6 = errors; if (data && typeof data == "object" && !Array.isArray(data)) { if (Object.keys(data).length > 1) { const err3 = { instancePath, schemaPath: "#/oneOf/1/maxProperties", keyword: "maxProperties", params: { limit: 1 }, message: "must NOT have more than 1 items" }; if (vErrors === null) { vErrors = [err3]; } else { vErrors.push(err3); } errors++; } else { let missing1; if ((data.profile === undefined) && (missing1 = "profile")) { const err4 = { instancePath, schemaPath: "#/oneOf/1/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }; if (vErrors === null) { vErrors = [err4]; } else { vErrors.push(err4); } errors++; } else { const _errs7 = errors; for (const key1 in data) { if (!(key1 === "profile")) { const err5 = { instancePath, schemaPath: "#/oneOf/1/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }; if (vErrors === null) { vErrors = [err5]; } else { vErrors.push(err5); } errors++; break; } } if (_errs7 === errors) { if (data.profile !== undefined) { if (!(validate69(data.profile, { instancePath: instancePath + "/profile", parentData: data, parentDataProperty: "profile", rootData }))) { vErrors = vErrors === null ? validate69.errors : vErrors.concat(validate69.errors); errors = vErrors.length; } } } } } } var _valid0 = _errs6 === errors; if (_valid0 && valid0) { valid0 = false; passing0 = [passing0, 1]; } else { if (_valid0) { valid0 = true; passing0 = 1; } const _errs9 = errors; if (data && typeof data == "object" && !Array.isArray(data)) { if (Object.keys(data).length > 1) { const err6 = { instancePath, schemaPath: "#/oneOf/2/maxProperties", keyword: "maxProperties", params: { limit: 1 }, message: "must NOT have more than 1 items" }; if (vErrors === null) { vErrors = [err6]; } else { vErrors.push(err6); } errors++; } else { let missing2; if ((data.component_definition === undefined) && (missing2 = "component_definition")) { const err7 = { instancePath, schemaPath: "#/oneOf/2/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" }; if (vErrors === null) { vErrors = [err7]; } else { vErrors.push(err7); } errors++; } else { const _errs10 = errors; for (const key2 in data) { if (!(key2 === "component_definition")) { const err8 = { instancePath, schemaPath: "#/oneOf/2/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }; if (vErrors === null) { vErrors = [err8]; } else { vErrors.push(err8); } errors++; break; } } if (_errs10 === errors) { if (data.component_definition !== undefined) { if (!(validate98(data.component_definition, { instancePath: instancePath + "/component_definition", parentData: data, parentDataProperty: "component_definition", rootData }))) { vErrors = vErrors === null ? validate98.errors : vErrors.concat(validate98.errors); errors = vErrors.length; } } } } } } var _valid0 = _errs9 === errors; if (_valid0 && valid0) { valid0 = false; passing0 = [passing0, 2]; } else { if (_valid0) { valid0 = true; passing0 = 2; } const _errs12 = errors; if (data && typeof data == "object" && !Array.isArray(data)) { if (Object.keys(data).length > 1) { const err9 = { instancePath, schemaPath: "#/oneOf/3/maxProperties", keyword: "maxProperties", params: { limit: 1 }, message: "must NOT have more than 1 items" }; if (vErrors === null) { vErrors = [err9]; } else { vErrors.push(err9); } errors++; } else { let missing3; if ((data.system_security_plan === undefined) && (missing3 = "system_security_plan")) { const err10 = { instancePath, schemaPath: "#/oneOf/3/required", keyword: "required", params: { missingProperty: missing3 }, message: "must have required property '" + missing3 + "'" }; if (vErrors === null) { vErrors = [err10]; } else { vErrors.push(err10); } errors++; } else { const _errs13 = errors; for (const key3 in data) { if (!(key3 === "system_security_plan")) { const err11 = { instancePath, schemaPath: "#/oneOf/3/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key3 }, message: "must NOT have additional properties" }; if (vErrors === null) { vErrors = [err11]; } else { vErrors.push(err11); } errors++; break; } } if (_errs13 === errors) { if (data.system_security_plan !== undefined) { if (!(validate148(data.system_security_plan, { instancePath: instancePath + "/system_security_plan", parentData: data, parentDataProperty: "system_security_plan", rootData }))) { vErrors = vErrors === null ? validate148.errors : vErrors.concat(validate148.errors); errors = vErrors.length; } } } } } } var _valid0 = _errs12 === errors; if (_valid0 && valid0) { valid0 = false; passing0 = [passing0, 3]; } else { if (_valid0) { valid0 = true; passing0 = 3; } const _errs15 = errors; if (data && typeof data == "object" && !Array.isArray(data)) { if (Object.keys(data).length > 1) { const err12 = { instancePath, schemaPath: "#/oneOf/4/maxProperties", keyword: "maxProperties", params: { limit: 1 }, message: "must NOT have more than 1 items" }; if (vErrors === null) { vErrors = [err12]; } else { vErrors.push(err12); } errors++; } else { let missing4; if ((data.assessment_plan === undefined) && (missing4 = "assessment_plan")) { const err13 = { instancePath, schemaPath: "#/oneOf/4/required", keyword: "required", params: { missingProperty: missing4 }, message: "must have required property '" + missing4 + "'" }; if (vErrors === null) { vErrors = [err13]; } else { vErrors.push(err13); } errors++; } else { const _errs16 = errors; for (const key4 in data) { if (!(key4 === "assessment_plan")) { const err14 = { instancePath, schemaPath: "#/oneOf/4/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key4 }, message: "must NOT have additional properties" }; if (vErrors === null) { vErrors = [err14]; } else { vErrors.push(err14); } errors++; break; } } if (_errs16 === errors) { if (data.assessment_plan !== undefined) { if (!(validate202(data.assessment_plan, { instancePath: instancePath + "/assessment_plan", parentData: data, parentDataProperty: "assessment_plan", rootData }))) { vErrors = vErrors === null ? validate202.errors : vErrors.concat(validate202.errors); errors = vErrors.length; } } } } } } var _valid0 = _errs15 === errors; if (_valid0 && valid0) { valid0 = false; passing0 = [passing0, 4]; } else { if (_valid0) { valid0 = true; passing0 = 4; } const _errs18 = errors; if (data && typeof data == "object" && !Array.isArray(data)) { if (Object.keys(data).length > 1) { const err15 = { instancePath, schemaPath: "#/oneOf/5/maxProperties", keyword: "maxProperties", params: { limit: 1 }, message: "must NOT have more than 1 items" }; if (vErrors === null) { vErrors = [err15]; } else { vErrors.push(err15); } errors++; } else { let missing5; if ((data.assessment_results === undefined) && (missing5 = "assessment_results")) { const err16 = { instancePath, schemaPath: "#/oneOf/5/required", keyword: "required", params: { missingProperty: missing5 }, message: "must have required property '" + missing5 + "'" }; if (vErrors === null) { vErrors = [err16]; } else { vErrors.push(err16); } errors++; } else { const _errs19 = errors; for (const key5 in data) { if (!(key5 === "assessment_results")) { const err17 = { instancePath, schemaPath: "#/oneOf/5/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key5 }, message: "must NOT have additional properties" }; if (vErrors === null) { vErrors = [err17]; } else { vErrors.push(err17); } errors++; break; } } if (_errs19 === errors) { if (data.assessment_results !== undefined) { if (!(validate254(data.assessment_results, { instancePath: instancePath + "/assessment_results", parentData: data, parentDataProperty: "assessment_results", rootData }))) { vErrors = vErrors === null ? validate254.errors : vErrors.concat(validate254.errors); errors = vErrors.length; } } } } } } var _valid0 = _errs18 === errors; if (_valid0 && valid0) { valid0 = false; passing0 = [passing0, 5]; } else { if (_valid0) { valid0 = true; passing0 = 5; } const _errs21 = errors; if (data && typeof data == "object" && !Array.isArray(data)) { if (Object.keys(data).length > 1) { const err18 = { instancePath, schemaPath: "#/oneOf/6/maxProperties", keyword: "maxProperties", params: { limit: 1 }, message: "must NOT have more than 1 items" }; if (vErrors === null) { vErrors = [err18]; } else { vErrors.push(err18); } errors++; } else { let missing6; if ((data.plan_of_action_and_milestones === undefined) && (missing6 = "plan_of_action_and_milestones")) { const err19 = { instancePath, schemaPath: "#/oneOf/6/required", keyword: "required", params: { missingProperty: missing6 }, message: "must have required property '" + missing6 + "'" }; if (vErrors === null) { vErrors = [err19]; } else { vErrors.push(err19); } errors++; } else { const _errs22 = errors; for (const key6 in data) { if (!(key6 === "plan_of_action_and_milestones")) { const err20 = { instancePath, schemaPath: "#/oneOf/6/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key6 }, message: "must NOT have additional properties" }; if (vErrors === null) { vErrors = [err20]; } else { vErrors.push(err20); } errors++; break; } } if (_errs22 === errors) { if (data.plan_of_action_and_milestones !== undefined) { if (!(validate322(data.plan_of_action_and_milestones, { instancePath: instancePath + "/plan_of_action_and_milestones", parentData: data, parentDataProperty: "plan_of_action_and_milestones", rootData }))) { vErrors = vErrors === null ? validate322.errors : vErrors.concat(validate322.errors); errors = vErrors.length; } } } } } } var _valid0 = _errs21 === errors; if (_valid0 && valid0) { valid0 = false; passing0 = [passing0, 6]; } else { if (_valid0) { valid0 = true; passing0 = 6; } } } } } } } if (!valid0) { const err21 = { instancePath, schemaPath: "#/oneOf", keyword: "oneOf", params: { passingSchemas: passing0 }, message: "must match exactly one schema in oneOf" }; if (vErrors === null) { vErrors = [err21]; } else { vErrors.push(err21); } errors++; validate20.errors = vErrors; return false; } else { errors = _errs2; if (vErrors !== null) { if (_errs2) { vErrors.length = _errs2; } else { vErrors = null; } } } validate20.errors = vErrors; return errors === 0; }